{
  "address": "0xB9d9e972100a1dD01cd441774b45b5821e136043",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultCurrency",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_uScale",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_gasFeeLiquidity",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "gasInVaultCurrency",
          "type": "uint256"
        }
      ],
      "name": "GasPaidRebalanceETF",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_underlying",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_withdrawalRequests",
          "type": "uint256"
        }
      ],
      "name": "PushTotalUnderlying",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_chain",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "_rewards",
          "type": "int256[]"
        }
      ],
      "name": "PushedRewardsToGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "RebalanceXChain",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "amountToSendXChain",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "balanceUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "blacklistProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calcShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "controller",
      "outputs": [
        {
          "internalType": "contract IController",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deltaAllocationsReceived",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derbyToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasFeeLiquidity",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeChain",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginScale",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pushTotalUnderlyingToController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceETF",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceNeeded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceXChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiveFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "receiveFundsGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveProtocolAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveProtocolAllocationsGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemRewardsGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPerLockedToken",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "savedTotalUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendRewardsToGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_homeChain",
          "type": "uint16"
        }
      ],
      "name": "setChainIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "setDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setDaoToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        }
      ],
      "name": "setGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_gasFeeLiquidity",
          "type": "uint256"
        }
      ],
      "name": "setGasFeeLiquidity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xProvider",
          "type": "address"
        }
      ],
      "name": "setHomeXProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityPerc",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_marginScale",
          "type": "int256"
        }
      ],
      "name": "setMarginScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestampInternal",
          "type": "uint256"
        }
      ],
      "name": "setRebalanceInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setSwapRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setTotalUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum Vault.State",
          "name": "_state",
          "type": "uint8"
        }
      ],
      "name": "setVaultStateGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToSend",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "setXChainAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amountToSend",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "setXChainAllocationGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "enum Vault.State",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "toggleVaultOnOff",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocatedTokens",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uScale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCurrency",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultCurrencyAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultOff",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawalRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6fb434fff0bd424964ef3059c3a769eb1295a941f9fbde894a396671a4fa0200",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xB9d9e972100a1dD01cd441774b45b5821e136043",
    "transactionIndex": 0,
    "gasUsed": "5126444",
    "logsBloom": "0x
    "blockHash": "0xc9c2a3af276e0424a67ad5d1c248cfd9a5634abfa14da738c91e1026160c3cb0",
    "transactionHash": "0x6fb434fff0bd424964ef3059c3a769eb1295a941f9fbde894a396671a4fa0200",
    "logs": [],
    "blockNumber": 15932067,
    "cumulativeGasUsed": "5126444",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "DerbyUSDC",
    "dfUSDC",
    6,
    0,
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0x103A3b128991781EE2c8db0454cA99d67b257923",
    "0x90c84237fDdf091b1E63f369AF122EB46000bc70",
    "0xdAC17F958D2ee523a2206206994597C13D831ec7",
    1000000,
    10000000000
  ],
  "numDeployments": 1,
  "solcInputHash": "f987a020c854af057aeb38d6938caa4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultCurrency\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_uScale\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_gasFeeLiquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"gasInVaultCurrency\",\"type\":\"uint256\"}],\"name\":\"GasPaidRebalanceETF\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_underlying\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_withdrawalRequests\",\"type\":\"uint256\"}],\"name\":\"PushTotalUnderlying\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_chain\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"_rewards\",\"type\":\"int256[]\"}],\"name\":\"PushedRewardsToGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"RebalanceXChain\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"amountToSendXChain\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"balanceUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"blacklistProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"controller\",\"outputs\":[{\"internalType\":\"contract IController\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deltaAllocationsReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derbyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasFeeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeChain\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginScale\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pushTotalUnderlyingToController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceETF\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceXChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"receiveFundsGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveProtocolAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveProtocolAllocationsGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemRewardsGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerLockedToken\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savedTotalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRewardsToGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_homeChain\",\"type\":\"uint16\"}],\"name\":\"setChainIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setDaoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"}],\"name\":\"setGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_gasFeeLiquidity\",\"type\":\"uint256\"}],\"name\":\"setGasFeeLiquidity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xProvider\",\"type\":\"address\"}],\"name\":\"setHomeXProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityPerc\",\"type\":\"uint256\"}],\"name\":\"setLiquidityPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_marginScale\",\"type\":\"int256\"}],\"name\":\"setMarginScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestampInternal\",\"type\":\"uint256\"}],\"name\":\"setRebalanceInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setSwapRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTotalUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum Vault.State\",\"name\":\"_state\",\"type\":\"uint8\"}],\"name\":\"setVaultStateGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToSend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setXChainAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amountToSend\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"setXChainAllocationGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"enum Vault.State\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"toggleVaultOnOff\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocatedTokens\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCurrency\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultCurrencyAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultOff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceUnderlying(uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to an underlying protocol e.g compound_usdc_01\"},\"returns\":{\"_0\":\"Balance in VaultCurrency e.g USDC\"}},\"blacklistProtocol(uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to an underlying vault e.g compound_usdc_01\"}},\"calcShares(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount in underyling token e.g USDC\",\"_protocolNum\":\"Protocol number linked to an underlying protocol e.g compound_usdc_01\"},\"returns\":{\"_0\":\"number of shares i.e LP tokens\"}},\"claimTokens()\":{\"details\":\"Loops over protocols in ETF and check if they are claimable in controller contract\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"details\":\"Deposit VaultCurrency to Vault and mint LP tokens\",\"params\":{\"_amount\":\"Amount to deposit\"},\"returns\":{\"shares\":\"Tokens received by buyer\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"price(uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to an underlying protocol e.g compound_usdc_01\"},\"returns\":{\"_0\":\"protocolPrice Price per lp token\"}},\"rebalanceETF()\":{\"details\":\"amountToProtocol = totalAmount * currentAllocation / totalAllocatedTokensamountToDeposit = amountToProtocol - currentBalanceProtocolif amountToDeposit < 0 => withdrawExecute all withdrawals before deposits\"},\"rebalanceNeeded()\":{\"returns\":{\"_0\":\"bool True of rebalance is needed, false if not\"}},\"redeemRewardsGame(uint256,address)\":{\"params\":{\"_user\":\"Address of the user\",\"_value\":\"Amount to set a request in vaultCurrency\"}},\"setDao(address)\":{\"params\":{\"_dao\":\"New address of the governance / DAO\"}},\"setDaoToken(address)\":{\"params\":{\"_token\":\"New address of the derby token\"}},\"setGame(address)\":{\"params\":{\"_game\":\"New address of the game\"}},\"setGasFeeLiquidity(uint256)\":{\"params\":{\"_gasFeeLiquidity\":\"Value at which to set the gasFeeLiquidity in vaultCurrency\"}},\"setGuardian(address)\":{\"params\":{\"_guardian\":\"new address of the guardian\"}},\"setHomeXProvider(address)\":{\"params\":{\"_xProvider\":\"new address of xProvider on this chain\"}},\"setLiquidityPerc(uint256)\":{\"details\":\"The actual liquidityPerc could be a bit more or a bit less than the liquidityPerc set here.This is because some deposits or withdrawals might not execute because they don't meet the marginScale.\",\"params\":{\"_liquidityPerc\":\"Value at which to set the liquidityPerc.\"}},\"setMarginScale(int256)\":{\"details\":\"Take into account the uScale (scale of the underlying).\",\"params\":{\"_marginScale\":\"Value at which to set the marginScale.\"}},\"setPerformanceFee(uint256)\":{\"details\":\"The actual performanceFee could be a bit more or a bit less than the performanceFee set here due to approximations in the game.\",\"params\":{\"_performanceFee\":\"Value at which to set the performanceFee.\"}},\"setRebalanceInterval(uint256)\":{\"params\":{\"_timestampInternal\":\"UNIX timestamp\"}},\"setSwapRewards(bool)\":{\"params\":{\"_state\":\"True when rewards should be swapped to derby tokens\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"toggleVaultOnOff(bool)\":{\"params\":{\"_state\":\"bool for chainId on or off\"}},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdraw(uint256)\":{\"details\":\"Withdraw VaultCurrency from Vault and burn LP tokens\",\"params\":{\"_amount\":\"Amount to withdraw in LP tokens\"},\"returns\":{\"value\":\"Amount received by seller in vaultCurrency\"}},\"withdrawAllowance()\":{\"details\":\"Will send the user funds and reset the allowance\"},\"withdrawRewards()\":{\"details\":\"Will swap vaultCurrency to Derby tokens, send the user funds and reset the allowance\"},\"withdrawalRequest(uint256)\":{\"details\":\"Will give the user allowance for his funds and pulls the extra funds at the next rebalance\",\"params\":{\"_amount\":\"Amount to withdraw in LP token\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"balanceUnderlying(uint256)\":{\"notice\":\"Get balance in VaultCurrency in underlying protocol\"},\"blacklistProtocol(uint256)\":{\"notice\":\"The DAO should be able to blacklist protocols, the funds should be sent to the vault.\"},\"calcShares(uint256,uint256)\":{\"notice\":\"Calculates how many shares are equal to the amount in vault currency\"},\"claimTokens()\":{\"notice\":\"Harvest extra tokens from underlying protocols\"},\"deposit(uint256)\":{\"notice\":\"Deposit in Vault\"},\"getDao()\":{\"notice\":\"Getter for dao address\"},\"getGuardian()\":{\"notice\":\"Getter for guardian address\"},\"getWithdrawalAllowance()\":{\"notice\":\"Returns the amount in vaultCurrency the user is able to withdraw\"},\"price(uint256)\":{\"notice\":\"Get price for underlying protocol\"},\"pushTotalUnderlyingToController()\":{\"notice\":\"Step 2 trigger; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainControllerPushes totalUnderlying, totalSupply and totalWithdrawalRequests of the vault for this chainId to xController\"},\"rebalanceETF()\":{\"notice\":\"Step 7 trigger, end; Vaults rebalanceRebalances i.e deposit or withdraw from all underlying protocols\"},\"rebalanceNeeded()\":{\"notice\":\"Checks if a rebalance is needed based on the set interval\"},\"rebalanceXChain()\":{\"notice\":\"Step 4 trigger; Push funds from vaults to xChainControllerSend vaultcurrency to the xController for xChain rebalance\"},\"receiveFunds()\":{\"notice\":\"Step 5 end; Push funds from xChainController to vaultsReceiving feedback from xController when funds are received, so the vault can rebalance\"},\"receiveFundsGuard()\":{\"notice\":\"Step 5: Guardian function\"},\"receiveProtocolAllocations(int256[])\":{\"notice\":\"See receiveProtocolAllocations below\"},\"receiveProtocolAllocationsGuard(int256[])\":{\"notice\":\"Step 6: Guardian function\"},\"redeemRewardsGame(uint256,address)\":{\"notice\":\"Function for the game to set a withdrawalRequest for the rewards of the game user\"},\"sendRewardsToGame()\":{\"notice\":\"Step 8 trigger; Vaults push rewardsPerLockedToken to game\"},\"setChainIds(uint16)\":{\"notice\":\"Setter for new homeChain Id\"},\"setDao(address)\":{\"notice\":\"Set the governance address\"},\"setDaoToken(address)\":{\"notice\":\"Setter for derby token address\"},\"setGame(address)\":{\"notice\":\"Setter for new game address\"},\"setGasFeeLiquidity(uint256)\":{\"notice\":\"Set the gasFeeLiquidity, liquidity in vaultcurrency which always should be kept in vault to pay for rebalance gas fee\"},\"setGuardian(address)\":{\"notice\":\"Setter for guardian address\"},\"setHomeXProvider(address)\":{\"notice\":\"Setter for xProvider address\"},\"setLiquidityPerc(uint256)\":{\"notice\":\"Set the liquidityPerc, the amount of liquidity which should be held in the vault after rebalancing.\"},\"setMarginScale(int256)\":{\"notice\":\"Set the marginScale, the threshold used for deposits and withdrawals.If the threshold is not met the deposit/ withdrawal is not executed.\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Set the performanceFee, the percentage of the yield that goes to the game players.\"},\"setRebalanceInterval(uint256)\":{\"notice\":\"Set minimum interval for the rebalance function\"},\"setSwapRewards(bool)\":{\"notice\":\"Setter for swapping rewards to derby tokens\"},\"setTotalUnderlying()\":{\"notice\":\"Set total balance in VaultCurrency in all underlying protocols\"},\"setVaultStateGuard(uint8)\":{\"notice\":\"Guardian function to set state when vault gets stuck for whatever reason\"},\"setXChainAllocation(uint256,uint256)\":{\"notice\":\"See setXChainAllocationInt below\"},\"setXChainAllocationGuard(uint256,uint256)\":{\"notice\":\"Step 3: Guardian function\"},\"toggleVaultOnOff(bool)\":{\"notice\":\"Receive feedback for the vault if the vault is set to on or off\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw from Vault\"},\"withdrawAllowance()\":{\"notice\":\"Withdraw the allowance the user requested on the last rebalancing period\"},\"withdrawRewards()\":{\"notice\":\"Withdraw the reward allowance set by the game with redeemRewardsGame\"},\"withdrawalRequest(uint256)\":{\"notice\":\"Withdrawal request for when the vault doesnt have enough funds available\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/MainVault.sol\":\"MainVault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/// @title Quoter Interface\\r\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\r\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\r\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\r\\ninterface IQuoter {\\r\\n  /// @notice Returns the amount out received for a given exact input swap without executing the swap\\r\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\\r\\n  /// @param amountIn The amount of the first token to swap\\r\\n  /// @return amountOut The amount of the last token that would be received\\r\\n  function quoteExactInput(bytes memory path, uint256 amountIn)\\r\\n    external\\r\\n    returns (uint256 amountOut);\\r\\n\\r\\n  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\r\\n  /// @param tokenIn The token being swapped in\\r\\n  /// @param tokenOut The token being swapped out\\r\\n  /// @param fee The fee of the token pool to consider for the pair\\r\\n  /// @param amountIn The desired input amount\\r\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\r\\n  /// @return amountOut The amount of `tokenOut` that would be received\\r\\n  function quoteExactInputSingle(\\r\\n    address tokenIn,\\r\\n    address tokenOut,\\r\\n    uint24 fee,\\r\\n    uint256 amountIn,\\r\\n    uint160 sqrtPriceLimitX96\\r\\n  ) external returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x3a459293365e4b7d5dddb38eda3c68d742ee035c133b2ef0c4e3b3e52d3a469a\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IStableSwap3Pool {\\r\\n  function exchange(\\r\\n    int128 i,\\r\\n    int128 j,\\r\\n    uint256 dx,\\r\\n    uint256 min_dy\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x21a5c786bba96ea158dbed849353852a2ebe40a2e9cd6328722b83b6d3479235\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface ISwapRouter {\\r\\n  struct ExactInputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInputSingle(ISwapRouter.ExactInputSingleParams memory params)\\r\\n    external\\r\\n    returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactInputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInput(ExactInputParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x22353db7855673a12308ba8fcffadd2b21cd900d5ce58b749bf878e8c905ff22\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IUniswapV3Factory {\\r\\n  function getPool(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint24 fee\\r\\n  ) external view returns (address pool);\\r\\n}\\r\\n\",\"keccak256\":\"0x1ee377694b581bdb2a924cfdbc507d7fbbb74c9bfbd79611fe472612227dbc91\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IUniswapV3Pool {\\r\\n  /// @notice The first of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /// @notice The second of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\r\\n  /// when accessed externally.\\r\\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\r\\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\r\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\r\\n  /// boundary.\\r\\n  /// observationIndex The index of the last oracle observation that was written,\\r\\n  /// observationCardinality The current maximum number of observations stored in the pool,\\r\\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\r\\n  /// feeProtocol The protocol fee for both tokens of the pool.\\r\\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\r\\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\r\\n  /// unlocked Whether the pool is currently locked to reentrancy\\r\\n  function slot0()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint160 sqrtPriceX96,\\r\\n      int24 tick,\\r\\n      uint16 observationIndex,\\r\\n      uint16 observationCardinality,\\r\\n      uint16 observationCardinalityNext,\\r\\n      uint8 feeProtocol,\\r\\n      bool unlocked\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xcc4df67705ddcb0300f691cb4fcde5bc55ac95460dd9d155dda93415f75acd6d\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title Interface for WETH9\\r\\ninterface IWETH9 is IERC20 {\\r\\n  /// @notice Deposit ether to get wrapped ether\\r\\n  function deposit() external payable;\\r\\n\\r\\n  /// @notice Withdraw wrapped ether to get ether\\r\\n  function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf4b5008d0c423bd867b814efe0bc6c41368ba93dcaea832a62984a649c40c6a8\",\"license\":\"MIT\"},\"contracts/Interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IController {\\n  struct ProtocolInfoS {\\n    address LPToken;\\n    address provider;\\n    address underlying; // address of underlying token of the protocol eg USDC\\n    uint256 uScale; // uScale of protocol LP Token\\n  }\\n\\n  struct UniswapParams {\\n    address router;\\n    address quoter;\\n    uint24 poolFee;\\n  }\\n\\n  struct CurveParams {\\n    int128 indexTokenIn;\\n    int128 indexTokenOut;\\n    address pool;\\n    uint256 poolFee;\\n  }\\n\\n  function claim(uint256 _ETFnumber, uint256 protocolNumber) external returns (bool);\\n\\n  function addProtocol(\\n    string calldata name,\\n    uint256 _ETFnumber,\\n    address provider,\\n    address protocolLPToken,\\n    address underlying,\\n    address govToken,\\n    uint256 _uScale\\n  ) external returns (uint256);\\n\\n  function curve3Pool() external view returns (address);\\n\\n  function curve3PoolFee() external view returns (uint256);\\n\\n  function curveIndex(address _token) external view returns (int128);\\n\\n  function getProtocolInfo(uint256 _ETFnumber, uint256 protocolNumber)\\n    external\\n    view\\n    returns (ProtocolInfoS memory);\\n\\n  function getUniswapParams() external view returns (UniswapParams memory);\\n\\n  function getCurveParams(address _in, address _out) external view returns (CurveParams memory);\\n\\n  function latestProtocolId(uint256 _ETFnumber) external view returns (uint256);\\n\\n  function addVault(address _vault) external;\\n\\n  function addCurveIndex(address _token, int128 _index) external;\\n\\n  function underlyingUScale(address _token) external view returns (uint256);\\n\\n  function setUniswapRouter(address _uniswapRouter) external;\\n\\n  function setUniswapQuoter(address _uniswapQuoter) external;\\n\\n  function setUniswapPoolFee(uint24 _poolFee) external;\\n\\n  function getUniswapPoolFee() external view returns (uint24);\\n\\n  function getUniswapQuoter() external view returns (address);\\n\\n  function getProtocolBlacklist(uint256 _ETFnumber, uint256 _protocolNum)\\n    external\\n    view\\n    returns (bool);\\n\\n  function setProtocolBlacklist(uint256 _ETFnumber, uint256 _protocolNum) external;\\n\\n  function getGasPrice() external returns (uint256);\\n\\n  function setGasPriceOracle(address _chainlinkGasPriceOracle) external;\\n\\n  function getGovToken(uint256 _vaultNumber, uint256 _protocolNum) external view returns (address);\\n\\n  function getDao() external view returns (address);\\n}\\n\",\"keccak256\":\"0x342f4fe73b48ee0dda8f13dd1f441ee289a5fb3e502ac4447e4f98d13ce560e9\",\"license\":\"MIT\"},\"contracts/Interfaces/IProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IProvider {\\n  function deposit(\\n    uint256 _amount,\\n    address _uToken,\\n    address _protocolLPToken\\n  ) external returns (uint256);\\n\\n  function withdraw(\\n    uint256 _amount,\\n    address _uToken,\\n    address _protocolLPToken\\n  ) external returns (uint256);\\n\\n  function exchangeRate(address _protocolLPToken) external view returns (uint256);\\n\\n  function balanceUnderlying(address _address, address _protocolLPToken)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function calcShares(uint256 _amount, address _protocolLPToken) external view returns (uint256);\\n\\n  function balance(address _address, address _protocolLPToken) external view returns (uint256);\\n\\n  function claim(address _protocolLPToken, address _claimer) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9708d9f69e636e5ababc9e173b2b4e267bfb3b056118443c011ef73a640f4a70\",\"license\":\"MIT\"},\"contracts/Interfaces/IXProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IXProvider {\\n  function xCall(\\n    address _xProvider,\\n    uint16 _chainId,\\n    bytes memory _callData\\n  ) external;\\n\\n  function xSend(uint256 _value) external; // sending a (permissioned) value crosschain.\\n\\n  // function xSendCallback() external; // sending a (permissioned) vaule crosschain and receive a callback to a specified address.\\n  function xReceive(uint256 _value) external; // receiving a (permissioned) value crosschain.\\n\\n  function pushAllocations(uint256 _vaultNumber, int256[] memory _deltas) external;\\n\\n  function receiveTotalUnderlying(\\n    uint256 _vaultNumber,\\n    uint16 _chainId,\\n    uint256 _underlying\\n  ) external;\\n\\n  function pushSetXChainAllocation(\\n    address _vault,\\n    uint16 _chainId,\\n    uint256 _amountToWithdraw,\\n    uint256 _exchangeRate\\n  ) external;\\n\\n  function xTransferToController(\\n    uint256 _vaultNumber,\\n    uint256 _amount,\\n    address _asset\\n  ) external;\\n\\n  function receiveFeedbackToXController(uint256 _vaultNumber) external;\\n\\n  function xTransferToVaults(\\n    address _vault,\\n    uint16 _chainId,\\n    uint256 _amount,\\n    address _asset\\n  ) external;\\n\\n  function pushProtocolAllocationsToVault(\\n    uint16 _chainId,\\n    address _vault,\\n    int256[] memory _deltas\\n  ) external;\\n\\n  function getDecimals(address _vault) external view returns (uint256);\\n\\n  function pushTotalUnderlying(\\n    uint256 _vaultNumber,\\n    uint16 _chainId,\\n    uint256 _underlying,\\n    uint256 _totalSupply,\\n    uint256 _withdrawalRequests\\n  ) external;\\n\\n  function pushStateFeedbackToVault(\\n    address _vault,\\n    uint16 _chainId,\\n    bool _state\\n  ) external;\\n\\n  function pushRewardsToGame(\\n    uint256 _vaultNumber,\\n    uint16 _chainId,\\n    int256[] memory _rewards\\n  ) external;\\n\\n  function homeChain() external returns (uint16);\\n}\\n\",\"keccak256\":\"0x1b7248093668ce74745924d8c3d10815ea192e9ee65ac036282190dbc798231a\",\"license\":\"MIT\"},\"contracts/MainVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\nimport \\\"./Vault.sol\\\";\\n\\nimport \\\"./Interfaces/IXProvider.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract MainVault is Vault, VaultToken {\\n  using SafeERC20 for IERC20;\\n\\n  address public derbyToken;\\n  address public game;\\n  address public xProvider;\\n\\n  bool public vaultOff;\\n  // True when rewards should be swapped to derby tokens\\n  bool private swapRewards;\\n\\n  // total amount of withdrawal requests for the vault to pull extra during a cross-chain rebalance, will be upped when a user makes a withdrawalRequest\\n  // during a cross-chain rebalance the vault will pull extra funds by the amount of totalWithdrawalRequests and the totalWithdrawalRequests will turn into actual reservedFunds\\n  uint256 internal totalWithdrawalRequests;\\n\\n  uint256 public exchangeRate;\\n  uint16 public homeChain;\\n  uint256 public amountToSendXChain;\\n\\n  // (userAddress => withdrawalAllowance): amount in vaultCurrency the vault owes to the user\\n  mapping(address => uint256) internal withdrawalAllowance;\\n  // (userAddress => requestPeriod): rebalancing period the withdrawal request is made\\n  mapping(address => uint256) internal withdrawalRequestPeriod;\\n  // (userAddress => rewardAllowance): amount in vaultCurrency the vault owes to the user\\n  mapping(address => uint256) internal rewardAllowance;\\n  // (userAddress => requestPeriod): rebalancing period the reward request is made\\n  mapping(address => uint256) internal rewardRequestPeriod;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals,\\n    uint256 _vaultNumber,\\n    address _dao,\\n    address _game,\\n    address _controller,\\n    address _vaultCurrency,\\n    uint256 _uScale,\\n    uint256 _gasFeeLiquidity\\n  )\\n    VaultToken(_name, _symbol, _decimals)\\n    Vault(_vaultNumber, _dao, _controller, _vaultCurrency, _uScale, _gasFeeLiquidity)\\n  {\\n    exchangeRate = _uScale;\\n    game = _game;\\n  }\\n\\n  modifier onlyXProvider() {\\n    require(msg.sender == xProvider, \\\"only xProvider\\\");\\n    _;\\n  }\\n\\n  modifier onlyWhenVaultIsOn() {\\n    require(state == State.Idle, \\\"Rebalancing\\\");\\n    require(!vaultOff, \\\"Vault is off\\\");\\n    _;\\n  }\\n\\n  modifier onlyWhenIdle() {\\n    require(state == State.Idle, \\\"Rebalancing\\\");\\n    _;\\n  }\\n\\n  modifier onlyGame() {\\n    require(msg.sender == game, \\\"only game\\\");\\n    _;\\n  }\\n\\n  event PushTotalUnderlying(\\n    uint256 _vaultNumber,\\n    uint16 _chainId,\\n    uint256 _underlying,\\n    uint256 _totalSupply,\\n    uint256 _withdrawalRequests\\n  );\\n  event RebalanceXChain(uint256 _vaultNumber, uint256 _amount, address _asset);\\n  event PushedRewardsToGame(uint256 _vaultNumber, uint16 _chain, int256[] _rewards);\\n\\n  /// @notice Deposit in Vault\\n  /// @dev Deposit VaultCurrency to Vault and mint LP tokens\\n  /// @param _amount Amount to deposit\\n  /// @return shares Tokens received by buyer\\n  function deposit(uint256 _amount)\\n    external\\n    nonReentrant\\n    onlyWhenVaultIsOn\\n    returns (uint256 shares)\\n  {\\n    uint256 balanceBefore = getVaultBalance();\\n    vaultCurrency.safeTransferFrom(msg.sender, address(this), _amount);\\n    uint256 balanceAfter = getVaultBalance();\\n\\n    uint256 amount = balanceAfter - balanceBefore;\\n    shares = (amount * (10**decimals())) / exchangeRate;\\n\\n    _mint(msg.sender, shares);\\n  }\\n\\n  /// @notice Withdraw from Vault\\n  /// @dev Withdraw VaultCurrency from Vault and burn LP tokens\\n  /// @param _amount Amount to withdraw in LP tokens\\n  /// @return value Amount received by seller in vaultCurrency\\n  function withdraw(uint256 _amount)\\n    external\\n    nonReentrant\\n    onlyWhenVaultIsOn\\n    returns (uint256 value)\\n  {\\n    value = (_amount * exchangeRate) / (10**decimals());\\n\\n    require(value > 0, \\\"No value\\\");\\n\\n    require(getVaultBalance() >= value, \\\"Not enough funds\\\");\\n\\n    _burn(msg.sender, _amount);\\n    vaultCurrency.safeTransfer(msg.sender, value);\\n  }\\n\\n  /// @notice Withdrawal request for when the vault doesnt have enough funds available\\n  /// @dev Will give the user allowance for his funds and pulls the extra funds at the next rebalance\\n  /// @param _amount Amount to withdraw in LP token\\n  function withdrawalRequest(uint256 _amount)\\n    external\\n    nonReentrant\\n    onlyWhenVaultIsOn\\n    returns (uint256 value)\\n  {\\n    require(withdrawalRequestPeriod[msg.sender] == 0, \\\"Already a request\\\");\\n\\n    value = (_amount * exchangeRate) / (10**decimals());\\n\\n    _burn(msg.sender, _amount);\\n\\n    withdrawalAllowance[msg.sender] = value;\\n    withdrawalRequestPeriod[msg.sender] = rebalancingPeriod;\\n    totalWithdrawalRequests += value;\\n  }\\n\\n  /// @notice Withdraw the allowance the user requested on the last rebalancing period\\n  /// @dev Will send the user funds and reset the allowance\\n  function withdrawAllowance() external nonReentrant onlyWhenIdle returns (uint256 value) {\\n    require(withdrawalAllowance[msg.sender] > 0, \\\"No allowance\\\");\\n    require(rebalancingPeriod > withdrawalRequestPeriod[msg.sender], \\\"Funds not arrived\\\");\\n\\n    value = withdrawalAllowance[msg.sender];\\n\\n    require(vaultCurrency.balanceOf(address(this)) >= value, \\\"No funds\\\");\\n\\n    reservedFunds -= value;\\n    delete withdrawalAllowance[msg.sender];\\n    delete withdrawalRequestPeriod[msg.sender];\\n\\n    vaultCurrency.safeTransfer(msg.sender, value);\\n  }\\n\\n  /// @notice Function for the game to set a withdrawalRequest for the rewards of the game user\\n  /// @param _value Amount to set a request in vaultCurrency\\n  /// @param _user Address of the user\\n  function redeemRewardsGame(uint256 _value, address _user)\\n    external\\n    onlyGame\\n    nonReentrant\\n    onlyWhenVaultIsOn\\n  {\\n    require(rewardAllowance[_user] == 0, \\\"No allowance\\\");\\n\\n    rewardAllowance[_user] = _value;\\n    rewardRequestPeriod[_user] = rebalancingPeriod;\\n    totalWithdrawalRequests += _value;\\n  }\\n\\n  /// @notice Withdraw the reward allowance set by the game with redeemRewardsGame\\n  /// @dev Will swap vaultCurrency to Derby tokens, send the user funds and reset the allowance\\n  function withdrawRewards() external nonReentrant onlyWhenIdle returns (uint256 value) {\\n    require(rewardAllowance[msg.sender] > 0, \\\"No allowance\\\");\\n    require(rebalancingPeriod > rewardRequestPeriod[msg.sender], \\\"Funds not arrived\\\");\\n\\n    value = rewardAllowance[msg.sender];\\n\\n    require(vaultCurrency.balanceOf(address(this)) >= value, \\\"No funds\\\");\\n\\n    reservedFunds -= value;\\n    delete rewardAllowance[msg.sender];\\n    delete rewardRequestPeriod[msg.sender];\\n\\n    if (swapRewards) {\\n      uint256 tokensReceived = Swap.swapTokensMulti(\\n        Swap.SwapInOut(value, address(vaultCurrency), derbyToken),\\n        controller.getUniswapParams()\\n      );\\n      IERC20(derbyToken).safeTransfer(msg.sender, tokensReceived);\\n    } else {\\n      vaultCurrency.safeTransfer(msg.sender, value);\\n    }\\n  }\\n\\n  /// @notice Step 2 trigger; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainController\\n  /// @notice Pushes totalUnderlying, totalSupply and totalWithdrawalRequests of the vault for this chainId to xController\\n  function pushTotalUnderlyingToController() external onlyWhenIdle {\\n    require(rebalanceNeeded(), \\\"No rebalance needed\\\");\\n\\n    setTotalUnderlying();\\n    uint256 underlying = savedTotalUnderlying + getVaultBalance();\\n\\n    IXProvider(xProvider).pushTotalUnderlying(\\n      vaultNumber,\\n      homeChain,\\n      underlying,\\n      totalSupply(),\\n      totalWithdrawalRequests\\n    );\\n\\n    state = State.PushedUnderlying;\\n    lastTimeStamp = block.timestamp;\\n\\n    emit PushTotalUnderlying(\\n      vaultNumber,\\n      homeChain,\\n      underlying,\\n      totalSupply(),\\n      totalWithdrawalRequests\\n    );\\n  }\\n\\n  /// @notice See setXChainAllocationInt below\\n  function setXChainAllocation(uint256 _amountToSend, uint256 _exchangeRate)\\n    external\\n    onlyXProvider\\n  {\\n    require(state == State.PushedUnderlying, \\\"Wrong state\\\");\\n    setXChainAllocationInt(_amountToSend, _exchangeRate);\\n  }\\n\\n  /// @notice Step 3 end; xChainController pushes exchangeRate and amount the vaults have to send back to all vaults\\n  /// @notice Will set the amount to send back to the xController by the xController\\n  /// @dev Sets the amount and state so the dao can trigger the rebalanceXChain function\\n  /// @dev When amount == 0 the vault doesnt need to send anything and will wait for funds from the xController\\n  /// @param _amountToSend amount to send in vaultCurrency\\n  function setXChainAllocationInt(uint256 _amountToSend, uint256 _exchangeRate) internal {\\n    amountToSendXChain = _amountToSend;\\n    exchangeRate = _exchangeRate;\\n\\n    if (_amountToSend == 0) state = State.WaitingForFunds;\\n    else state = State.SendingFundsXChain;\\n  }\\n\\n  /// @notice Step 4 trigger; Push funds from vaults to xChainController\\n  /// @notice Send vaultcurrency to the xController for xChain rebalance\\n  function rebalanceXChain() external {\\n    if (state != State.SendingFundsXChain) return;\\n\\n    if (amountToSendXChain > getVaultBalance()) pullFunds(amountToSendXChain);\\n\\n    vaultCurrency.safeIncreaseAllowance(xProvider, amountToSendXChain);\\n    IXProvider(xProvider).xTransferToController(\\n      vaultNumber,\\n      amountToSendXChain,\\n      address(vaultCurrency)\\n    );\\n\\n    amountToSendXChain = 0;\\n    settleReservedFunds();\\n\\n    emit RebalanceXChain(vaultNumber, amountToSendXChain, address(vaultCurrency));\\n  }\\n\\n  /// @notice Step 5 end; Push funds from xChainController to vaults\\n  /// @notice Receiving feedback from xController when funds are received, so the vault can rebalance\\n  function receiveFunds() external onlyXProvider {\\n    if (state != State.WaitingForFunds) return;\\n    settleReservedFunds();\\n  }\\n\\n  /// @notice Helper to settle reserved funds when funds arrived and up to the next State\\n  function settleReservedFunds() internal {\\n    reservedFunds += totalWithdrawalRequests;\\n    totalWithdrawalRequests = 0;\\n    state = State.RebalanceVault;\\n  }\\n\\n  /// @notice See receiveProtocolAllocations below\\n  function receiveProtocolAllocations(int256[] memory _deltas) external onlyXProvider {\\n    receiveProtocolAllocationsInt(_deltas);\\n  }\\n\\n  /// @notice Step 6 end; Game pushes deltaAllocations to vaults\\n  /// @notice Receives protocol allocation array from the game and settles the allocations\\n  /// @param _deltas Array with delta allocations where the index matches the protocolId\\n  function receiveProtocolAllocationsInt(int256[] memory _deltas) internal {\\n    for (uint i = 0; i < _deltas.length; i++) {\\n      int256 allocation = _deltas[i];\\n      if (allocation == 0) continue;\\n      setDeltaAllocationsInt(i, allocation);\\n    }\\n\\n    deltaAllocationsReceived = true;\\n  }\\n\\n  /// @notice Step 8 trigger; Vaults push rewardsPerLockedToken to game\\n  function sendRewardsToGame() external {\\n    require(state == State.SendRewardsPerToken, \\\"Wrong state\\\");\\n\\n    int256[] memory rewards = rewardsToArray();\\n    IXProvider(xProvider).pushRewardsToGame(vaultNumber, homeChain, rewards);\\n\\n    state = State.Idle;\\n\\n    emit PushedRewardsToGame(vaultNumber, homeChain, rewards);\\n  }\\n\\n  /// @notice Receive feedback for the vault if the vault is set to on or off\\n  /// @param _state bool for chainId on or off\\n  function toggleVaultOnOff(bool _state) external onlyXProvider {\\n    vaultOff = _state;\\n  }\\n\\n  /// @notice Returns the amount in vaultCurrency the user is able to withdraw\\n  function getWithdrawalAllowance() external view returns (uint256) {\\n    return withdrawalAllowance[msg.sender];\\n  }\\n\\n  /*\\n  Only Dao functions\\n  */\\n\\n  /// @notice Setter for xProvider address\\n  /// @param _xProvider new address of xProvider on this chain\\n  function setHomeXProvider(address _xProvider) external onlyDao {\\n    xProvider = _xProvider;\\n  }\\n\\n  /// @notice Setter for derby token address\\n  /// @param _token New address of the derby token\\n  function setDaoToken(address _token) external onlyDao {\\n    derbyToken = _token;\\n  }\\n\\n  /// @notice Setter for new game address\\n  /// @param _game New address of the game\\n  function setGame(address _game) external onlyDao {\\n    game = _game;\\n  }\\n\\n  /// @notice Setter for swapping rewards to derby tokens\\n  /// @param _state True when rewards should be swapped to derby tokens\\n  function setSwapRewards(bool _state) external onlyDao {\\n    swapRewards = _state;\\n  }\\n\\n  /*\\n  Only Guardian functions\\n  */\\n\\n  /// @notice Step 3: Guardian function\\n  function setXChainAllocationGuard(uint256 _amountToSend, uint256 _exchangeRate)\\n    external\\n    onlyGuardian\\n  {\\n    setXChainAllocationInt(_amountToSend, _exchangeRate);\\n  }\\n\\n  /// @notice Step 5: Guardian function\\n  function receiveFundsGuard() external onlyGuardian {\\n    settleReservedFunds();\\n  }\\n\\n  /// @notice Step 6: Guardian function\\n  function receiveProtocolAllocationsGuard(int256[] memory _deltas) external onlyGuardian {\\n    receiveProtocolAllocationsInt(_deltas);\\n  }\\n\\n  /// @notice Guardian function to set state when vault gets stuck for whatever reason\\n  function setVaultStateGuard(State _state) external onlyGuardian {\\n    state = _state;\\n  }\\n\\n  /// @notice Setter for new homeChain Id\\n  function setChainIds(uint16 _homeChain) external onlyGuardian {\\n    homeChain = _homeChain;\\n  }\\n}\\n\",\"keccak256\":\"0xd03f76044a65753a0df2c5c838d717441786165187ef691722cf664bf09130ae\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./Interfaces/IController.sol\\\";\\nimport \\\"./Interfaces/IProvider.sol\\\";\\n\\nimport \\\"./VaultToken.sol\\\";\\nimport \\\"./libraries/Swap.sol\\\";\\n\\ncontract Vault is ReentrancyGuard {\\n  using SafeERC20 for IERC20;\\n\\n  // state 0 Rebalance done and ready for xController to rebalance again\\n  // state 1 Allocation amount received and ready to send funds over to xController\\n  // state 2 Allocation amount 0 received => will receive funds from xController\\n  // state 3 Allocation amount sent or received and ready to rebalance the vault itself\\n  enum State {\\n    Idle,\\n    PushedUnderlying,\\n    SendingFundsXChain,\\n    WaitingForFunds,\\n    RebalanceVault,\\n    SendRewardsPerToken\\n  }\\n\\n  IERC20 public vaultCurrency;\\n  IController public controller;\\n  State public state;\\n\\n  bool public deltaAllocationsReceived;\\n\\n  address private dao;\\n  address private guardian;\\n  address public vaultCurrencyAddr;\\n  address public xController;\\n\\n  uint256 public vaultNumber;\\n  uint256 public liquidityPerc = 10;\\n  uint256 public performanceFee = 10;\\n  uint256 public rebalancingPeriod = 1;\\n  uint256 public uScale;\\n  int256 public marginScale = 1E10; // 10000 USDC\\n\\n  // UNIX timestamp\\n  uint256 public rebalanceInterval; // SHOULD BE REPLACED FOR REALISTIC NUMBER\\n  uint256 public lastTimeStamp;\\n  uint256 public gasFeeLiquidity;\\n\\n  // total underlying of all protocols in vault, excluding vault balance\\n  uint256 public savedTotalUnderlying;\\n\\n  // total amount of funds the vault reserved for users that made a withdrawalRequest\\n  uint256 internal reservedFunds;\\n\\n  // total number of allocated Derby tokens currently\\n  int256 public totalAllocatedTokens;\\n  // delta of the total number of Derby tokens allocated on next rebalancing\\n  int256 private deltaAllocatedTokens;\\n\\n  // (protocolNumber => currentAllocation): current allocations over the protocols\\n  mapping(uint256 => int256) internal currentAllocations;\\n\\n  // (protocolNumber => deltaAllocation): delta of the portfolio on next rebalancing\\n  mapping(uint256 => int256) internal deltaAllocations;\\n\\n  // historical reward per protocol per token, formula: TVL * yield * perfFee / totalLockedTokens\\n  // (rebalancingPeriod => protocolId => rewardPerLockedToken)\\n  mapping(uint256 => mapping(uint256 => int256)) public rewardPerLockedToken;\\n\\n  // (protocolNumber => lastPrice): last price of underlying protocol vault\\n  mapping(uint256 => uint256) public lastPrices;\\n\\n  event GasPaidRebalanceETF(uint256 gasInVaultCurrency);\\n\\n  modifier onlyDao() {\\n    require(msg.sender == dao, \\\"Vault: only DAO\\\");\\n    _;\\n  }\\n\\n  modifier onlyGuardian() {\\n    require(msg.sender == guardian, \\\"only Guardian\\\");\\n    _;\\n  }\\n\\n  modifier returnGasFee() {\\n    uint256 gasStart = gasleft();\\n    _;\\n    uint256 gasUsed = gasStart - gasleft();\\n    // console.log(\\\"gasUsed %s\\\", gasUsed);\\n    swapAndPayGasFee(gasUsed);\\n  }\\n\\n  constructor(\\n    uint256 _vaultNumber,\\n    address _dao,\\n    address _controller,\\n    address _vaultCurrency,\\n    uint256 _uScale,\\n    uint256 _gasFeeLiquidity\\n  ) {\\n    controller = IController(_controller);\\n    vaultCurrency = IERC20(_vaultCurrency);\\n\\n    vaultNumber = _vaultNumber;\\n    dao = _dao;\\n    uScale = _uScale;\\n    gasFeeLiquidity = _gasFeeLiquidity;\\n    lastTimeStamp = block.timestamp;\\n  }\\n\\n  /// @notice Withdraw from protocols on shortage in Vault\\n  /// @dev Keeps on withdrawing until the Vault balance > _value\\n  /// @param _value The total value of vaultCurrency an user is trying to withdraw.\\n  /// @param _value The (value - current underlying value of this vault) is withdrawn from the underlying protocols.\\n  function pullFunds(uint256 _value) internal {\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    for (uint i = 0; i < latestID; i++) {\\n      if (currentAllocations[i] == 0) continue;\\n\\n      uint256 shortage = _value - getVaultBalance();\\n      uint256 balanceProtocol = balanceUnderlying(i);\\n\\n      uint256 amountToWithdraw = shortage > balanceProtocol ? balanceProtocol : shortage;\\n      savedTotalUnderlying -= amountToWithdraw;\\n\\n      withdrawFromProtocol(i, amountToWithdraw);\\n\\n      if (_value <= getVaultBalance()) break;\\n    }\\n  }\\n\\n  /// @notice Step 7 trigger, end; Vaults rebalance\\n  /// @notice Rebalances i.e deposit or withdraw from all underlying protocols\\n  /// @dev amountToProtocol = totalAmount * currentAllocation / totalAllocatedTokens\\n  /// @dev amountToDeposit = amountToProtocol - currentBalanceProtocol\\n  /// @dev if amountToDeposit < 0 => withdraw\\n  /// @dev Execute all withdrawals before deposits\\n  function rebalanceETF() external returnGasFee nonReentrant {\\n    require(state == State.RebalanceVault, \\\"Wrong state\\\");\\n    require(deltaAllocationsReceived, \\\"!Delta allocations\\\");\\n\\n    rebalancingPeriod++;\\n\\n    claimTokens();\\n    settleDeltaAllocation();\\n\\n    uint256 underlyingIncBalance = calcUnderlyingIncBalance();\\n    uint256[] memory protocolToDeposit = rebalanceCheckProtocols(underlyingIncBalance);\\n\\n    executeDeposits(protocolToDeposit);\\n    setTotalUnderlying();\\n\\n    if (getVaultBalance() < gasFeeLiquidity) pullFunds(gasFeeLiquidity);\\n\\n    state = State.SendRewardsPerToken;\\n    deltaAllocationsReceived = false;\\n  }\\n\\n  /// @notice Helper to return underlying balance plus totalUnderlying - liquidty for the vault\\n  /// @return underlying totalUnderlying - liquidityVault\\n  function calcUnderlyingIncBalance() internal view returns (uint256) {\\n    uint256 totalUnderlyingInclVaultBalance = savedTotalUnderlying + getVaultBalance();\\n    uint256 liquidityVault = (totalUnderlyingInclVaultBalance * liquidityPerc) / 100;\\n    return totalUnderlyingInclVaultBalance - liquidityVault;\\n  }\\n\\n  /// @notice Adds deltaAllocatedTokens to totalAllocatedTokens\\n  function settleDeltaAllocation() internal {\\n    totalAllocatedTokens += deltaAllocatedTokens;\\n    deltaAllocatedTokens = 0;\\n  }\\n\\n  /// @notice Rebalances i.e deposit or withdraw from all underlying protocols\\n  /// @dev Loops over all protocols in ETF, calculate new currentAllocation based on deltaAllocation\\n  /// @dev Also calculate the performance fee here. This is an amount, based on the current TVL (before the rebalance),\\n  /// @dev the performanceFee and difference between the current exchangeRate and the exchangeRate of the last rebalance of the vault.\\n  /// @param _newTotalUnderlying this will be the new total underlying: Totalunderlying = TotalUnderlyingInProtocols - BalanceVault\\n  /// @return uint256[] with amounts to deposit in protocols, the index being the protocol number.\\n  function rebalanceCheckProtocols(uint256 _newTotalUnderlying)\\n    internal\\n    returns (uint256[] memory)\\n  {\\n    uint256[] memory protocolToDeposit = new uint[](controller.latestProtocolId(vaultNumber));\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    for (uint i = 0; i < latestID; i++) {\\n      bool isBlacklisted = controller.getProtocolBlacklist(vaultNumber, i);\\n\\n      storePriceAndRewards(_newTotalUnderlying, i);\\n\\n      if (isBlacklisted) continue;\\n      setAllocation(i);\\n\\n      int256 amountToProtocol = calcAmountToProtocol(_newTotalUnderlying, i);\\n      uint256 currentBalance = balanceUnderlying(i);\\n\\n      int256 amountToDeposit = amountToProtocol - int(currentBalance);\\n      uint256 amountToWithdraw = amountToDeposit < 0 ? currentBalance - uint(amountToProtocol) : 0;\\n\\n      if (amountToDeposit > marginScale) protocolToDeposit[i] = uint256(amountToDeposit);\\n      if (amountToWithdraw > uint(marginScale) || currentAllocations[i] == 0)\\n        withdrawFromProtocol(i, amountToWithdraw);\\n    }\\n\\n    return protocolToDeposit;\\n  }\\n\\n  /// @notice Calculates the amount to deposit or withdraw to protocol during a vault rebalance\\n  /// @param _totalUnderlying Totalunderlying = TotalUnderlyingInProtocols - BalanceVault\\n  /// @param _protocol Protocol id number\\n  /// @return amountToProtocol amount to deposit or withdraw to protocol\\n  function calcAmountToProtocol(uint256 _totalUnderlying, uint256 _protocol)\\n    internal\\n    view\\n    returns (int256 amountToProtocol)\\n  {\\n    if (totalAllocatedTokens == 0) amountToProtocol = 0;\\n    else\\n      amountToProtocol =\\n        (int(_totalUnderlying) * currentAllocations[_protocol]) /\\n        totalAllocatedTokens;\\n  }\\n\\n  /// @notice Stores the historical price and the reward per rounded locked token, ignoring decimals.\\n  /// @dev formula yield protocol i at time t: y(it) = (P(it) - P(it-1)) / P(it-1).\\n  /// @dev formula rewardPerLockedToken for protocol i at time t: r(it) = y(it) * TVL(t) * perfFee(t) / totalLockedTokens(t)\\n  /// @dev later, when the total rewards are calculated for a game player we multiply this (r(it)) by the locked tokens on protocol i at time t\\n  /// @param _totalUnderlying Totalunderlying = TotalUnderlyingInProtocols - BalanceVault.\\n  /// @param _protocolId Protocol id number.\\n  function storePriceAndRewards(uint256 _totalUnderlying, uint256 _protocolId) internal {\\n    uint256 price = price(_protocolId);\\n    if (lastPrices[_protocolId] == 0) return;\\n    int256 priceDiff = int256(price - lastPrices[_protocolId]);\\n    int256 nominator = (int256(_totalUnderlying * performanceFee) * priceDiff);\\n    int256 totalAllocatedTokensRounded = totalAllocatedTokens / 1E18;\\n    int256 denominator = totalAllocatedTokensRounded * int256(lastPrices[_protocolId]) * 100; // * 100 cause perfFee is in percentages\\n    if (totalAllocatedTokensRounded == 0) {\\n      rewardPerLockedToken[rebalancingPeriod][_protocolId] = 0;\\n    } else {\\n      rewardPerLockedToken[rebalancingPeriod][_protocolId] = nominator / denominator;\\n    }\\n    lastPrices[_protocolId] = price;\\n  }\\n\\n  /// @notice Creates array out of the rewardsPerLockedToken mapping to send to the game\\n  /// @return rewards Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\\n  function rewardsToArray() internal view returns (int256[] memory rewards) {\\n    uint256 latestId = controller.latestProtocolId(vaultNumber);\\n    rewards = new int[](latestId);\\n\\n    for (uint256 i = 0; i < latestId; i++) {\\n      rewards[i] = rewardPerLockedToken[rebalancingPeriod][i];\\n    }\\n  }\\n\\n  /// @notice Swaps the gas used from RebalanceETF, from vaultcurrency to ETH and send it to the dao\\n  /// @notice This way the vault will pay the gas for the RebalanceETF function\\n  /// @param _gasUsed total gas used by RebalanceETF\\n  function swapAndPayGasFee(uint256 _gasUsed) internal {\\n    uint256 amountEtherToVaultCurrency = Swap.amountOutSingleSwap(\\n      Swap.SwapInOut(\\n        (_gasUsed + Swap.gasUsedForSwap) * controller.getGasPrice(),\\n        Swap.WETH,\\n        address(vaultCurrency)\\n      ),\\n      controller.getUniswapQuoter(),\\n      controller.getUniswapPoolFee()\\n    );\\n\\n    uint256 wethReceived = Swap.swapTokensSingle(\\n      Swap.SwapInOut(amountEtherToVaultCurrency, address(vaultCurrency), Swap.WETH),\\n      controller.getUniswapParams()\\n    );\\n    Swap.unWrapWETHtoGov(payable(dao), wethReceived);\\n\\n    emit GasPaidRebalanceETF(amountEtherToVaultCurrency);\\n  }\\n\\n  /// @notice Helper function to set allocations\\n  /// @param _i Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  function setAllocation(uint256 _i) internal {\\n    currentAllocations[_i] += deltaAllocations[_i];\\n    deltaAllocations[_i] = 0;\\n    require(currentAllocations[_i] >= 0, \\\"Allocation underflow\\\");\\n  }\\n\\n  /// @notice Helper function so the rebalance will execute all withdrawals first\\n  /// @dev Executes and resets all deposits set in mapping(protocolToDeposit) by rebalanceETF\\n  /// @param protocolToDeposit array with amounts to deposit in protocols, the index being the protocol number.\\n  function executeDeposits(uint256[] memory protocolToDeposit) internal {\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    for (uint i = 0; i < latestID; i++) {\\n      uint256 amount = protocolToDeposit[i];\\n      if (amount == 0) continue;\\n      // console.log(\\\"protocol: %s, deposit: %s\\\", i, amount);\\n      depositInProtocol(i, amount);\\n    }\\n  }\\n\\n  /// @notice Deposit amount to underlying protocol\\n  /// @dev Deposits VaultCurrency in Protocol e.g USDC\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @param _amount in VaultCurrency to deposit\\n  function depositInProtocol(uint256 _protocolNum, uint256 _amount) internal {\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n\\n    if (getVaultBalance() < _amount) _amount = getVaultBalance();\\n\\n    if (protocol.underlying != address(vaultCurrency)) {\\n      _amount = Swap.swapStableCoins(\\n        Swap.SwapInOut(_amount, address(vaultCurrency), protocol.underlying),\\n        uScale,\\n        controller.underlyingUScale(protocol.underlying),\\n        controller.getCurveParams(address(vaultCurrency), protocol.underlying)\\n      );\\n    }\\n\\n    IERC20(protocol.underlying).safeIncreaseAllowance(protocol.provider, _amount);\\n    IProvider(protocol.provider).deposit(_amount, protocol.LPToken, protocol.underlying);\\n  }\\n\\n  /// @notice Withdraw amount from underlying protocol\\n  /// @dev shares = amount / PricePerShare\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @param _amount in VaultCurrency to withdraw\\n  function withdrawFromProtocol(uint256 _protocolNum, uint256 _amount) internal {\\n    if (_amount <= 0) return;\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n\\n    _amount = (_amount * protocol.uScale) / uScale;\\n    uint256 shares = IProvider(protocol.provider).calcShares(_amount, protocol.LPToken);\\n\\n    IERC20(protocol.LPToken).safeIncreaseAllowance(protocol.provider, shares);\\n    uint256 amountReceived = IProvider(protocol.provider).withdraw(\\n      shares,\\n      protocol.LPToken,\\n      protocol.underlying\\n    );\\n\\n    if (protocol.underlying != address(vaultCurrency)) {\\n      _amount = Swap.swapStableCoins(\\n        Swap.SwapInOut(amountReceived, protocol.underlying, address(vaultCurrency)),\\n        controller.underlyingUScale(protocol.underlying),\\n        uScale,\\n        controller.getCurveParams(protocol.underlying, address(vaultCurrency))\\n      );\\n    }\\n  }\\n\\n  /// @notice Set total balance in VaultCurrency in all underlying protocols\\n  function setTotalUnderlying() public {\\n    uint totalUnderlying;\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    for (uint i = 0; i < latestID; i++) {\\n      if (currentAllocations[i] == 0) continue;\\n      totalUnderlying += balanceUnderlying(i);\\n    }\\n    savedTotalUnderlying = totalUnderlying;\\n  }\\n\\n  /// @notice Get balance in VaultCurrency in underlying protocol\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @return Balance in VaultCurrency e.g USDC\\n  function balanceUnderlying(uint256 _protocolNum) public view returns (uint256) {\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n    uint256 underlyingBalance = (IProvider(protocol.provider).balanceUnderlying(\\n      address(this),\\n      protocol.LPToken\\n    ) * uScale) / protocol.uScale;\\n\\n    return underlyingBalance;\\n  }\\n\\n  /// @notice Calculates how many shares are equal to the amount in vault currency\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @param _amount Amount in underyling token e.g USDC\\n  /// @return number of shares i.e LP tokens\\n  function calcShares(uint256 _protocolNum, uint256 _amount) public view returns (uint256) {\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n    uint256 shares = IProvider(protocol.provider).calcShares(\\n      (_amount * protocol.uScale) / uScale,\\n      protocol.LPToken\\n    );\\n\\n    return shares;\\n  }\\n\\n  /// @notice Get price for underlying protocol\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @return protocolPrice Price per lp token\\n  function price(uint256 _protocolNum) public view returns (uint256) {\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n    return IProvider(protocol.provider).exchangeRate(protocol.LPToken);\\n  }\\n\\n  /// @notice Set the delta allocated tokens by game contract\\n  /// @dev Allocation can be negative\\n  /// @param _protocolNum Protocol number linked to an underlying vault e.g compound_usdc_01\\n  /// @param _allocation Delta allocation in tokens\\n  function setDeltaAllocationsInt(uint256 _protocolNum, int256 _allocation) internal {\\n    require(!controller.getProtocolBlacklist(vaultNumber, _protocolNum), \\\"Protocol on blacklist\\\");\\n    deltaAllocations[_protocolNum] += _allocation;\\n    deltaAllocatedTokens += _allocation;\\n  }\\n\\n  /// @notice Harvest extra tokens from underlying protocols\\n  /// @dev Loops over protocols in ETF and check if they are claimable in controller contract\\n  function claimTokens() public {\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    for (uint i = 0; i < latestID; i++) {\\n      if (currentAllocations[i] == 0) continue;\\n      bool claim = controller.claim(vaultNumber, i);\\n      if (claim) {\\n        address govToken = controller.getGovToken(vaultNumber, i);\\n        uint256 tokenBalance = IERC20(govToken).balanceOf(address(this));\\n        Swap.swapTokensMulti(\\n          Swap.SwapInOut(tokenBalance, govToken, address(vaultCurrency)),\\n          controller.getUniswapParams()\\n        );\\n      }\\n    }\\n  }\\n\\n  function getVaultBalance() public view returns (uint256) {\\n    return vaultCurrency.balanceOf(address(this)) - reservedFunds;\\n  }\\n\\n  /// @notice Checks if a rebalance is needed based on the set interval\\n  /// @return bool True of rebalance is needed, false if not\\n  function rebalanceNeeded() public view returns (bool) {\\n    return (block.timestamp - lastTimeStamp) > rebalanceInterval;\\n  }\\n\\n  /// @notice Getter for dao address\\n  function getDao() public view returns (address) {\\n    return dao;\\n  }\\n\\n  /// @notice Getter for guardian address\\n  function getGuardian() public view returns (address) {\\n    return guardian;\\n  }\\n\\n  /*\\n  Only Dao functions\\n  */\\n\\n  /// @notice Set the performanceFee, the percentage of the yield that goes to the game players.\\n  /// @dev The actual performanceFee could be a bit more or a bit less than the performanceFee set here due to approximations in the game.\\n  /// @param _performanceFee Value at which to set the performanceFee.\\n  function setPerformanceFee(uint256 _performanceFee) external onlyDao {\\n    require(_performanceFee <= 100, \\\"Cannot exceed 100%\\\");\\n    performanceFee = _performanceFee;\\n  }\\n\\n  /// @notice Set the governance address\\n  /// @param _dao New address of the governance / DAO\\n  function setDao(address _dao) external onlyDao {\\n    dao = _dao;\\n  }\\n\\n  /// @notice Setter for guardian address\\n  /// @param _guardian new address of the guardian\\n  function setGuardian(address _guardian) external onlyDao {\\n    guardian = _guardian;\\n  }\\n\\n  /*\\n  Only Guardian functions\\n  */\\n\\n  /// @notice Set the gasFeeLiquidity, liquidity in vaultcurrency which always should be kept in vault to pay for rebalance gas fee\\n  /// @param _gasFeeLiquidity Value at which to set the gasFeeLiquidity in vaultCurrency\\n  function setGasFeeLiquidity(uint256 _gasFeeLiquidity) external onlyGuardian {\\n    gasFeeLiquidity = _gasFeeLiquidity;\\n  }\\n\\n  /// @notice Set minimum interval for the rebalance function\\n  /// @param _timestampInternal UNIX timestamp\\n  function setRebalanceInterval(uint256 _timestampInternal) external onlyGuardian {\\n    rebalanceInterval = _timestampInternal;\\n  }\\n\\n  /// @notice The DAO should be able to blacklist protocols, the funds should be sent to the vault.\\n  /// @param _protocolNum Protocol number linked to an underlying vault e.g compound_usdc_01\\n  function blacklistProtocol(uint256 _protocolNum) external onlyGuardian {\\n    uint256 balanceProtocol = balanceUnderlying(_protocolNum);\\n    currentAllocations[_protocolNum] = 0;\\n    controller.setProtocolBlacklist(vaultNumber, _protocolNum);\\n    savedTotalUnderlying -= balanceProtocol;\\n    withdrawFromProtocol(_protocolNum, balanceProtocol);\\n  }\\n\\n  /// @notice Set the marginScale, the threshold used for deposits and withdrawals.\\n  /// @notice If the threshold is not met the deposit/ withdrawal is not executed.\\n  /// @dev Take into account the uScale (scale of the underlying).\\n  /// @param _marginScale Value at which to set the marginScale.\\n  function setMarginScale(int256 _marginScale) external onlyGuardian {\\n    marginScale = _marginScale;\\n  }\\n\\n  /// @notice Set the liquidityPerc, the amount of liquidity which should be held in the vault after rebalancing.\\n  /// @dev The actual liquidityPerc could be a bit more or a bit less than the liquidityPerc set here.\\n  /// @dev This is because some deposits or withdrawals might not execute because they don't meet the marginScale.\\n  /// @param _liquidityPerc Value at which to set the liquidityPerc.\\n  function setLiquidityPerc(uint256 _liquidityPerc) external onlyGuardian {\\n    require(_liquidityPerc <= 100, \\\"Cannot exceed 100%\\\");\\n    liquidityPerc = _liquidityPerc;\\n  }\\n\\n  /// @notice callback to receive Ether from unwrapping WETH\\n  receive() external payable {\\n    require(msg.sender == Swap.WETH, \\\"Not WETH\\\");\\n  }\\n}\\n\",\"keccak256\":\"0x16eb85791ea5daad5254dfd193e5f5bc5d4f60ec806758baade183b2b1fce40d\",\"license\":\"MIT\"},\"contracts/VaultToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract VaultToken is ERC20 {\\n  uint8 private decimals_;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals\\n  ) ERC20(_name, _symbol) {\\n    decimals_ = _decimals;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    return decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0xa6f5cd7e4989e080d4fc5e68761e42174e17bf9cc18119af5dfdf3ac2a97985b\",\"license\":\"MIT\"},\"contracts/libraries/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/IController.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/ExternalInterfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IUniswapV3Factory.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IUniswapV3Pool.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IStableSwap3Pool.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IWETH.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IQuoter.sol\\\";\\r\\n\\r\\nlibrary Swap {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  struct SwapInOut {\\r\\n    uint256 amount;\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n  }\\r\\n\\r\\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n  uint256 internal constant gasUsedForSwap = 210000;\\r\\n\\r\\n  /// @notice Swap stable coins on Curve\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _tokenInUScale Scale of tokenIn e.g 1E6\\r\\n  /// @param _tokenOutUScale Scale of tokenOut e.g 1E6\\r\\n  /// @param _curve Curve pool index number of TokenIn address, tokenOut address, pool address and pool fee\\r\\n  function swapStableCoins(\\r\\n    SwapInOut memory _swap,\\r\\n    uint256 _tokenInUScale,\\r\\n    uint256 _tokenOutUScale,\\r\\n    IController.CurveParams memory _curve\\r\\n  ) public returns (uint256) {\\r\\n    uint256 amountOutMin = (((_swap.amount * (10000 - _curve.poolFee)) / 10000) * _tokenOutUScale) /\\r\\n      _tokenInUScale;\\r\\n    IERC20(_swap.tokenIn).safeIncreaseAllowance(_curve.pool, _swap.amount);\\r\\n\\r\\n    uint256 balanceBefore = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n\\r\\n    IStableSwap3Pool(_curve.pool).exchange(\\r\\n      _curve.indexTokenIn,\\r\\n      _curve.indexTokenOut,\\r\\n      _swap.amount,\\r\\n      amountOutMin\\r\\n    );\\r\\n\\r\\n    uint256 balanceAfter = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n\\r\\n    return balanceAfter - balanceBefore;\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswap Address of uniswapRouter, uniswapQuoter and poolfee\\r\\n  /// @return Amountout Number of tokens received\\r\\n  function swapTokensMulti(SwapInOut memory _swap, IController.UniswapParams memory _uniswap)\\r\\n    public\\r\\n    returns (uint256)\\r\\n  {\\r\\n    IERC20(_swap.tokenIn).safeIncreaseAllowance(_uniswap.router, _swap.amount);\\r\\n\\r\\n    uint256 amountOutMinimum = IQuoter(_uniswap.quoter).quoteExactInput(\\r\\n      abi.encodePacked(_swap.tokenIn, _uniswap.poolFee, WETH, _uniswap.poolFee, _swap.tokenOut),\\r\\n      _swap.amount\\r\\n    );\\r\\n\\r\\n    ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\r\\n      path: abi.encodePacked(\\r\\n        _swap.tokenIn,\\r\\n        _uniswap.poolFee,\\r\\n        WETH,\\r\\n        _uniswap.poolFee,\\r\\n        _swap.tokenOut\\r\\n      ),\\r\\n      recipient: address(this),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: _swap.amount,\\r\\n      amountOutMinimum: amountOutMinimum\\r\\n    });\\r\\n\\r\\n    uint256 balanceBefore = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n    ISwapRouter(_uniswap.router).exactInput(params);\\r\\n    uint256 balanceAfter = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n\\r\\n    return balanceAfter - balanceBefore;\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswap Address of uniswapRouter, uniswapQuoter and poolfee\\r\\n  /// @return Amountout Number of tokens received\\r\\n  function swapTokensSingle(SwapInOut memory _swap, IController.UniswapParams memory _uniswap)\\r\\n    public\\r\\n    returns (uint256)\\r\\n  {\\r\\n    IERC20(_swap.tokenIn).safeIncreaseAllowance(_uniswap.router, _swap.amount);\\r\\n\\r\\n    uint256 amountOutMinimum = amountOutSingleSwap(\\r\\n      SwapInOut(_swap.amount, _swap.tokenIn, _swap.tokenOut),\\r\\n      _uniswap.quoter,\\r\\n      _uniswap.poolFee\\r\\n    );\\r\\n\\r\\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\r\\n      tokenIn: _swap.tokenIn,\\r\\n      tokenOut: _swap.tokenOut,\\r\\n      fee: _uniswap.poolFee,\\r\\n      recipient: address(this),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: _swap.amount,\\r\\n      amountOutMinimum: amountOutMinimum,\\r\\n      sqrtPriceLimitX96: 0\\r\\n    });\\r\\n\\r\\n    // The call to `exactInputSingle` executes the swap.\\r\\n    return ISwapRouter(_uniswap.router).exactInputSingle(params);\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswapQuoter Address of uniswapQuoter\\r\\n  /// @param _poolFee Current uniswap pool fee set in router e.g 3000\\r\\n  /// @return amountOutMin minimum amount out of tokens to receive when executing swap\\r\\n  function amountOutSingleSwap(\\r\\n    SwapInOut memory _swap,\\r\\n    address _uniswapQuoter,\\r\\n    uint24 _poolFee\\r\\n  ) public returns (uint256) {\\r\\n    return\\r\\n      IQuoter(_uniswapQuoter).quoteExactInputSingle(\\r\\n        _swap.tokenIn,\\r\\n        _swap.tokenOut,\\r\\n        _poolFee,\\r\\n        _swap.amount,\\r\\n        0\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap Multi route\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswapQuoter Address of uniswapQuoter\\r\\n  /// @param _poolFee Current uniswap pool fee set in router e.g 3000\\r\\n  /// @return amountOutMin minimum amount out of tokens to receive when executing swap\\r\\n  function amountOutMultiSwap(\\r\\n    SwapInOut memory _swap,\\r\\n    address _uniswapQuoter,\\r\\n    uint24 _poolFee\\r\\n  ) public returns (uint256) {\\r\\n    return\\r\\n      IQuoter(_uniswapQuoter).quoteExactInput(\\r\\n        abi.encodePacked(_swap.tokenIn, _poolFee, WETH, _poolFee, _swap.tokenOut),\\r\\n        _swap.amount\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /// @notice Will unwrap WETH and send to DAO / governed address\\r\\n  /// @param _governed DAO / governed address\\r\\n  /// @param _amount amount to unwrap and transfer\\r\\n  function unWrapWETHtoGov(address payable _governed, uint256 _amount) internal {\\r\\n    IWETH9(WETH).withdraw(_amount);\\r\\n    (bool sent, ) = _governed.call{value: _amount}(\\\"\\\");\\r\\n    require(sent, \\\"Ether not sent\\\");\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xbd549a396b178162e19cbeea745aa45afb1cdb5a420caec091825066c8efce39\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106103705760003560e01c80625c33e1146103cf57806306fdde03146103e4578063079264b01461040f578063095ea7b3146104335780630c195d99146104635780630ccb7d5b146104795780630e08891a146104ab5780630f310a6a146104c157806311e8c229146104e35780631685f6f71461050357806316d1d9161461051957806318160ddd1461052f5780631b6d79b9146105445780631e035481146105595780632189651f1461056f57806321ae838e1461058f57806323b872dd146105a457806324b67970146105c457806326a49e37146105e45780632d84010f146106045780632e1a7d4d1461061a5780632e9564701461063a578063313ce5671461064f5780633245dea51461067157806332abb5341461069e578063357fb68d146106b357806339509351146106d35780633ba0b9a9146106f35780633f3b3b271461070957806343ab90a81461071f57806348c54b9d146107345780634bba402c146107495780635209cb9814610769578063533b03bb146107895780635b7dcaed146107aa5780635e39d91f146107ca57806362ae0765146108025780636637b882146108225780636f14a8821461084257806370897b231461086257806370a08231146108825780637468a52b146108b8578063799a3f88146108e65780637fbba2fd146108fc578063819912a21461091c57806385d43d7a1461093c5780638645d58214610951578063877887821461097257806389cc88db146109885780638a0dac4a1461099e5780638c2facf7146109be57806395d89b41146109d35780639c7ec7a6146109e85780639cc34de414610a08578063a104b99514610a28578063a457c2d714610a48578063a75b87d214610a68578063a9059cbb14610a86578063b50efa4014610aa6578063b6b55f2514610ac6578063b70811bc14610ae6578063c0ee01bc14610b04578063c19d93fb14610b19578063c3fe3e2814610b47578063c7b8981c14610b67578063ca3fbd6814610b7c578063ce64aabb14610b9c578063d19e8d2514610bb2578063d97bb59414610bd2578063db1a884314610bf2578063db9fd44614610c12578063dd06de8314610c32578063dd62ed3e14610c52578063e706790914610c72578063ed12e8ef14610c92578063f77c479114610ca7578063fb0a8cd014610cc7578063fdba466e14610ce757600080fd5b366103ca573373c02aaa39b223fe8d0a0e5c4f27ead9083c756cc2146103c85760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b3480156103db57600080fd5b506103c8610d07565b3480156103f057600080fd5b506103f9610d62565b60405161040691906148c1565b60405180910390f35b34801561041b57600080fd5b5061042560235481565b604051908152602001610406565b34801561043f57600080fd5b5061045361044e366004614909565b610df4565b6040519015158152602001610406565b34801561046f57600080fd5b5061042560125481565b34801561048557600080fd5b50601d5461049e9061010090046001600160a01b031681565b6040516104069190614935565b3480156104b757600080fd5b50610425600c5481565b3480156104cd57600080fd5b5033600090815260246020526040902054610425565b3480156104ef57600080fd5b506103c86104fe366004614949565b610e0e565b34801561050f57600080fd5b50610425600f5481565b34801561052557600080fd5b50610425600d5481565b34801561053b57600080fd5b50601a54610425565b34801561055057600080fd5b506103c8610ee1565b34801561056557600080fd5b50610425600b5481565b34801561057b57600080fd5b506103c861058a3660046149d0565b611037565b34801561059b57600080fd5b506103c861106d565b3480156105b057600080fd5b506104536105bf366004614a75565b61117e565b3480156105d057600080fd5b506103c86105df366004614ab6565b6111a4565b3480156105f057600080fd5b506104256105ff366004614949565b6111f0565b34801561061057600080fd5b50610425600a5481565b34801561062657600080fd5b50610425610635366004614949565b6112df565b34801561064657600080fd5b5061045361144a565b34801561065b57600080fd5b50601d5460405160ff9091168152602001610406565b34801561067d57600080fd5b5061042561068c366004614949565b60176020526000908152604090205481565b3480156106aa57600080fd5b506103c8611463565b3480156106bf57600080fd5b5060065461049e906001600160a01b031681565b3480156106df57600080fd5b506104536106ee366004614909565b611595565b3480156106ff57600080fd5b5061042560215481565b34801561071557600080fd5b50610425600e5481565b34801561072b57600080fd5b506103c86115b7565b34801561074057600080fd5b506103c8611686565b34801561075557600080fd5b506103c8610764366004614ad3565b61199f565b34801561077557600080fd5b50610425610784366004614949565b6119e1565b34801561079557600080fd5b50601f5461045390600160a01b900460ff1681565b3480156107b657600080fd5b506103c86107c5366004614949565b611b36565b3480156107d657600080fd5b506104256107e5366004614af7565b601660209081526000928352604080842090915290825290205481565b34801561080e57600080fd5b5061042561081d366004614949565b611b65565b34801561082e57600080fd5b506103c861083d366004614ab6565b611c7d565b34801561084e57600080fd5b5060055461049e906001600160a01b031681565b34801561086e57600080fd5b506103c861087d366004614949565b611cc9565b34801561088e57600080fd5b5061042561089d366004614ab6565b6001600160a01b031660009081526018602052604090205490565b3480156108c457600080fd5b506022546108d39061ffff1681565b60405161ffff9091168152602001610406565b3480156108f257600080fd5b5061042560075481565b34801561090857600080fd5b506103c8610917366004614af7565b611d19565b34801561092857600080fd5b506103c8610937366004614ab6565b611d4d565b34801561094857600080fd5b506103c8611d99565b34801561095d57600080fd5b5060025461045390600160a81b900460ff1681565b34801561097e57600080fd5b5061042560095481565b34801561099457600080fd5b5061042560105481565b3480156109aa57600080fd5b506103c86109b9366004614ab6565b611f1f565b3480156109ca57600080fd5b506103c8611f6b565b3480156109df57600080fd5b506103f9611f95565b3480156109f457600080fd5b506103c8610a03366004614949565b611fa4565b348015610a1457600080fd5b506103c8610a23366004614b27565b611ff4565b348015610a3457600080fd5b506103c8610a43366004614949565b61203c565b348015610a5457600080fd5b50610453610a63366004614909565b61206b565b348015610a7457600080fd5b506004546001600160a01b031661049e565b348015610a9257600080fd5b50610453610aa1366004614909565b6120f1565b348015610ab257600080fd5b506103c8610ac1366004614af7565b6120ff565b348015610ad257600080fd5b50610425610ae1366004614949565b612166565b348015610af257600080fd5b506003546001600160a01b031661049e565b348015610b1057600080fd5b5061042561227d565b348015610b2557600080fd5b50600254610b3a90600160a01b900460ff1681565b6040516104069190614b5a565b348015610b5357600080fd5b50601e5461049e906001600160a01b031681565b348015610b7357600080fd5b5061042561243a565b348015610b8857600080fd5b506103c8610b97366004614b27565b612731565b348015610ba857600080fd5b5061042560085481565b348015610bbe57600080fd5b50610425610bcd366004614af7565b612779565b348015610bde57600080fd5b506103c8610bed366004614b82565b612894565b348015610bfe57600080fd5b5060015461049e906001600160a01b031681565b348015610c1e57600080fd5b506103c8610c2d366004614949565b6129e6565b348015610c3e57600080fd5b506103c8610c4d366004614bb2565b612a15565b348015610c5e57600080fd5b50610425610c6d366004614bd3565b612a6c565b348015610c7e57600080fd5b506103c8610c8d3660046149d0565b612a97565b348015610c9e57600080fd5b50610425612ac1565b348015610cb357600080fd5b5060025461049e906001600160a01b031681565b348015610cd357600080fd5b506103c8610ce2366004614ab6565b612b46565b348015610cf357600080fd5b50601f5461049e906001600160a01b031681565b601f546001600160a01b03163314610d315760405162461bcd60e51b81526004016103bf90614c01565b6003600254600160a01b900460ff166005811115610d5157610d51614b44565b14610d5857565b610d60612b98565b565b6060601b8054610d7190614c29565b80601f0160208091040260200160405190810160405280929190818152602001828054610d9d90614c29565b8015610dea5780601f10610dbf57610100808354040283529160200191610dea565b820191906000526020600020905b815481529060010190602001808311610dcd57829003601f168201915b5050505050905090565b600033610e02818585612bcb565b60019150505b92915050565b6004546001600160a01b03163314610e385760405162461bcd60e51b81526004016103bf90614c64565b6000610e4382611b65565b60008381526014602052604080822091909155600254600754915163ca68c24b60e01b81529293506001600160a01b03169163ca68c24b91610e89918690600401614c8b565b600060405180830381600087803b158015610ea357600080fd5b505af1158015610eb7573d6000803e3d6000fd5b505050508060106000828254610ecd9190614caf565b90915550610edd90508282612cef565b5050565b60005a905060026000541415610f095760405162461bcd60e51b81526004016103bf90614cc6565b60026000556004600254600160a01b900460ff166005811115610f2e57610f2e614b44565b14610f4b5760405162461bcd60e51b81526004016103bf90614cfd565b600254600160a81b900460ff16610f995760405162461bcd60e51b81526020600482015260126024820152712144656c746120616c6c6f636174696f6e7360701b60448201526064016103bf565b600a8054906000610fa983614d22565b9190505550610fb6611686565b610fbe61305e565b6000610fc861307e565b90506000610fd5826130c7565b9050610fe08161335f565b610fe86115b7565b600f54610ff3612ac1565b101561100457611004600f5461342e565b50506002805461ffff60a01b1916600560a01b179055600160009081555a61102c9083614caf565b9050610edd81613549565b601f546001600160a01b031633146110615760405162461bcd60e51b81526004016103bf90614c01565b61106a816138d6565b50565b6005600254600160a01b900460ff16600581111561108d5761108d614b44565b146110aa5760405162461bcd60e51b81526004016103bf90614cfd565b60006110b4613944565b601f5460075460225460405163487ed20160e01b81529394506001600160a01b039092169263487ed201926110f5929161ffff909116908690600401614d3d565b600060405180830381600087803b15801561110f57600080fd5b505af1158015611123573d6000803e3d6000fd5b50506002805460ff60a01b1916905550506007546022546040517f893f603402d8ab2e63a6667d43373b4fc8e91f7d8762e7f3c00ec21ec485e89c9261117392909161ffff909116908590614d3d565b60405180910390a150565b60003361118c858285613a64565b611197858585613ade565b60019150505b9392505050565b6003546001600160a01b031633146111ce5760405162461bcd60e51b81526004016103bf90614d96565b601f80546001600160a01b0319166001600160a01b0392909216919091179055565b600254600754604051632830092960e21b815260009283926001600160a01b039091169163a0c024a491611228918790600401614c8b565b608060405180830381865afa158015611245573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112699190614dbf565b6020810151815160405163dc3b7c8b60e01b81529293506001600160a01b039091169163dc3b7c8b9161129e91600401614935565b602060405180830381865afa1580156112bb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061119d9190614e1f565b6000600260005414156113045760405162461bcd60e51b81526004016103bf90614cc6565b60026000908155600254600160a01b900460ff16600581111561132957611329614b44565b146113465760405162461bcd60e51b81526004016103bf90614e38565b601f54600160a01b900460ff16156113705760405162461bcd60e51b81526004016103bf90614e5d565b601d5460ff1661138190600a614f67565b60215461138e9084614f76565b6113989190614fab565b9050600081116113d55760405162461bcd60e51b81526020600482015260086024820152674e6f2076616c756560c01b60448201526064016103bf565b806113de612ac1565b101561141f5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064016103bf565b6114293383613c9a565b600154611440906001600160a01b03163383613dd6565b6001600055919050565b6000600d54600e544261145d9190614caf565b11905090565b60028054600160a01b900460ff16600581111561148257611482614b44565b1461148957565b611491612ac1565b60235411156114a5576114a560235461342e565b601f546023546001546114c6926001600160a01b0391821692911690613e2c565b601f546007546023546001546040516306714fe560e11b81526001600160a01b0394851694630ce29fca946115049490939092911690600401614fbf565b600060405180830381600087803b15801561151e57600080fd5b505af1158015611532573d6000803e3d6000fd5b50506000602355506115449050612b98565b6007546023546001546040517fd6c53302d07701291c16e478d30d9153462b4898e9864599f8556416fa4096e59361158b93909290916001600160a01b0390911690614fbf565b60405180910390a1565b600033610e028185856115a88383612a6c565b6115b29190614fde565b612bcb565b600254600754604051632917823b60e21b815260009283926001600160a01b039091169163a45e08ec916115f19160040190815260200190565b602060405180830381865afa15801561160e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116329190614e1f565b905060005b8181101561167f576000818152601460205260409020546116575761166d565b61166081611b65565b61166a9084614fde565b92505b8061167781614d22565b915050611637565b5050601055565b600254600754604051632917823b60e21b815260048101919091526000916001600160a01b03169063a45e08ec90602401602060405180830381865afa1580156116d4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116f89190614e1f565b905060005b81811015610edd5760008181526014602052604090205461171d5761198d565b60025460075460405163c349026360e01b81526000926001600160a01b03169163c34902639161175291908690600401614c8b565b6020604051808303816000875af1158015611771573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117959190614ff6565b9050801561198b5760025460075460405163054c5b0360e01b81526000926001600160a01b03169163054c5b03916117d291908790600401614c8b565b602060405180830381865afa1580156117ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118139190615013565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b81526004016118439190614935565b602060405180830381865afa158015611860573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118849190614e1f565b60408051606080820183528382526001600160a01b03808716602084015260015481168385015260025484516367b4e06760e01b8152945195965073__$03022e2b4c61b304d810038eacea4b6c0c$__9563f08218529591909216926367b4e067926004808401938290030181865afa158015611905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119299190615048565b6040518363ffffffff1660e01b81526004016119469291906150df565b602060405180830381865af4158015611963573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119879190614e1f565b5050505b505b8061199781614d22565b9150506116fd565b6004546001600160a01b031633146119c95760405162461bcd60e51b81526004016103bf90614c64565b6022805461ffff191661ffff92909216919091179055565b600060026000541415611a065760405162461bcd60e51b81526004016103bf90614cc6565b60026000908155600254600160a01b900460ff166005811115611a2b57611a2b614b44565b14611a485760405162461bcd60e51b81526004016103bf90614e38565b601f54600160a01b900460ff1615611a725760405162461bcd60e51b81526004016103bf90614e5d565b3360009081526025602052604090205415611ac35760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e4818481c995c5d595cdd607a1b60448201526064016103bf565b601d5460ff16611ad490600a614f67565b602154611ae19084614f76565b611aeb9190614fab565b9050611af73383613c9a565b336000908152602460209081526040808320849055600a5460258352908320558054839290611b27908490614fde565b90915550506001600055919050565b6004546001600160a01b03163314611b605760405162461bcd60e51b81526004016103bf90614c64565b600d55565b600254600754604051632830092960e21b815260009283926001600160a01b039091169163a0c024a491611b9d918790600401614c8b565b608060405180830381865afa158015611bba573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bde9190614dbf565b905060008160600151600b5483602001516001600160a01b0316635cbc09d13086600001516040518363ffffffff1660e01b8152600401611c20929190615120565b602060405180830381865afa158015611c3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c619190614e1f565b611c6b9190614f76565b611c759190614fab565b949350505050565b6003546001600160a01b03163314611ca75760405162461bcd60e51b81526004016103bf90614d96565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b03163314611cf35760405162461bcd60e51b81526004016103bf90614d96565b6064811115611d145760405162461bcd60e51b81526004016103bf9061513a565b600955565b6004546001600160a01b03163314611d435760405162461bcd60e51b81526004016103bf90614c64565b610edd8282613ec9565b6003546001600160a01b03163314611d775760405162461bcd60e51b81526004016103bf90614d96565b601e80546001600160a01b0319166001600160a01b0392909216919091179055565b6000600254600160a01b900460ff166005811115611db957611db9614b44565b14611dd65760405162461bcd60e51b81526004016103bf90614e38565b611dde61144a565b611e205760405162461bcd60e51b8152602060048201526013602482015272139bc81c9958985b185b98d9481b9959591959606a1b60448201526064016103bf565b611e286115b7565b6000611e32612ac1565b601054611e3f9190614fde565b601f546007546022549293506001600160a01b039091169163e4eadf37919061ffff1684611e6c601a5490565b6020546040518663ffffffff1660e01b8152600401611e8f959493929190615166565b600060405180830381600087803b158015611ea957600080fd5b505af1158015611ebd573d6000803e3d6000fd5b50506002805460ff60a01b1916600160a01b179055505042600e55600754602254601a547fd61995e4d738c729946392a937dfa05678e3f95c705d8c8668fdb6a0ddd299d5929161ffff16908490602054604051611173959493929190615166565b6003546001600160a01b03163314611f495760405162461bcd60e51b81526004016103bf90614d96565b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b03163314610d585760405162461bcd60e51b81526004016103bf90614c64565b6060601c8054610d7190614c29565b6004546001600160a01b03163314611fce5760405162461bcd60e51b81526004016103bf90614c64565b6064811115611fef5760405162461bcd60e51b81526004016103bf9061513a565b600855565b6003546001600160a01b0316331461201e5760405162461bcd60e51b81526004016103bf90614d96565b601f8054911515600160a81b0260ff60a81b19909216919091179055565b6004546001600160a01b031633146120665760405162461bcd60e51b81526004016103bf90614c64565b600c55565b600033816120798286612a6c565b9050838110156120d95760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103bf565b6120e68286868403612bcb565b506001949350505050565b600033610e02818585613ade565b601f546001600160a01b031633146121295760405162461bcd60e51b81526004016103bf90614c01565b6001600254600160a01b900460ff16600581111561214957612149614b44565b14611d435760405162461bcd60e51b81526004016103bf90614cfd565b60006002600054141561218b5760405162461bcd60e51b81526004016103bf90614cc6565b60026000908155600254600160a01b900460ff1660058111156121b0576121b0614b44565b146121cd5760405162461bcd60e51b81526004016103bf90614e38565b601f54600160a01b900460ff16156121f75760405162461bcd60e51b81526004016103bf90614e5d565b6000612201612ac1565b60015490915061221c906001600160a01b0316333086613f06565b6000612226612ac1565b905060006122348383614caf565b9050602154612245601d5460ff1690565b61225090600a614f67565b61225a9083614f76565b6122649190614fab565b93506122703385613f3e565b5050600160005550919050565b6000600260005414156122a25760405162461bcd60e51b81526004016103bf90614cc6565b60026000908155600254600160a01b900460ff1660058111156122c7576122c7614b44565b146122e45760405162461bcd60e51b81526004016103bf90614e38565b336000908152602460205260409020546123105760405162461bcd60e51b81526004016103bf9061518d565b33600090815260256020526040902054600a54116123405760405162461bcd60e51b81526004016103bf906151b3565b5033600090815260246020526040908190205460015491516370a0823160e01b8152909182916001600160a01b03909116906370a0823190612386903090600401614935565b602060405180830381865afa1580156123a3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123c79190614e1f565b10156123e55760405162461bcd60e51b81526004016103bf906151de565b80601160008282546123f79190614caf565b90915550503360008181526024602090815260408083208390556025909152812055600154612432916001600160a01b039091169083613dd6565b600160005590565b60006002600054141561245f5760405162461bcd60e51b81526004016103bf90614cc6565b60026000908155600254600160a01b900460ff16600581111561248457612484614b44565b146124a15760405162461bcd60e51b81526004016103bf90614e38565b336000908152602660205260409020546124cd5760405162461bcd60e51b81526004016103bf9061518d565b33600090815260276020526040902054600a54116124fd5760405162461bcd60e51b81526004016103bf906151b3565b5033600090815260266020526040908190205460015491516370a0823160e01b8152909182916001600160a01b03909116906370a0823190612543903090600401614935565b602060405180830381865afa158015612560573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906125849190614e1f565b10156125a25760405162461bcd60e51b81526004016103bf906151de565b80601160008282546125b49190614caf565b90915550503360009081526026602090815260408083208390556027909152812055601f54600160a81b900460ff161561271a5760408051606080820183528382526001546001600160a01b039081166020840152601d54610100900481168385015260025484516367b4e06760e01b8152945160009573__$03022e2b4c61b304d810038eacea4b6c0c$__9563f082185295909493909316926367b4e067926004808401938290030181865afa158015612673573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126979190615048565b6040518363ffffffff1660e01b81526004016126b49291906150df565b602060405180830381865af41580156126d1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126f59190614e1f565b601d549091506127149061010090046001600160a01b03163383613dd6565b50612432565b600154612432906001600160a01b03163383613dd6565b601f546001600160a01b0316331461275b5760405162461bcd60e51b81526004016103bf90614c01565b601f8054911515600160a01b0260ff60a01b19909216919091179055565b600254600754604051632830092960e21b815260009283926001600160a01b039091169163a0c024a4916127b1918890600401614c8b565b608060405180830381865afa1580156127ce573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906127f29190614dbf565b9050600081602001516001600160a01b031663e7132599600b5484606001518761281c9190614f76565b6128269190614fab565b84516040516001600160e01b031960e085901b16815261284a929190600401615200565b602060405180830381865afa158015612867573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061288b9190614e1f565b95945050505050565b601e546001600160a01b031633146128da5760405162461bcd60e51b81526020600482015260096024820152686f6e6c792067616d6560b81b60448201526064016103bf565b600260005414156128fd5760405162461bcd60e51b81526004016103bf90614cc6565b60026000908155600254600160a01b900460ff16600581111561292257612922614b44565b1461293f5760405162461bcd60e51b81526004016103bf90614e38565b601f54600160a01b900460ff16156129695760405162461bcd60e51b81526004016103bf90614e5d565b6001600160a01b0381166000908152602660205260409020541561299f5760405162461bcd60e51b81526004016103bf9061518d565b6001600160a01b0381166000908152602660209081526040808320859055600a54602783529083205580548492906129d8908490614fde565b909155505060016000555050565b6004546001600160a01b03163314612a105760405162461bcd60e51b81526004016103bf90614c64565b600f55565b6004546001600160a01b03163314612a3f5760405162461bcd60e51b81526004016103bf90614c64565b6002805482919060ff60a01b1916600160a01b836005811115612a6457612a64614b44565b021790555050565b6001600160a01b03918216600090815260196020908152604080832093909416825291909152205490565b6004546001600160a01b031633146110615760405162461bcd60e51b81526004016103bf90614c64565b6011546001546040516370a0823160e01b8152600092916001600160a01b0316906370a0823190612af6903090600401614935565b602060405180830381865afa158015612b13573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b379190614e1f565b612b419190614caf565b905090565b6003546001600160a01b03163314612b705760405162461bcd60e51b81526004016103bf90614d96565b601d80546001600160a01b0390921661010002610100600160a81b0319909216919091179055565b60205460116000828254612bac9190614fde565b909155505060006020556002805460ff60a01b1916600160a21b179055565b6001600160a01b038316612c2d5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103bf565b6001600160a01b038216612c8e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103bf565b6001600160a01b0383811660008181526019602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b60008111612cfb575050565b600254600754604051632830092960e21b81526000926001600160a01b03169163a0c024a491612d3091908790600401614c8b565b608060405180830381865afa158015612d4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d719190614dbf565b9050600b54816060015183612d869190614f76565b612d909190614fab565b9150600081602001516001600160a01b031663e71325998484600001516040518363ffffffff1660e01b8152600401612dca929190615200565b602060405180830381865afa158015612de7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e0b9190614e1f565b60208301518351919250612e29916001600160a01b03169083613e2c565b602082015182516040808501519051632d182be560e21b81526000936001600160a01b03169263b460af9492612e659287929190600401615217565b6020604051808303816000875af1158015612e84573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ea89190614e1f565b60015460408501519192506001600160a01b03918216911614613057576040805160608101825282815284820180516001600160a01b0390811660208401526001548116838501526002549151935163cb57d92f60e01b815273__$03022e2b4c61b304d810038eacea4b6c0c$__94630405efa394939092169163cb57d92f91612f359190600401614935565b602060405180830381865afa158015612f52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f769190614e1f565b600b546002546040808a01516001549151632fe30df560e01b81526001600160a01b0393841693632fe30df593612fb39392911690600401615120565b608060405180830381865afa158015612fd0573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff49190615248565b6040518563ffffffff1660e01b81526004016130139493929190615279565b602060405180830381865af4158015613030573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130549190614e1f565b93505b5050505050565b6013546012600082825461307291906152d1565b90915550506000601355565b600080613089612ac1565b6010546130969190614fde565b905060006064600854836130aa9190614f76565b6130b49190614fab565b90506130c08183614caf565b9250505090565b600254600754604051632917823b60e21b81526060926000926001600160a01b039091169163a45e08ec916131029160040190815260200190565b602060405180830381865afa15801561311f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131439190614e1f565b6001600160401b0381111561315a5761315a614962565b604051908082528060200260200182016040528015613183578160200160208202803683370190505b50600254600754604051632917823b60e21b81529293506000926001600160a01b039092169163a45e08ec916131bf9160040190815260200190565b602060405180830381865afa1580156131dc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132009190614e1f565b905060005b818110156133565760025460075460405163d900d1f760e01b81526000926001600160a01b03169163d900d1f79161324291908690600401614c8b565b602060405180830381865afa15801561325f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132839190614ff6565b905061328f868361400b565b801561329b5750613344565b6132a482614111565b60006132b087846141a1565b905060006132bd84611b65565b905060006132cb8284615312565b905060008082126132dd5760006132e7565b6132e78484614caf565b9050600c54821315613313578188878151811061330657613306615351565b6020026020010181815250505b600c5481118061332f5750600086815260146020526040902054155b1561333e5761333e8682612cef565b50505050505b8061334e81614d22565b915050613205565b50909392505050565b600254600754604051632917823b60e21b815260048101919091526000916001600160a01b03169063a45e08ec90602401602060405180830381865afa1580156133ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133d19190614e1f565b905060005b818110156134295760008382815181106133f2576133f2615351565b60200260200101519050806000141561340b5750613417565b61341582826141dc565b505b8061342181614d22565b9150506133d6565b505050565b600254600754604051632917823b60e21b815260048101919091526000916001600160a01b03169063a45e08ec90602401602060405180830381865afa15801561347c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906134a09190614e1f565b905060005b81811015613429576000818152601460205260409020546134c557613537565b60006134cf612ac1565b6134d99085614caf565b905060006134e683611b65565b905060008183116134f757826134f9565b815b9050806010600082825461350d9190614caf565b9091555061351d90508482612cef565b613525612ac1565b861161353357505050505050565b5050505b8061354181614d22565b9150506134a5565b600073__$03022e2b4c61b304d810038eacea4b6c0c$__633441e90d6040518060600160405280600260009054906101000a90046001600160a01b03166001600160a01b031663455259cb6040518163ffffffff1660e01b81526004016020604051808303816000875af11580156135c5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906135e99190614e1f565b6135f66203345088614fde565b6136009190614f76565b815273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26020808301919091526001546001600160a01b03908116604093840152600254835163b0a7097560e01b8152935191169263b0a709759260048083019391928290030181865afa15801561366f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136939190615013565b600260009054906101000a90046001600160a01b03166001600160a01b03166360867cbd6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156136e6573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061370a9190615367565b6040518463ffffffff1660e01b815260040161372893929190615382565b602060405180830381865af4158015613745573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906137699190614e1f565b60408051606080820183528382526001546001600160a01b03908116602084015273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc28385015260025484516367b4e06760e01b8152945195965060009573__$03022e2b4c61b304d810038eacea4b6c0c$__95632b6fcada959492909316926367b4e0679260048083019391928290030181865afa158015613803573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138279190615048565b6040518363ffffffff1660e01b81526004016138449291906150df565b602060405180830381865af4158015613861573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138859190614e1f565b60035490915061389e906001600160a01b0316826144bd565b6040518281527f19c26918cc4d9f77e7d8e4c1764d6d1c16d4f7d5ea4fe0a1f48188c443f613ac9060200160405180910390a1505050565b60005b815181101561392d5760008282815181106138f6576138f6615351565b60200260200101519050806000141561390f575061391b565b61391982826145b6565b505b8061392581614d22565b9150506138d9565b50506002805460ff60a81b1916600160a81b179055565b600254600754604051632917823b60e21b81526060926000926001600160a01b039091169163a45e08ec9161397f9160040190815260200190565b602060405180830381865afa15801561399c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906139c09190614e1f565b9050806001600160401b038111156139da576139da614962565b604051908082528060200260200182016040528015613a03578160200160208202803683370190505b50915060005b81811015613a5f57600a5460009081526016602090815260408083208484529091529020548351849083908110613a4257613a42615351565b602090810291909101015280613a5781614d22565b915050613a09565b505090565b6000613a708484612a6c565b90506000198114613ad85781811015613acb5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103bf565b613ad88484848403612bcb565b50505050565b6001600160a01b038316613b425760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103bf565b6001600160a01b038216613ba45760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103bf565b6001600160a01b03831660009081526018602052604090205481811015613c1c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103bf565b6001600160a01b03808516600090815260186020526040808220858503905591851681529081208054849290613c53908490614fde565b92505081905550826001600160a01b0316846001600160a01b031660008051602061549d83398151915284604051613c8d91815260200190565b60405180910390a3613ad8565b6001600160a01b038216613cfa5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103bf565b6001600160a01b03821660009081526018602052604090205481811015613d6e5760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103bf565b6001600160a01b03831660009081526018602052604081208383039055601a8054849290613d9d908490614caf565b90915550506040518281526000906001600160a01b0385169060008051602061549d8339815191529060200160405180910390a3505050565b6134298363a9059cbb60e01b8484604051602401613df59291906153b4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526146af565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613e5d929190615120565b602060405180830381865afa158015613e7a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e9e9190614e1f565b613ea89190614fde565b9050613ad88463095ea7b360e01b8584604051602401613df59291906153b4565b6023829055602181905581613eef5750506002805460ff60a01b1916600360a01b179055565b50506002805460ff60a01b1916600160a11b179055565b6040516001600160a01b0380851660248301528316604482015260648101829052613ad89085906323b872dd60e01b90608401613df5565b6001600160a01b038216613f945760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103bf565b80601a6000828254613fa69190614fde565b90915550506001600160a01b03821660009081526018602052604081208054839290613fd3908490614fde565b90915550506040518181526001600160a01b0383169060009060008051602061549d8339815191529060200160405180910390a35050565b6000614016826111f0565b60008381526017602052604090205490915061403157505050565b60008281526017602052604081205461404a9083614caf565b90506000816009548661405d9190614f76565b61406791906153cd565b90506000670de0b6b3a76400006012546140819190615452565b6000868152601760205260408120549192509061409e90836153cd565b6140a99060646153cd565b9050816140d257600a5460009081526016602090815260408083208984529091528120556140fa565b6140dc8184615452565b600a5460009081526016602090815260408083208a84529091529020555b505050600092835250601760205260409091205550565b6000818152601560209081526040808320546014909252822080549192909161413b9084906152d1565b909155505060008181526015602090815260408083208390556014909152812054121561106a5760405162461bcd60e51b8152602060048201526014602482015273416c6c6f636174696f6e20756e646572666c6f7760601b60448201526064016103bf565b6000601254600014156141b657506000610e08565b6012546000838152601460205260409020546141d290856153cd565b61119d9190615452565b600254600754604051632830092960e21b81526000926001600160a01b03169163a0c024a49161421191908790600401614c8b565b608060405180830381865afa15801561422e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906142529190614dbf565b90508161425d612ac1565b101561426e5761426b612ac1565b91505b60015460408201516001600160a01b0390811691161461441b57604080516060810182528381526001546001600160a01b0390811660208301528383018051821683850152600b546002549151945163cb57d92f60e01b815273__$03022e2b4c61b304d810038eacea4b6c0c$__95630405efa3959492939092169163cb57d92f916142fd9190600401614935565b602060405180830381865afa15801561431a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061433e9190614e1f565b6002546001546040808901519051632fe30df560e01b81526001600160a01b0393841693632fe30df59361437793911691600401615120565b608060405180830381865afa158015614394573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906143b89190615248565b6040518563ffffffff1660e01b81526004016143d79493929190615279565b602060405180830381865af41580156143f4573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906144189190614e1f565b91505b61444181602001518383604001516001600160a01b0316613e2c9092919063ffffffff16565b602081015181516040808401519051630b8b4a6160e21b81526001600160a01b0390931692632e2d29849261447a928792600401615217565b6020604051808303816000875af1158015614499573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613ad89190614e1f565b604051632e1a7d4d60e01b81526004810182905273c02aaa39b223fe8d0a0e5c4f27ead9083c756cc290632e1a7d4d90602401600060405180830381600087803b15801561450a57600080fd5b505af115801561451e573d6000803e3d6000fd5b505050506000826001600160a01b03168260405160006040518083038185875af1925050503d806000811461456f576040519150601f19603f3d011682016040523d82523d6000602084013e614574565b606091505b50509050806134295760405162461bcd60e51b815260206004820152600e60248201526d115d1a195c881b9bdd081cd95b9d60921b60448201526064016103bf565b60025460075460405163d900d1f760e01b81526001600160a01b039092169163d900d1f7916145e9918690600401614c8b565b602060405180830381865afa158015614606573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061462a9190614ff6565b1561466f5760405162461bcd60e51b8152602060048201526015602482015274141c9bdd1bd8dbdb081bdb88189b1858dadb1a5cdd605a1b60448201526064016103bf565b6000828152601560205260408120805483929061468d9084906152d1565b9250508190555080601360008282546146a691906152d1565b90915550505050565b6000614704826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166147819092919063ffffffff16565b80519091501561342957808060200190518101906147229190614ff6565b6134295760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103bf565b6060611c758484600085856001600160a01b0385163b6147e35760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103bf565b600080866001600160a01b031685876040516147ff9190615480565b60006040518083038185875af1925050503d806000811461483c576040519150601f19603f3d011682016040523d82523d6000602084013e614841565b606091505b509150915061485182828661485c565b979650505050505050565b6060831561486b57508161119d565b82511561487b5782518084602001fd5b8160405162461bcd60e51b81526004016103bf91906148c1565b60005b838110156148b0578181015183820152602001614898565b83811115613ad85750506000910152565b60208152600082518060208401526148e0816040850160208701614895565b601f01601f19169190910160400192915050565b6001600160a01b038116811461106a57600080fd5b6000806040838503121561491c57600080fd5b8235614927816148f4565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60006020828403121561495b57600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051608081016001600160401b038111828210171561499a5761499a614962565b60405290565b604051601f8201601f191681016001600160401b03811182821017156149c8576149c8614962565b604052919050565b600060208083850312156149e357600080fd5b82356001600160401b03808211156149fa57600080fd5b818501915085601f830112614a0e57600080fd5b813581811115614a2057614a20614962565b8060051b9150614a318483016149a0565b8181529183018401918481019088841115614a4b57600080fd5b938501935b83851015614a6957843582529385019390850190614a50565b98975050505050505050565b600080600060608486031215614a8a57600080fd5b8335614a95816148f4565b92506020840135614aa5816148f4565b929592945050506040919091013590565b600060208284031215614ac857600080fd5b813561119d816148f4565b600060208284031215614ae557600080fd5b813561ffff8116811461119d57600080fd5b60008060408385031215614b0a57600080fd5b50508035926020909101359150565b801515811461106a57600080fd5b600060208284031215614b3957600080fd5b813561119d81614b19565b634e487b7160e01b600052602160045260246000fd5b6020810160068310614b7c57634e487b7160e01b600052602160045260246000fd5b91905290565b60008060408385031215614b9557600080fd5b823591506020830135614ba7816148f4565b809150509250929050565b600060208284031215614bc457600080fd5b81356006811061119d57600080fd5b60008060408385031215614be657600080fd5b8235614bf1816148f4565b91506020830135614ba7816148f4565b6020808252600e908201526d37b7363c903c283937bb34b232b960911b604082015260600190565b600181811c90821680614c3d57607f821691505b60208210811415614c5e57634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600d908201526c37b7363c9023bab0b93234b0b760991b604082015260600190565b918252602082015260400190565b634e487b7160e01b600052601160045260246000fd5b600082821015614cc157614cc1614c99565b500390565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6020808252600b908201526a57726f6e6720737461746560a81b604082015260600190565b6000600019821415614d3657614d36614c99565b5060010190565b600060608201858352602061ffff86168185015260606040850152818551808452608086019150828701935060005b81811015614d8857845183529383019391830191600101614d6c565b509098975050505050505050565b6020808252600f908201526e5661756c743a206f6e6c792044414f60881b604082015260600190565b600060808284031215614dd157600080fd5b614dd9614978565b8251614de4816148f4565b81526020830151614df4816148f4565b60208201526040830151614e07816148f4565b60408201526060928301519281019290925250919050565b600060208284031215614e3157600080fd5b5051919050565b6020808252600b908201526a526562616c616e63696e6760a81b604082015260600190565b6020808252600c908201526b2b30bab63a1034b99037b33360a11b604082015260600190565b600181815b80851115614ebe578160001904821115614ea457614ea4614c99565b80851615614eb157918102915b93841c9390800290614e88565b509250929050565b600082614ed557506001610e08565b81614ee257506000610e08565b8160018114614ef85760028114614f0257614f1e565b6001915050610e08565b60ff841115614f1357614f13614c99565b50506001821b610e08565b5060208310610133831016604e8410600b8410161715614f41575081810a610e08565b614f4b8383614e83565b8060001904821115614f5f57614f5f614c99565b029392505050565b600061119d60ff841683614ec6565b6000816000190483118215151615614f9057614f90614c99565b500290565b634e487b7160e01b600052601260045260246000fd5b600082614fba57614fba614f95565b500490565b92835260208301919091526001600160a01b0316604082015260600190565b60008219821115614ff157614ff1614c99565b500190565b60006020828403121561500857600080fd5b815161119d81614b19565b60006020828403121561502557600080fd5b815161119d816148f4565b805162ffffff8116811461504357600080fd5b919050565b60006060828403121561505a57600080fd5b604051606081016001600160401b038111828210171561507c5761507c614962565b604052825161508a816148f4565b8152602083015161509a816148f4565b60208201526150ab60408401615030565b60408201529392505050565b805182526020808201516001600160a01b039081169184019190915260409182015116910152565b60c081016150ed82856150b7565b82516001600160a01b039081166060840152602084015116608083015260409092015162ffffff1660a090910152919050565b6001600160a01b0392831681529116602082015260400190565b60208082526012908201527143616e6e6f7420657863656564203130302560701b604082015260600190565b94855261ffff93909316602085015260408401919091526060830152608082015260a00190565b6020808252600c908201526b4e6f20616c6c6f77616e636560a01b604082015260600190565b602080825260119082015270119d5b991cc81b9bdd08185c9c9a5d9959607a1b604082015260600190565b6020808252600890820152674e6f2066756e647360c01b604082015260600190565b9182526001600160a01b0316602082015260400190565b9283526001600160a01b03918216602084015216604082015260600190565b8051600f81900b811461504357600080fd5b60006080828403121561525a57600080fd5b615262614978565b61526b83615236565b8152614df460208401615236565b610120810161528882876150b7565b8460608301528360808301528251600f0b60a08301526020830151600f0b60c083015260018060a01b0360408401511660e0830152606083015161010083015295945050505050565b600080821280156001600160ff1b03849003851316156152f3576152f3614c99565b600160ff1b839003841281161561530c5761530c614c99565b50500190565b60008083128015600160ff1b85018412161561533057615330614c99565b6001600160ff1b038401831381161561534b5761534b614c99565b50500390565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561537957600080fd5b61119d82615030565b60a0810161539082866150b7565b6001600160a01b0393909316606082015262ffffff91909116608090910152919050565b6001600160a01b03929092168252602082015260400190565b60006001600160ff1b03818413828413808216868404861116156153f3576153f3614c99565b600160ff1b600087128281168783058912161561541257615412614c99565b6000871292508782058712848416161561542e5761542e614c99565b8785058712818416161561544457615444614c99565b505050929093029392505050565b60008261546157615461614f95565b600160ff1b82146000198414161561547b5761547b614c99565b500590565b60008251615492818460208701614895565b919091019291505056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa264697066735822122094c32c853b4e4977f1050279dab39f17a9b1dec67c0d26471d5e073786f6db3564736f6c634300080b0033",
  "libraries": {
    "Swap": "0xBbc18b580256A82dC0F9A86152b8B22E7C1C8005"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "balanceUnderlying(uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to an underlying protocol e.g compound_usdc_01"
        },
        "returns": {
          "_0": "Balance in VaultCurrency e.g USDC"
        }
      },
      "blacklistProtocol(uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to an underlying vault e.g compound_usdc_01"
        }
      },
      "calcShares(uint256,uint256)": {
        "params": {
          "_amount": "Amount in underyling token e.g USDC",
          "_protocolNum": "Protocol number linked to an underlying protocol e.g compound_usdc_01"
        },
        "returns": {
          "_0": "number of shares i.e LP tokens"
        }
      },
      "claimTokens()": {
        "details": "Loops over protocols in ETF and check if they are claimable in controller contract"
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "details": "Deposit VaultCurrency to Vault and mint LP tokens",
        "params": {
          "_amount": "Amount to deposit"
        },
        "returns": {
          "shares": "Tokens received by buyer"
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "price(uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to an underlying protocol e.g compound_usdc_01"
        },
        "returns": {
          "_0": "protocolPrice Price per lp token"
        }
      },
      "rebalanceETF()": {
        "details": "amountToProtocol = totalAmount * currentAllocation / totalAllocatedTokensamountToDeposit = amountToProtocol - currentBalanceProtocolif amountToDeposit < 0 => withdrawExecute all withdrawals before deposits"
      },
      "rebalanceNeeded()": {
        "returns": {
          "_0": "bool True of rebalance is needed, false if not"
        }
      },
      "redeemRewardsGame(uint256,address)": {
        "params": {
          "_user": "Address of the user",
          "_value": "Amount to set a request in vaultCurrency"
        }
      },
      "setDao(address)": {
        "params": {
          "_dao": "New address of the governance / DAO"
        }
      },
      "setDaoToken(address)": {
        "params": {
          "_token": "New address of the derby token"
        }
      },
      "setGame(address)": {
        "params": {
          "_game": "New address of the game"
        }
      },
      "setGasFeeLiquidity(uint256)": {
        "params": {
          "_gasFeeLiquidity": "Value at which to set the gasFeeLiquidity in vaultCurrency"
        }
      },
      "setGuardian(address)": {
        "params": {
          "_guardian": "new address of the guardian"
        }
      },
      "setHomeXProvider(address)": {
        "params": {
          "_xProvider": "new address of xProvider on this chain"
        }
      },
      "setLiquidityPerc(uint256)": {
        "details": "The actual liquidityPerc could be a bit more or a bit less than the liquidityPerc set here.This is because some deposits or withdrawals might not execute because they don't meet the marginScale.",
        "params": {
          "_liquidityPerc": "Value at which to set the liquidityPerc."
        }
      },
      "setMarginScale(int256)": {
        "details": "Take into account the uScale (scale of the underlying).",
        "params": {
          "_marginScale": "Value at which to set the marginScale."
        }
      },
      "setPerformanceFee(uint256)": {
        "details": "The actual performanceFee could be a bit more or a bit less than the performanceFee set here due to approximations in the game.",
        "params": {
          "_performanceFee": "Value at which to set the performanceFee."
        }
      },
      "setRebalanceInterval(uint256)": {
        "params": {
          "_timestampInternal": "UNIX timestamp"
        }
      },
      "setSwapRewards(bool)": {
        "params": {
          "_state": "True when rewards should be swapped to derby tokens"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "toggleVaultOnOff(bool)": {
        "params": {
          "_state": "bool for chainId on or off"
        }
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "withdraw(uint256)": {
        "details": "Withdraw VaultCurrency from Vault and burn LP tokens",
        "params": {
          "_amount": "Amount to withdraw in LP tokens"
        },
        "returns": {
          "value": "Amount received by seller in vaultCurrency"
        }
      },
      "withdrawAllowance()": {
        "details": "Will send the user funds and reset the allowance"
      },
      "withdrawRewards()": {
        "details": "Will swap vaultCurrency to Derby tokens, send the user funds and reset the allowance"
      },
      "withdrawalRequest(uint256)": {
        "details": "Will give the user allowance for his funds and pulls the extra funds at the next rebalance",
        "params": {
          "_amount": "Amount to withdraw in LP token"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "balanceUnderlying(uint256)": {
        "notice": "Get balance in VaultCurrency in underlying protocol"
      },
      "blacklistProtocol(uint256)": {
        "notice": "The DAO should be able to blacklist protocols, the funds should be sent to the vault."
      },
      "calcShares(uint256,uint256)": {
        "notice": "Calculates how many shares are equal to the amount in vault currency"
      },
      "claimTokens()": {
        "notice": "Harvest extra tokens from underlying protocols"
      },
      "deposit(uint256)": {
        "notice": "Deposit in Vault"
      },
      "getDao()": {
        "notice": "Getter for dao address"
      },
      "getGuardian()": {
        "notice": "Getter for guardian address"
      },
      "getWithdrawalAllowance()": {
        "notice": "Returns the amount in vaultCurrency the user is able to withdraw"
      },
      "price(uint256)": {
        "notice": "Get price for underlying protocol"
      },
      "pushTotalUnderlyingToController()": {
        "notice": "Step 2 trigger; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainControllerPushes totalUnderlying, totalSupply and totalWithdrawalRequests of the vault for this chainId to xController"
      },
      "rebalanceETF()": {
        "notice": "Step 7 trigger, end; Vaults rebalanceRebalances i.e deposit or withdraw from all underlying protocols"
      },
      "rebalanceNeeded()": {
        "notice": "Checks if a rebalance is needed based on the set interval"
      },
      "rebalanceXChain()": {
        "notice": "Step 4 trigger; Push funds from vaults to xChainControllerSend vaultcurrency to the xController for xChain rebalance"
      },
      "receiveFunds()": {
        "notice": "Step 5 end; Push funds from xChainController to vaultsReceiving feedback from xController when funds are received, so the vault can rebalance"
      },
      "receiveFundsGuard()": {
        "notice": "Step 5: Guardian function"
      },
      "receiveProtocolAllocations(int256[])": {
        "notice": "See receiveProtocolAllocations below"
      },
      "receiveProtocolAllocationsGuard(int256[])": {
        "notice": "Step 6: Guardian function"
      },
      "redeemRewardsGame(uint256,address)": {
        "notice": "Function for the game to set a withdrawalRequest for the rewards of the game user"
      },
      "sendRewardsToGame()": {
        "notice": "Step 8 trigger; Vaults push rewardsPerLockedToken to game"
      },
      "setChainIds(uint16)": {
        "notice": "Setter for new homeChain Id"
      },
      "setDao(address)": {
        "notice": "Set the governance address"
      },
      "setDaoToken(address)": {
        "notice": "Setter for derby token address"
      },
      "setGame(address)": {
        "notice": "Setter for new game address"
      },
      "setGasFeeLiquidity(uint256)": {
        "notice": "Set the gasFeeLiquidity, liquidity in vaultcurrency which always should be kept in vault to pay for rebalance gas fee"
      },
      "setGuardian(address)": {
        "notice": "Setter for guardian address"
      },
      "setHomeXProvider(address)": {
        "notice": "Setter for xProvider address"
      },
      "setLiquidityPerc(uint256)": {
        "notice": "Set the liquidityPerc, the amount of liquidity which should be held in the vault after rebalancing."
      },
      "setMarginScale(int256)": {
        "notice": "Set the marginScale, the threshold used for deposits and withdrawals.If the threshold is not met the deposit/ withdrawal is not executed."
      },
      "setPerformanceFee(uint256)": {
        "notice": "Set the performanceFee, the percentage of the yield that goes to the game players."
      },
      "setRebalanceInterval(uint256)": {
        "notice": "Set minimum interval for the rebalance function"
      },
      "setSwapRewards(bool)": {
        "notice": "Setter for swapping rewards to derby tokens"
      },
      "setTotalUnderlying()": {
        "notice": "Set total balance in VaultCurrency in all underlying protocols"
      },
      "setVaultStateGuard(uint8)": {
        "notice": "Guardian function to set state when vault gets stuck for whatever reason"
      },
      "setXChainAllocation(uint256,uint256)": {
        "notice": "See setXChainAllocationInt below"
      },
      "setXChainAllocationGuard(uint256,uint256)": {
        "notice": "Step 3: Guardian function"
      },
      "toggleVaultOnOff(bool)": {
        "notice": "Receive feedback for the vault if the vault is set to on or off"
      },
      "withdraw(uint256)": {
        "notice": "Withdraw from Vault"
      },
      "withdrawAllowance()": {
        "notice": "Withdraw the allowance the user requested on the last rebalancing period"
      },
      "withdrawRewards()": {
        "notice": "Withdraw the reward allowance set by the game with redeemRewardsGame"
      },
      "withdrawalRequest(uint256)": {
        "notice": "Withdrawal request for when the vault doesnt have enough funds available"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 13616,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "vaultCurrency",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)703"
      },
      {
        "astId": 13619,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "controller",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IController)5796"
      },
      {
        "astId": 13622,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "state",
        "offset": 20,
        "slot": "2",
        "type": "t_enum(State)13613"
      },
      {
        "astId": 13624,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "deltaAllocationsReceived",
        "offset": 21,
        "slot": "2",
        "type": "t_bool"
      },
      {
        "astId": 13626,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "dao",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 13628,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "guardian",
        "offset": 0,
        "slot": "4",
        "type": "t_address"
      },
      {
        "astId": 13630,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "vaultCurrencyAddr",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 13632,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "xController",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 13634,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "vaultNumber",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 13637,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "liquidityPerc",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 13640,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 13643,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "rebalancingPeriod",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 13645,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "uScale",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 13648,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "marginScale",
        "offset": 0,
        "slot": "12",
        "type": "t_int256"
      },
      {
        "astId": 13650,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "rebalanceInterval",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 13652,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 13654,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "gasFeeLiquidity",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 13656,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "savedTotalUnderlying",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 13658,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "reservedFunds",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 13660,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "totalAllocatedTokens",
        "offset": 0,
        "slot": "18",
        "type": "t_int256"
      },
      {
        "astId": 13662,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "deltaAllocatedTokens",
        "offset": 0,
        "slot": "19",
        "type": "t_int256"
      },
      {
        "astId": 13666,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "currentAllocations",
        "offset": 0,
        "slot": "20",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 13670,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "deltaAllocations",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 13676,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "rewardPerLockedToken",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))"
      },
      {
        "astId": 13680,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "lastPrices",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 55,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "_balances",
        "offset": 0,
        "slot": "24",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "_allowances",
        "offset": 0,
        "slot": "25",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 63,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "26",
        "type": "t_uint256"
      },
      {
        "astId": 65,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "_name",
        "offset": 0,
        "slot": "27",
        "type": "t_string_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "_symbol",
        "offset": 0,
        "slot": "28",
        "type": "t_string_storage"
      },
      {
        "astId": 15086,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "decimals_",
        "offset": 0,
        "slot": "29",
        "type": "t_uint8"
      },
      {
        "astId": 6268,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "derbyToken",
        "offset": 1,
        "slot": "29",
        "type": "t_address"
      },
      {
        "astId": 6270,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "game",
        "offset": 0,
        "slot": "30",
        "type": "t_address"
      },
      {
        "astId": 6272,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "xProvider",
        "offset": 0,
        "slot": "31",
        "type": "t_address"
      },
      {
        "astId": 6274,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "vaultOff",
        "offset": 20,
        "slot": "31",
        "type": "t_bool"
      },
      {
        "astId": 6276,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "swapRewards",
        "offset": 21,
        "slot": "31",
        "type": "t_bool"
      },
      {
        "astId": 6278,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "totalWithdrawalRequests",
        "offset": 0,
        "slot": "32",
        "type": "t_uint256"
      },
      {
        "astId": 6280,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "33",
        "type": "t_uint256"
      },
      {
        "astId": 6282,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "homeChain",
        "offset": 0,
        "slot": "34",
        "type": "t_uint16"
      },
      {
        "astId": 6284,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "amountToSendXChain",
        "offset": 0,
        "slot": "35",
        "type": "t_uint256"
      },
      {
        "astId": 6288,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "withdrawalAllowance",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6292,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "withdrawalRequestPeriod",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6296,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "rewardAllowance",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 6300,
        "contract": "contracts/MainVault.sol:MainVault",
        "label": "rewardRequestPeriod",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IController)5796": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20)703": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_enum(State)13613": {
        "encoding": "inplace",
        "label": "enum Vault.State",
        "numberOfBytes": "1"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
{
  "address": "0xBbc18b580256A82dC0F9A86152b8B22E7C1C8005",
  "abi": [],
  "transactionHash": "0x64d61149ed321fb81a640eb7a94a86e787a20df08fe08b2fae7db7b2016fa095",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xBbc18b580256A82dC0F9A86152b8B22E7C1C8005",
    "transactionIndex": 0,
    "gasUsed": "932760",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0xea0ae007025d3ebe79fae287ddb72687a5db210feaf9d76336d5c4cffce7efa2",
    "transactionHash": "0x64d61149ed321fb81a640eb7a94a86e787a20df08fe08b2fae7db7b2016fa095",
    "logs": [],
    "blockNumber": 15932065,
    "cumulativeGasUsed": "932760",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a4dd9cf6f9a65e85785f63248e1cb35a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"amountOutMultiSwap(Swap.SwapInOut,address,uint24)\":{\"params\":{\"_poolFee\":\"Current uniswap pool fee set in router e.g 3000\",\"_swap\":\"Number of tokens to sell, token to sell, token to receive\",\"_uniswapQuoter\":\"Address of uniswapQuoter\"},\"returns\":{\"_0\":\"amountOutMin minimum amount out of tokens to receive when executing swap\"}},\"amountOutSingleSwap(Swap.SwapInOut,address,uint24)\":{\"params\":{\"_poolFee\":\"Current uniswap pool fee set in router e.g 3000\",\"_swap\":\"Number of tokens to sell, token to sell, token to receive\",\"_uniswapQuoter\":\"Address of uniswapQuoter\"},\"returns\":{\"_0\":\"amountOutMin minimum amount out of tokens to receive when executing swap\"}},\"swapStableCoins(Swap.SwapInOut,uint256,uint256,IController.CurveParams)\":{\"params\":{\"_curve\":\"Curve pool index number of TokenIn address, tokenOut address, pool address and pool fee\",\"_swap\":\"Number of tokens to sell, token to sell, token to receive\",\"_tokenInUScale\":\"Scale of tokenIn e.g 1E6\",\"_tokenOutUScale\":\"Scale of tokenOut e.g 1E6\"}},\"swapTokensMulti(Swap.SwapInOut,IController.UniswapParams)\":{\"params\":{\"_swap\":\"Number of tokens to sell, token to sell, token to receive\",\"_uniswap\":\"Address of uniswapRouter, uniswapQuoter and poolfee\"},\"returns\":{\"_0\":\"Amountout Number of tokens received\"}},\"swapTokensSingle(Swap.SwapInOut,IController.UniswapParams)\":{\"params\":{\"_swap\":\"Number of tokens to sell, token to sell, token to receive\",\"_uniswap\":\"Address of uniswapRouter, uniswapQuoter and poolfee\"},\"returns\":{\"_0\":\"Amountout Number of tokens received\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"amountOutMultiSwap(Swap.SwapInOut,address,uint24)\":{\"notice\":\"Swap tokens on Uniswap Multi route\"},\"amountOutSingleSwap(Swap.SwapInOut,address,uint24)\":{\"notice\":\"Swap tokens on Uniswap\"},\"swapStableCoins(Swap.SwapInOut,uint256,uint256,IController.CurveParams)\":{\"notice\":\"Swap stable coins on Curve\"},\"swapTokensMulti(Swap.SwapInOut,IController.UniswapParams)\":{\"notice\":\"Swap tokens on Uniswap\"},\"swapTokensSingle(Swap.SwapInOut,IController.UniswapParams)\":{\"notice\":\"Swap tokens on Uniswap\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/libraries/Swap.sol\":\"Swap\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/// @title Quoter Interface\\r\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\r\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\r\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\r\\ninterface IQuoter {\\r\\n  /// @notice Returns the amount out received for a given exact input swap without executing the swap\\r\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\\r\\n  /// @param amountIn The amount of the first token to swap\\r\\n  /// @return amountOut The amount of the last token that would be received\\r\\n  function quoteExactInput(bytes memory path, uint256 amountIn)\\r\\n    external\\r\\n    returns (uint256 amountOut);\\r\\n\\r\\n  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\r\\n  /// @param tokenIn The token being swapped in\\r\\n  /// @param tokenOut The token being swapped out\\r\\n  /// @param fee The fee of the token pool to consider for the pair\\r\\n  /// @param amountIn The desired input amount\\r\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\r\\n  /// @return amountOut The amount of `tokenOut` that would be received\\r\\n  function quoteExactInputSingle(\\r\\n    address tokenIn,\\r\\n    address tokenOut,\\r\\n    uint24 fee,\\r\\n    uint256 amountIn,\\r\\n    uint160 sqrtPriceLimitX96\\r\\n  ) external returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x3a459293365e4b7d5dddb38eda3c68d742ee035c133b2ef0c4e3b3e52d3a469a\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IStableSwap3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IStableSwap3Pool {\\r\\n  function exchange(\\r\\n    int128 i,\\r\\n    int128 j,\\r\\n    uint256 dx,\\r\\n    uint256 min_dy\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x21a5c786bba96ea158dbed849353852a2ebe40a2e9cd6328722b83b6d3479235\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface ISwapRouter {\\r\\n  struct ExactInputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInputSingle(ISwapRouter.ExactInputSingleParams memory params)\\r\\n    external\\r\\n    returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactInputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInput(ExactInputParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x22353db7855673a12308ba8fcffadd2b21cd900d5ce58b749bf878e8c905ff22\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IUniswapV3Factory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IUniswapV3Factory {\\r\\n  function getPool(\\r\\n    address tokenA,\\r\\n    address tokenB,\\r\\n    uint24 fee\\r\\n  ) external view returns (address pool);\\r\\n}\\r\\n\",\"keccak256\":\"0x1ee377694b581bdb2a924cfdbc507d7fbbb74c9bfbd79611fe472612227dbc91\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IUniswapV3Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IUniswapV3Pool {\\r\\n  /// @notice The first of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token0() external view returns (address);\\r\\n\\r\\n  /// @notice The second of the two tokens of the pool, sorted by address\\r\\n  /// @return The token contract address\\r\\n  function token1() external view returns (address);\\r\\n\\r\\n  /// @notice The 0th storage slot in the pool stores many values, and is exposed as a single method to save gas\\r\\n  /// when accessed externally.\\r\\n  /// @return sqrtPriceX96 The current price of the pool as a sqrt(token1/token0) Q64.96 value\\r\\n  /// tick The current tick of the pool, i.e. according to the last tick transition that was run.\\r\\n  /// This value may not always be equal to SqrtTickMath.getTickAtSqrtRatio(sqrtPriceX96) if the price is on a tick\\r\\n  /// boundary.\\r\\n  /// observationIndex The index of the last oracle observation that was written,\\r\\n  /// observationCardinality The current maximum number of observations stored in the pool,\\r\\n  /// observationCardinalityNext The next maximum number of observations, to be updated when the observation.\\r\\n  /// feeProtocol The protocol fee for both tokens of the pool.\\r\\n  /// Encoded as two 4 bit values, where the protocol fee of token1 is shifted 4 bits and the protocol fee of token0\\r\\n  /// is the lower 4 bits. Used as the denominator of a fraction of the swap fee, e.g. 4 means 1/4th of the swap fee.\\r\\n  /// unlocked Whether the pool is currently locked to reentrancy\\r\\n  function slot0()\\r\\n    external\\r\\n    view\\r\\n    returns (\\r\\n      uint160 sqrtPriceX96,\\r\\n      int24 tick,\\r\\n      uint16 observationIndex,\\r\\n      uint16 observationCardinality,\\r\\n      uint16 observationCardinalityNext,\\r\\n      uint8 feeProtocol,\\r\\n      bool unlocked\\r\\n    );\\r\\n}\\r\\n\",\"keccak256\":\"0xcc4df67705ddcb0300f691cb4fcde5bc55ac95460dd9d155dda93415f75acd6d\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title Interface for WETH9\\r\\ninterface IWETH9 is IERC20 {\\r\\n  /// @notice Deposit ether to get wrapped ether\\r\\n  function deposit() external payable;\\r\\n\\r\\n  /// @notice Withdraw wrapped ether to get ether\\r\\n  function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf4b5008d0c423bd867b814efe0bc6c41368ba93dcaea832a62984a649c40c6a8\",\"license\":\"MIT\"},\"contracts/Interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IController {\\r\\n  struct ProtocolInfoS {\\r\\n    address LPToken;\\r\\n    address provider;\\r\\n    address underlying; // address of underlying token of the protocol eg USDC\\r\\n    uint256 uScale; // uScale of protocol LP Token\\r\\n  }\\r\\n\\r\\n  struct UniswapParams {\\r\\n    address router;\\r\\n    address quoter;\\r\\n    uint24 poolFee;\\r\\n  }\\r\\n\\r\\n  struct CurveParams {\\r\\n    int128 indexTokenIn;\\r\\n    int128 indexTokenOut;\\r\\n    address pool;\\r\\n    uint256 poolFee;\\r\\n  }\\r\\n\\r\\n  function claim(uint256 _ETFnumber, uint256 protocolNumber) external returns (bool);\\r\\n\\r\\n  function addProtocol(\\r\\n    string calldata name,\\r\\n    uint256 _ETFnumber,\\r\\n    address provider,\\r\\n    address protocolLPToken,\\r\\n    address underlying,\\r\\n    address govToken,\\r\\n    uint256 _uScale\\r\\n  ) external returns (uint256);\\r\\n\\r\\n  function curve3Pool() external view returns (address);\\r\\n\\r\\n  function curve3PoolFee() external view returns (uint256);\\r\\n\\r\\n  function curveIndex(address _token) external view returns (int128);\\r\\n\\r\\n  function getProtocolInfo(uint256 _ETFnumber, uint256 protocolNumber)\\r\\n    external\\r\\n    view\\r\\n    returns (ProtocolInfoS memory);\\r\\n\\r\\n  function getUniswapParams() external view returns (UniswapParams memory);\\r\\n\\r\\n  function getCurveParams(address _in, address _out) external view returns (CurveParams memory);\\r\\n\\r\\n  function latestProtocolId(uint256 _ETFnumber) external view returns (uint256);\\r\\n\\r\\n  function addVault(address _vault) external;\\r\\n\\r\\n  function addCurveIndex(address _token, int128 _index) external;\\r\\n\\r\\n  function underlyingUScale(address _token) external view returns (uint256);\\r\\n\\r\\n  function setUniswapRouter(address _uniswapRouter) external;\\r\\n\\r\\n  function setUniswapQuoter(address _uniswapQuoter) external;\\r\\n\\r\\n  function setUniswapPoolFee(uint24 _poolFee) external;\\r\\n\\r\\n  function getUniswapPoolFee() external view returns (uint24);\\r\\n\\r\\n  function getUniswapQuoter() external view returns (address);\\r\\n\\r\\n  function getProtocolBlacklist(uint256 _ETFnumber, uint256 _protocolNum)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  function setProtocolBlacklist(uint256 _ETFnumber, uint256 _protocolNum) external;\\r\\n\\r\\n  function getGasPrice() external returns (uint256);\\r\\n\\r\\n  function setGasPriceOracle(address _chainlinkGasPriceOracle) external;\\r\\n\\r\\n  function getGovToken(uint256 _vaultNumber, uint256 _protocolNum) external view returns (address);\\r\\n\\r\\n  function getDao() external view returns (address);\\r\\n}\\r\\n\",\"keccak256\":\"0xaf770343e7835b21aded2b8b0e915306199d4dc9483a4756f008a7b1dff9df66\",\"license\":\"MIT\"},\"contracts/libraries/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/IController.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/ExternalInterfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IUniswapV3Factory.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IUniswapV3Pool.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IStableSwap3Pool.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IWETH.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IQuoter.sol\\\";\\r\\n\\r\\nlibrary Swap {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  struct SwapInOut {\\r\\n    uint256 amount;\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n  }\\r\\n\\r\\n  address internal constant WETH = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;\\r\\n  uint256 internal constant gasUsedForSwap = 210000;\\r\\n\\r\\n  /// @notice Swap stable coins on Curve\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _tokenInUScale Scale of tokenIn e.g 1E6\\r\\n  /// @param _tokenOutUScale Scale of tokenOut e.g 1E6\\r\\n  /// @param _curve Curve pool index number of TokenIn address, tokenOut address, pool address and pool fee\\r\\n  function swapStableCoins(\\r\\n    SwapInOut memory _swap,\\r\\n    uint256 _tokenInUScale,\\r\\n    uint256 _tokenOutUScale,\\r\\n    IController.CurveParams memory _curve\\r\\n  ) public returns (uint256) {\\r\\n    uint256 amountOutMin = (((_swap.amount * (10000 - _curve.poolFee)) / 10000) * _tokenOutUScale) /\\r\\n      _tokenInUScale;\\r\\n    IERC20(_swap.tokenIn).safeIncreaseAllowance(_curve.pool, _swap.amount);\\r\\n\\r\\n    uint256 balanceBefore = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n\\r\\n    IStableSwap3Pool(_curve.pool).exchange(\\r\\n      _curve.indexTokenIn,\\r\\n      _curve.indexTokenOut,\\r\\n      _swap.amount,\\r\\n      amountOutMin\\r\\n    );\\r\\n\\r\\n    uint256 balanceAfter = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n\\r\\n    return balanceAfter - balanceBefore;\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswap Address of uniswapRouter, uniswapQuoter and poolfee\\r\\n  /// @return Amountout Number of tokens received\\r\\n  function swapTokensMulti(SwapInOut memory _swap, IController.UniswapParams memory _uniswap)\\r\\n    public\\r\\n    returns (uint256)\\r\\n  {\\r\\n    IERC20(_swap.tokenIn).safeIncreaseAllowance(_uniswap.router, _swap.amount);\\r\\n\\r\\n    uint256 amountOutMinimum = IQuoter(_uniswap.quoter).quoteExactInput(\\r\\n      abi.encodePacked(_swap.tokenIn, _uniswap.poolFee, WETH, _uniswap.poolFee, _swap.tokenOut),\\r\\n      _swap.amount\\r\\n    );\\r\\n\\r\\n    ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\r\\n      path: abi.encodePacked(\\r\\n        _swap.tokenIn,\\r\\n        _uniswap.poolFee,\\r\\n        WETH,\\r\\n        _uniswap.poolFee,\\r\\n        _swap.tokenOut\\r\\n      ),\\r\\n      recipient: address(this),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: _swap.amount,\\r\\n      amountOutMinimum: amountOutMinimum\\r\\n    });\\r\\n\\r\\n    uint256 balanceBefore = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n    ISwapRouter(_uniswap.router).exactInput(params);\\r\\n    uint256 balanceAfter = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n\\r\\n    return balanceAfter - balanceBefore;\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswap Address of uniswapRouter, uniswapQuoter and poolfee\\r\\n  /// @return Amountout Number of tokens received\\r\\n  function swapTokensSingle(SwapInOut memory _swap, IController.UniswapParams memory _uniswap)\\r\\n    public\\r\\n    returns (uint256)\\r\\n  {\\r\\n    IERC20(_swap.tokenIn).safeIncreaseAllowance(_uniswap.router, _swap.amount);\\r\\n\\r\\n    uint256 amountOutMinimum = amountOutSingleSwap(\\r\\n      SwapInOut(_swap.amount, _swap.tokenIn, _swap.tokenOut),\\r\\n      _uniswap.quoter,\\r\\n      _uniswap.poolFee\\r\\n    );\\r\\n\\r\\n    ISwapRouter.ExactInputSingleParams memory params = ISwapRouter.ExactInputSingleParams({\\r\\n      tokenIn: _swap.tokenIn,\\r\\n      tokenOut: _swap.tokenOut,\\r\\n      fee: _uniswap.poolFee,\\r\\n      recipient: address(this),\\r\\n      deadline: block.timestamp,\\r\\n      amountIn: _swap.amount,\\r\\n      amountOutMinimum: amountOutMinimum,\\r\\n      sqrtPriceLimitX96: 0\\r\\n    });\\r\\n\\r\\n    // The call to `exactInputSingle` executes the swap.\\r\\n    return ISwapRouter(_uniswap.router).exactInputSingle(params);\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswapQuoter Address of uniswapQuoter\\r\\n  /// @param _poolFee Current uniswap pool fee set in router e.g 3000\\r\\n  /// @return amountOutMin minimum amount out of tokens to receive when executing swap\\r\\n  function amountOutSingleSwap(\\r\\n    SwapInOut memory _swap,\\r\\n    address _uniswapQuoter,\\r\\n    uint24 _poolFee\\r\\n  ) public returns (uint256) {\\r\\n    return\\r\\n      IQuoter(_uniswapQuoter).quoteExactInputSingle(\\r\\n        _swap.tokenIn,\\r\\n        _swap.tokenOut,\\r\\n        _poolFee,\\r\\n        _swap.amount,\\r\\n        0\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap Multi route\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswapQuoter Address of uniswapQuoter\\r\\n  /// @param _poolFee Current uniswap pool fee set in router e.g 3000\\r\\n  /// @return amountOutMin minimum amount out of tokens to receive when executing swap\\r\\n  function amountOutMultiSwap(\\r\\n    SwapInOut memory _swap,\\r\\n    address _uniswapQuoter,\\r\\n    uint24 _poolFee\\r\\n  ) public returns (uint256) {\\r\\n    return\\r\\n      IQuoter(_uniswapQuoter).quoteExactInput(\\r\\n        abi.encodePacked(_swap.tokenIn, _poolFee, WETH, _poolFee, _swap.tokenOut),\\r\\n        _swap.amount\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /// @notice Will unwrap WETH and send to DAO / governed address\\r\\n  /// @param _governed DAO / governed address\\r\\n  /// @param _amount amount to unwrap and transfer\\r\\n  function unWrapWETHtoGov(address payable _governed, uint256 _amount) internal {\\r\\n    IWETH9(WETH).withdraw(_amount);\\r\\n    (bool sent, ) = _governed.call{value: _amount}(\\\"\\\");\\r\\n    require(sent, \\\"Ether not sent\\\");\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0xbd549a396b178162e19cbeea745aa45afb1cdb5a420caec091825066c8efce39\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "amountOutMultiSwap(Swap.SwapInOut,address,uint24)": {
        "params": {
          "_poolFee": "Current uniswap pool fee set in router e.g 3000",
          "_swap": "Number of tokens to sell, token to sell, token to receive",
          "_uniswapQuoter": "Address of uniswapQuoter"
        },
        "returns": {
          "_0": "amountOutMin minimum amount out of tokens to receive when executing swap"
        }
      },
      "amountOutSingleSwap(Swap.SwapInOut,address,uint24)": {
        "params": {
          "_poolFee": "Current uniswap pool fee set in router e.g 3000",
          "_swap": "Number of tokens to sell, token to sell, token to receive",
          "_uniswapQuoter": "Address of uniswapQuoter"
        },
        "returns": {
          "_0": "amountOutMin minimum amount out of tokens to receive when executing swap"
        }
      },
      "swapStableCoins(Swap.SwapInOut,uint256,uint256,IController.CurveParams)": {
        "params": {
          "_curve": "Curve pool index number of TokenIn address, tokenOut address, pool address and pool fee",
          "_swap": "Number of tokens to sell, token to sell, token to receive",
          "_tokenInUScale": "Scale of tokenIn e.g 1E6",
          "_tokenOutUScale": "Scale of tokenOut e.g 1E6"
        }
      },
      "swapTokensMulti(Swap.SwapInOut,IController.UniswapParams)": {
        "params": {
          "_swap": "Number of tokens to sell, token to sell, token to receive",
          "_uniswap": "Address of uniswapRouter, uniswapQuoter and poolfee"
        },
        "returns": {
          "_0": "Amountout Number of tokens received"
        }
      },
      "swapTokensSingle(Swap.SwapInOut,IController.UniswapParams)": {
        "params": {
          "_swap": "Number of tokens to sell, token to sell, token to receive",
          "_uniswap": "Address of uniswapRouter, uniswapQuoter and poolfee"
        },
        "returns": {
          "_0": "Amountout Number of tokens received"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "amountOutMultiSwap(Swap.SwapInOut,address,uint24)": {
        "notice": "Swap tokens on Uniswap Multi route"
      },
      "amountOutSingleSwap(Swap.SwapInOut,address,uint24)": {
        "notice": "Swap tokens on Uniswap"
      },
      "swapStableCoins(Swap.SwapInOut,uint256,uint256,IController.CurveParams)": {
        "notice": "Swap stable coins on Curve"
      },
      "swapTokensMulti(Swap.SwapInOut,IController.UniswapParams)": {
        "notice": "Swap tokens on Uniswap"
      },
      "swapTokensSingle(Swap.SwapInOut,IController.UniswapParams)": {
        "notice": "Swap tokens on Uniswap"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}
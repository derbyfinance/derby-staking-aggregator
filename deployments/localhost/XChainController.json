{
  "address": "0x707531c9999AaeF9232C8FEfBA31FBa4cB78d84a",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_homeChain",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amountToSendXChain",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "SendXChainAmount",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "SentFundsToVault",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "chainIds",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        }
      ],
      "name": "getVaultChainIdOff",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeChain",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        }
      ],
      "name": "pushVaultAmounts",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveAllocationsFromGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveAllocationsFromGameGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        }
      ],
      "name": "resetVaultStagesDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        }
      ],
      "name": "sendFundsToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_activeVaults",
          "type": "uint256"
        }
      ],
      "name": "setActiveVaultsGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setAllocationsReceivedGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16[]",
          "name": "_chainIds",
          "type": "uint16[]"
        }
      ],
      "name": "setChainIds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "setDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_fundsReceived",
          "type": "uint256"
        }
      ],
      "name": "setFundsReceivedGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        }
      ],
      "name": "setGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_homeChainId",
          "type": "uint16"
        }
      ],
      "name": "setHomeChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xProvider",
          "type": "address"
        }
      ],
      "name": "setHomeXProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setReadyGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_underlying",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalRequests",
          "type": "uint256"
        }
      ],
      "name": "setTotalUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_underlying",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalRequests",
          "type": "uint256"
        }
      ],
      "name": "setTotalUnderlyingGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_underlyingReceived",
          "type": "uint256"
        }
      ],
      "name": "setUnderlyingReceivedGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "setVaultChainAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        }
      ],
      "name": "upFundsReceived",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaultStage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "activeVaults",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "ready",
          "type": "bool"
        },
        {
          "internalType": "bool",
          "name": "allocationsReceived",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "underlyingReceived",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "fundsReceived",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xProvider",
      "outputs": [
        {
          "internalType": "contract IXProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xProviderAddr",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x44b34a9c83d0955ce500b2cf1626291334782674c80ead708c5469a69f7eb555",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x707531c9999AaeF9232C8FEfBA31FBa4cB78d84a",
    "transactionIndex": 0,
    "gasUsed": "2027711",
    "logsBloom": "0x
    "blockHash": "0xa02ed505b3289d7bb26cd8093eccfe27fb4f9ba2e3fdb40d7f7472c12760b7c1",
    "transactionHash": "0x44b34a9c83d0955ce500b2cf1626291334782674c80ead708c5469a69f7eb555",
    "logs": [],
    "blockNumber": 15932069,
    "cumulativeGasUsed": "2027711",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x103A3b128991781EE2c8db0454cA99d67b257923",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    100
  ],
  "numDeployments": 1,
  "solcInputHash": "f987a020c854af057aeb38d6938caa4d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_homeChain\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amountToSendXChain\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"SendXChainAmount\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"SentFundsToVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"chainIds\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"}],\"name\":\"getVaultChainIdOff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeChain\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"}],\"name\":\"pushVaultAmounts\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveAllocationsFromGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveAllocationsFromGameGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"}],\"name\":\"resetVaultStagesDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"}],\"name\":\"sendFundsToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_activeVaults\",\"type\":\"uint256\"}],\"name\":\"setActiveVaultsGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setAllocationsReceivedGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16[]\",\"name\":\"_chainIds\",\"type\":\"uint16[]\"}],\"name\":\"setChainIds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_fundsReceived\",\"type\":\"uint256\"}],\"name\":\"setFundsReceivedGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"}],\"name\":\"setGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_homeChainId\",\"type\":\"uint16\"}],\"name\":\"setHomeChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xProvider\",\"type\":\"address\"}],\"name\":\"setHomeXProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setReadyGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalRequests\",\"type\":\"uint256\"}],\"name\":\"setTotalUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalRequests\",\"type\":\"uint256\"}],\"name\":\"setTotalUnderlyingGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_underlyingReceived\",\"type\":\"uint256\"}],\"name\":\"setUnderlyingReceivedGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"setVaultChainAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"}],\"name\":\"upFundsReceived\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaultStage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"activeVaults\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"ready\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"allocationsReceived\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"underlyingReceived\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"fundsReceived\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xProvider\",\"outputs\":[{\"internalType\":\"contract IXProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xProviderAddr\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"pushVaultAmounts(uint256)\":{\"params\":{\"_vaultNumber\":\"Number of vault\"}},\"receiveAllocationsFromGame(uint256,int256[])\":{\"params\":{\"_deltas\":\"Delta allocations array received from game, indexes match chainIds[] set in this contract\",\"_vaultNumber\":\"Number of Vault\"}},\"resetVaultStagesDao(uint256)\":{\"details\":\"onlyDao modifier so the dao can reset all stages for a vaultNumber incase something goes wrong\"},\"sendFundsToVault(uint256)\":{\"params\":{\"_vaultNumber\":\"Number of vault\"}},\"setChainIds(uint16[])\":{\"params\":{\"_chainIds\":\"array of all the used chainIds\"}},\"setDao(address)\":{\"params\":{\"_dao\":\"DAO address\"}},\"setGame(address)\":{\"params\":{\"_game\":\"New address of the game\"}},\"setGuardian(address)\":{\"params\":{\"_guardian\":\"new address of the guardian\"}},\"setHomeChainId(uint16)\":{\"params\":{\"_homeChainId\":\"New home chainId\"}},\"setHomeXProvider(address)\":{\"params\":{\"_xProvider\":\"new address of xProvider on this chain\"}},\"setVaultChainAddress(uint256,uint16,address,address)\":{\"params\":{\"_address\":\"address of the Vault\",\"_chainId\":\"Number of chain used\",\"_underlying\":\"underlying of the Vault eg USDC\",\"_vaultNumber\":\"number of Vault\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDao()\":{\"notice\":\"Getter for dao address\"},\"getGuardian()\":{\"notice\":\"Getter for guardian address\"},\"getVaultChainIdOff(uint256,uint16)\":{\"notice\":\"Helper to get if vault is active or not\"},\"pushVaultAmounts(uint256)\":{\"notice\":\"Step 3 trigger; xChainController pushes exchangeRate and amount the vaults have to send back to all vaultsCalculates the amounts the vaults on each chainId have to send or receive\"},\"receiveAllocationsFromGame(uint256,int256[])\":{\"notice\":\"Step 1 end; Game pushes totalDeltaAllocations to xChainController\"},\"receiveAllocationsFromGameGuard(uint256,int256[])\":{\"notice\":\"Step 1: Guardian function\"},\"resetVaultStagesDao(uint256)\":{\"notice\":\"Resets all stages in vaultStage struct for a vaultNumber\"},\"sendFundsToVault(uint256)\":{\"notice\":\"Step 5 trigger; Push funds from xChainController to vaultsSend amount to deposit from xController to vault and reset all stages for the vault\"},\"setActiveVaultsGuard(uint256,uint256)\":{\"notice\":\"Guardian setter for number of active vaults for vaultNumber, set in xChainRebalance\"},\"setAllocationsReceivedGuard(uint256,bool)\":{\"notice\":\"Guardian setter for stage 1:\"},\"setChainIds(uint16[])\":{\"notice\":\"Setter for chainId array\"},\"setDao(address)\":{\"notice\":\"Setter for DAO address\"},\"setFundsReceivedGuard(uint256,uint256)\":{\"notice\":\"Step 4: Guardian function\"},\"setGame(address)\":{\"notice\":\"Setter for new game address\"},\"setGuardian(address)\":{\"notice\":\"Setter for guardian address\"},\"setHomeChainId(uint16)\":{\"notice\":\"Setter for homeChain Id\"},\"setHomeXProvider(address)\":{\"notice\":\"Setter for xProvider address\"},\"setReadyGuard(uint256,bool)\":{\"notice\":\"Guardian setter for stage 0:\"},\"setTotalUnderlying(uint256,uint16,uint256,uint256,uint256)\":{\"notice\":\"See setTotalUnderlyingInt below\"},\"setTotalUnderlyingGuard(uint256,uint16,uint256,uint256,uint256)\":{\"notice\":\"Step 2: Guardian function\"},\"setUnderlyingReceivedGuard(uint256,uint256)\":{\"notice\":\"Guardian setter to tick up stage 2:\"},\"setVaultChainAddress(uint256,uint16,address,address)\":{\"notice\":\"Set Vault address and underlying for a particulair chainId\"},\"upFundsReceived(uint256)\":{\"notice\":\"Step 4 end; Push funds from vaults to xChainControllerFundsReceived; funds received from all active vault contracts\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/XChainController.sol\":\"XChainController\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/Interfaces/IXProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IXProvider {\\n  function xCall(\\n    address _xProvider,\\n    uint16 _chainId,\\n    bytes memory _callData\\n  ) external;\\n\\n  function xSend(uint256 _value) external; // sending a (permissioned) value crosschain.\\n\\n  // function xSendCallback() external; // sending a (permissioned) vaule crosschain and receive a callback to a specified address.\\n  function xReceive(uint256 _value) external; // receiving a (permissioned) value crosschain.\\n\\n  function pushAllocations(uint256 _vaultNumber, int256[] memory _deltas) external;\\n\\n  function receiveTotalUnderlying(\\n    uint256 _vaultNumber,\\n    uint16 _chainId,\\n    uint256 _underlying\\n  ) external;\\n\\n  function pushSetXChainAllocation(\\n    address _vault,\\n    uint16 _chainId,\\n    uint256 _amountToWithdraw,\\n    uint256 _exchangeRate\\n  ) external;\\n\\n  function xTransferToController(\\n    uint256 _vaultNumber,\\n    uint256 _amount,\\n    address _asset\\n  ) external;\\n\\n  function receiveFeedbackToXController(uint256 _vaultNumber) external;\\n\\n  function xTransferToVaults(\\n    address _vault,\\n    uint16 _chainId,\\n    uint256 _amount,\\n    address _asset\\n  ) external;\\n\\n  function pushProtocolAllocationsToVault(\\n    uint16 _chainId,\\n    address _vault,\\n    int256[] memory _deltas\\n  ) external;\\n\\n  function getDecimals(address _vault) external view returns (uint256);\\n\\n  function pushTotalUnderlying(\\n    uint256 _vaultNumber,\\n    uint16 _chainId,\\n    uint256 _underlying,\\n    uint256 _totalSupply,\\n    uint256 _withdrawalRequests\\n  ) external;\\n\\n  function pushStateFeedbackToVault(\\n    address _vault,\\n    uint16 _chainId,\\n    bool _state\\n  ) external;\\n\\n  function pushRewardsToGame(\\n    uint256 _vaultNumber,\\n    uint16 _chainId,\\n    int256[] memory _rewards\\n  ) external;\\n\\n  function homeChain() external returns (uint16);\\n}\\n\",\"keccak256\":\"0x1b7248093668ce74745924d8c3d10815ea192e9ee65ac036282190dbc798231a\",\"license\":\"MIT\"},\"contracts/XChainController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"./Interfaces/IXProvider.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract XChainController {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  struct vaultInfo {\\r\\n    int256 totalCurrentAllocation;\\r\\n    uint256 totalUnderlying;\\r\\n    uint256 totalSupply;\\r\\n    uint256 totalWithdrawalRequests;\\r\\n    // (chainId => bool): true == off // false == on\\r\\n    mapping(uint16 => bool) chainIdOff;\\r\\n    // (chainId => currentAllocation)\\r\\n    mapping(uint16 => int256) currentAllocationPerChain;\\r\\n    // (chainId => totalUnderlying)\\r\\n    mapping(uint16 => uint256) totalUnderlyingPerChain;\\r\\n    // (chainId => vaultAddress)\\r\\n    mapping(uint16 => address) vaultChainAddress;\\r\\n    // (chainId => underlyingAddress): e.g USDC\\r\\n    mapping(uint16 => address) vaultUnderlyingAddress;\\r\\n    // (chainId => totalWithdrawalRequests): total withdrawal requests in LP Token\\r\\n    mapping(uint16 => uint256) withdrawalRequests;\\r\\n    // (chainId => amountToDeposit)\\r\\n    mapping(uint16 => uint256) amountToDepositPerChain;\\r\\n  }\\r\\n\\r\\n  // activeVaults; number of active vaults for vaultNumber, set in XChainRebalance\\r\\n  // stage 0 Ready; waiting for game to send allocations\\r\\n  // stage 1 AllocationsReceived; allocations received from game, ready to rebalance XChain and set activeVaults\\r\\n  // stage 2 UnderlyingReceived; underlyings received from all active vault contracts\\r\\n  // stage 3 FundsReceived; funds received from all active vault contracts\\r\\n  struct vaultStages {\\r\\n    uint256 activeVaults;\\r\\n    bool ready; // stage 0\\r\\n    bool allocationsReceived; // stage 1\\r\\n    uint256 underlyingReceived; // stage 2\\r\\n    uint256 fundsReceived; // stage 3\\r\\n  }\\r\\n\\r\\n  address private dao;\\r\\n  address private guardian;\\r\\n  address public game;\\r\\n  address public xProviderAddr;\\r\\n  IXProvider public xProvider;\\r\\n\\r\\n  uint16[] public chainIds;\\r\\n  uint16 public homeChain;\\r\\n\\r\\n  // (vaultNumber => vaultInfo struct)\\r\\n  mapping(uint256 => vaultInfo) internal vaults;\\r\\n  // (vaultNumber => vaultStages struct)\\r\\n  mapping(uint256 => vaultStages) public vaultStage;\\r\\n\\r\\n  event SendXChainAmount(\\r\\n    address _vault,\\r\\n    uint16 _chainId,\\r\\n    uint256 _amountToSendXChain,\\r\\n    uint256 _exchangeRate\\r\\n  );\\r\\n\\r\\n  event SentFundsToVault(address _vault, uint16 _chainId, uint256 _amount, address _asset);\\r\\n\\r\\n  modifier onlyGame() {\\r\\n    require(msg.sender == game, \\\"xController: only Game\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyDao() {\\r\\n    require(msg.sender == dao, \\\"xController: only DAO\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyGuardian() {\\r\\n    require(msg.sender == guardian, \\\"xController: only Guardian\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyXProvider() {\\r\\n    require(msg.sender == address(xProvider), \\\"xController: only xProviderAddr\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // vaultStage 0\\r\\n  modifier onlyWhenReady(uint256 _vaultNumber) {\\r\\n    require(vaultStage[_vaultNumber].ready, \\\"Not all vaults are ready\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // vaultStage 1\\r\\n  modifier onlyWhenAllocationsReceived(uint256 _vaultNumber) {\\r\\n    require(vaultStage[_vaultNumber].allocationsReceived, \\\"Allocations not received from game\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // vaultStage 2\\r\\n  modifier onlyWhenUnderlyingsReceived(uint256 _vaultNumber) {\\r\\n    require(\\r\\n      vaultStage[_vaultNumber].underlyingReceived == vaultStage[_vaultNumber].activeVaults,\\r\\n      \\\"Not all underlyings received\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  // vaultStage 3\\r\\n  modifier onlyWhenFundsReceived(uint256 _vaultNumber) {\\r\\n    require(\\r\\n      vaultStage[_vaultNumber].fundsReceived == vaultStage[_vaultNumber].activeVaults,\\r\\n      \\\"Not all funds received\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    address _game,\\r\\n    address _dao,\\r\\n    address _guardian,\\r\\n    uint16 _homeChain\\r\\n  ) {\\r\\n    game = _game;\\r\\n    dao = _dao;\\r\\n    guardian = _guardian;\\r\\n    homeChain = _homeChain;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for number of active vaults for vaultNumber, set in xChainRebalance\\r\\n  /// @param _vaultNumber Number of the vault\\r\\n  /// @param _activeVaults Number active vaults, calculated in xChainRebalance\\r\\n  function setActiveVaults(uint256 _vaultNumber, uint256 _activeVaults) internal {\\r\\n    vaultStage[_vaultNumber].activeVaults = _activeVaults;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for stage 0:\\r\\n  /// @notice Ready; waiting for game to send allocations\\r\\n  function setReady(uint256 _vaultNumber, bool _state) internal {\\r\\n    vaultStage[_vaultNumber].ready = _state;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for stage 1:\\r\\n  /// @notice AllocationsReceived; allocations received from game, ready to rebalance XChain and set activeVaults\\r\\n  function setAllocationsReceived(uint256 _vaultNumber, bool _state)\\r\\n    internal\\r\\n    onlyWhenReady(_vaultNumber)\\r\\n  {\\r\\n    vaultStage[_vaultNumber].allocationsReceived = _state;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter to tick up stage 2:\\r\\n  /// @notice UnderlyingReceived; underlyings received from all active vault contracts\\r\\n  function upUnderlyingReceived(uint256 _vaultNumber)\\r\\n    internal\\r\\n    onlyWhenAllocationsReceived(_vaultNumber)\\r\\n  {\\r\\n    vaultStage[_vaultNumber].underlyingReceived++;\\r\\n  }\\r\\n\\r\\n  /// @notice Step 4 end; Push funds from vaults to xChainController\\r\\n  /// @notice FundsReceived; funds received from all active vault contracts\\r\\n  function upFundsReceived(uint256 _vaultNumber)\\r\\n    external\\r\\n    onlyXProvider\\r\\n    onlyWhenUnderlyingsReceived(_vaultNumber)\\r\\n  {\\r\\n    vaultStage[_vaultNumber].fundsReceived++;\\r\\n  }\\r\\n\\r\\n  /// @notice Resets all stages in vaultStage struct for a vaultNumber\\r\\n  function resetVaultStages(uint256 _vaultNumber) internal {\\r\\n    vaultStage[_vaultNumber].ready = true;\\r\\n    vaultStage[_vaultNumber].allocationsReceived = false;\\r\\n    vaultStage[_vaultNumber].underlyingReceived = 0;\\r\\n    vaultStage[_vaultNumber].fundsReceived = 0;\\r\\n  }\\r\\n\\r\\n  /// @notice Resets underlying for a vaultNumber at the start of a rebalancing period\\r\\n  function resetVaultUnderlying(uint256 _vaultNumber) internal {\\r\\n    vaults[_vaultNumber].totalUnderlying = 0;\\r\\n    vaultStage[_vaultNumber].underlyingReceived = 0;\\r\\n  }\\r\\n\\r\\n  /// @notice Resets underlying for a vaultNumber per chainId at the start of a rebalancing period\\r\\n  function resetVaultUnderlyingForChain(uint256 _vaultNumber, uint16 _chainId) internal {\\r\\n    vaults[_vaultNumber].totalUnderlyingPerChain[_chainId] = 0;\\r\\n  }\\r\\n\\r\\n  /// @notice Step 1 end; Game pushes totalDeltaAllocations to xChainController\\r\\n  /// @param _vaultNumber Number of Vault\\r\\n  /// @param _deltas Delta allocations array received from game, indexes match chainIds[] set in this contract\\r\\n  function receiveAllocationsFromGame(uint256 _vaultNumber, int256[] memory _deltas)\\r\\n    external\\r\\n    onlyXProvider\\r\\n    onlyWhenReady(_vaultNumber)\\r\\n  {\\r\\n    return receiveAllocationsFromGameInt(_vaultNumber, _deltas);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 1 end; Game pushes totalDeltaAllocations to xChainController\\r\\n  /// @param _vaultNumber Number of Vault\\r\\n  /// @param _deltas Delta allocations array received from game, indexes match chainIds[] set in this contract\\r\\n  function receiveAllocationsFromGameInt(uint256 _vaultNumber, int256[] memory _deltas) internal {\\r\\n    uint256 activeVaults;\\r\\n\\r\\n    for (uint256 i = 0; i < chainIds.length; i++) {\\r\\n      uint16 chain = chainIds[i];\\r\\n      activeVaults += settleCurrentAllocation(_vaultNumber, chain, _deltas[i]);\\r\\n      resetVaultUnderlyingForChain(_vaultNumber, chain);\\r\\n    }\\r\\n\\r\\n    resetVaultUnderlying(_vaultNumber);\\r\\n    setActiveVaults(_vaultNumber, activeVaults);\\r\\n    setAllocationsReceived(_vaultNumber, true);\\r\\n    setReady(_vaultNumber, false);\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to settle the total current allocation with the delta allocations received from Game\\r\\n  /// @notice Will set a chainId on/off depending on the currentAllocation and incoming deltaAllocation\\r\\n  /// @dev if currentAllocation = 0 and deltaAllocation = 0, chainId will be set to Off and feedback will be send to vault\\r\\n  /// @param _vaultNumber Number of Vault\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _deltas Delta allocations array received from game, indexes match chainIds[] set in this contract\\r\\n  function settleCurrentAllocation(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    int256 _deltas\\r\\n  ) internal returns (uint256 activeVault) {\\r\\n    if (getCurrentAllocation(_vaultNumber, _chainId) == 0 && _deltas == 0) {\\r\\n      sendFeedbackToVault(_vaultNumber, _chainId, true);\\r\\n      activeVault = 0;\\r\\n    } else {\\r\\n      sendFeedbackToVault(_vaultNumber, _chainId, false);\\r\\n      activeVault = 1;\\r\\n    }\\r\\n\\r\\n    vaults[_vaultNumber].totalCurrentAllocation += _deltas;\\r\\n    vaults[_vaultNumber].currentAllocationPerChain[_chainId] += _deltas;\\r\\n\\r\\n    require(vaults[_vaultNumber].totalCurrentAllocation >= 0, \\\"Allocation underflow\\\");\\r\\n  }\\r\\n\\r\\n  /// @notice Will send feedback to the vault if it is turned on or off by settleCurrentAllocation\\r\\n  /// @param _state Bool if vault is turned on or off\\r\\n  function sendFeedbackToVault(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    bool _state\\r\\n  ) internal {\\r\\n    if (getVaultChainIdOff(_vaultNumber, _chainId) != _state) {\\r\\n      xProvider.pushStateFeedbackToVault(getVaultAddress(_vaultNumber, _chainId), _chainId, _state);\\r\\n\\r\\n      vaults[_vaultNumber].chainIdOff[_chainId] = _state;\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice See setTotalUnderlyingInt below\\r\\n  function setTotalUnderlying(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    uint256 _underlying,\\r\\n    uint256 _totalSupply,\\r\\n    uint256 _withdrawalRequests\\r\\n  ) external onlyXProvider onlyWhenAllocationsReceived(_vaultNumber) {\\r\\n    require(getTotalUnderlyingOnChain(_vaultNumber, _chainId) == 0, \\\"TotalUnderlying already set\\\");\\r\\n    setTotalUnderlyingInt(_vaultNumber, _chainId, _underlying, _totalSupply, _withdrawalRequests);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 2 end; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainController\\r\\n  /// @notice Receive and set totalUnderlyings from the vaults for every chainId\\r\\n  /// @param _vaultNumber number of the vault\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _underlying totalUnderling plus vault balance in vaultcurrency e.g USDC\\r\\n  /// @param _totalSupply Supply of the LP token of the vault on given chainId\\r\\n  /// @param _withdrawalRequests Total amount of withdrawal requests from the vault in LP Tokens\\r\\n  function setTotalUnderlyingInt(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    uint256 _underlying,\\r\\n    uint256 _totalSupply,\\r\\n    uint256 _withdrawalRequests\\r\\n  ) internal {\\r\\n    vaults[_vaultNumber].totalUnderlyingPerChain[_chainId] = _underlying;\\r\\n    vaults[_vaultNumber].withdrawalRequests[_chainId] = _withdrawalRequests;\\r\\n    vaults[_vaultNumber].totalSupply += _totalSupply;\\r\\n    vaults[_vaultNumber].totalUnderlying += _underlying;\\r\\n    vaults[_vaultNumber].totalWithdrawalRequests += _withdrawalRequests;\\r\\n    vaultStage[_vaultNumber].underlyingReceived++;\\r\\n  }\\r\\n\\r\\n  /// @notice Step 3 trigger; xChainController pushes exchangeRate and amount the vaults have to send back to all vaults\\r\\n  /// @notice Calculates the amounts the vaults on each chainId have to send or receive\\r\\n  /// @param _vaultNumber Number of vault\\r\\n  function pushVaultAmounts(uint256 _vaultNumber)\\r\\n    external\\r\\n    onlyWhenUnderlyingsReceived(_vaultNumber)\\r\\n  {\\r\\n    int256 totalAllocation = getCurrentTotalAllocation(_vaultNumber);\\r\\n    uint256 totalWithdrawalRequests = getTotalWithdrawalRequests(_vaultNumber);\\r\\n    uint256 totalUnderlying = getTotalUnderlyingVault(_vaultNumber) - totalWithdrawalRequests;\\r\\n    uint256 totalSupply = getTotalSupply(_vaultNumber);\\r\\n\\r\\n    uint256 decimals = xProvider.getDecimals(getVaultAddress(_vaultNumber, homeChain));\\r\\n    uint256 newExchangeRate = (totalUnderlying * (10**decimals)) / totalSupply;\\r\\n\\r\\n    for (uint i = 0; i < chainIds.length; i++) {\\r\\n      uint16 chain = chainIds[i];\\r\\n      if (getVaultChainIdOff(_vaultNumber, chain)) continue;\\r\\n\\r\\n      int256 amountToChain = calcAmountToChain(\\r\\n        _vaultNumber,\\r\\n        chain,\\r\\n        totalUnderlying,\\r\\n        totalAllocation\\r\\n      );\\r\\n      (int256 amountToDeposit, uint256 amountToWithdraw) = calcDepositWithdraw(\\r\\n        _vaultNumber,\\r\\n        chain,\\r\\n        amountToChain\\r\\n      );\\r\\n\\r\\n      sendXChainAmount(_vaultNumber, chain, amountToDeposit, amountToWithdraw, newExchangeRate);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the amounts the vaults on each chainId have to send or receive\\r\\n  /// @param _vaultNumber number of the vault\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _amountToChain Amount in vaultcurrency that should be on given chainId\\r\\n  function calcDepositWithdraw(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    int256 _amountToChain\\r\\n  ) internal view returns (int256, uint256) {\\r\\n    uint256 currentUnderlying = getTotalUnderlyingOnChain(_vaultNumber, _chainId);\\r\\n\\r\\n    int256 amountToDeposit = _amountToChain - int256(currentUnderlying);\\r\\n    uint256 amountToWithdraw = amountToDeposit < 0\\r\\n      ? currentUnderlying - uint256(_amountToChain)\\r\\n      : 0;\\r\\n\\r\\n    return (amountToDeposit, amountToWithdraw);\\r\\n  }\\r\\n\\r\\n  /// @notice Calculates the amounts the vaults has to send back to the xChainController\\r\\n  /// @param _totalUnderlying Total underlying on all chains for given vaultNumber\\r\\n  /// @param _totalAllocation Total allocation on all chains for given vaultNumber\\r\\n  function calcAmountToChain(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    uint256 _totalUnderlying,\\r\\n    int256 _totalAllocation\\r\\n  ) internal view returns (int256) {\\r\\n    int256 allocation = getCurrentAllocation(_vaultNumber, _chainId);\\r\\n    uint256 withdrawalRequests = getWithdrawalRequests(_vaultNumber, _chainId);\\r\\n\\r\\n    int256 amountToChain = (int(_totalUnderlying) * allocation) / _totalAllocation;\\r\\n    amountToChain += int(withdrawalRequests);\\r\\n\\r\\n    return amountToChain;\\r\\n  }\\r\\n\\r\\n  /// @notice Sends out cross-chain messages to vaults with the amount the vault has to send back\\r\\n  /// @dev if the xChainController needs to deposit, the amount will be 0 so the vault knows it will receive currency\\r\\n  /// @param _amountDeposit Amount the vault will receive from the xChainController\\r\\n  /// @param _amountToWithdraw Amount the vault will have to send back to the xChainController\\r\\n  /// @param _exchangeRate New exchangerate for vaults\\r\\n  function sendXChainAmount(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    int256 _amountDeposit,\\r\\n    uint256 _amountToWithdraw,\\r\\n    uint256 _exchangeRate\\r\\n  ) internal {\\r\\n    address vault = getVaultAddress(_vaultNumber, _chainId);\\r\\n\\r\\n    if (_amountDeposit > 0) {\\r\\n      setAmountToDeposit(_vaultNumber, _chainId, _amountDeposit);\\r\\n      xProvider.pushSetXChainAllocation(vault, _chainId, 0, _exchangeRate);\\r\\n      vaultStage[_vaultNumber].fundsReceived++;\\r\\n      emit SendXChainAmount(vault, _chainId, 0, _exchangeRate);\\r\\n    }\\r\\n\\r\\n    if (_amountToWithdraw > 0) {\\r\\n      xProvider.pushSetXChainAllocation(vault, _chainId, _amountToWithdraw, _exchangeRate);\\r\\n      emit SendXChainAmount(vault, _chainId, _amountToWithdraw, _exchangeRate);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Step 5 trigger; Push funds from xChainController to vaults\\r\\n  /// @notice Send amount to deposit from xController to vault and reset all stages for the vault\\r\\n  /// @param _vaultNumber Number of vault\\r\\n  function sendFundsToVault(uint256 _vaultNumber) external onlyWhenFundsReceived(_vaultNumber) {\\r\\n    for (uint i = 0; i < chainIds.length; i++) {\\r\\n      uint16 chain = chainIds[i];\\r\\n      if (getVaultChainIdOff(_vaultNumber, chain)) continue;\\r\\n\\r\\n      uint256 amountToDeposit = getAmountToDeposit(_vaultNumber, chain);\\r\\n\\r\\n      if (amountToDeposit > 0) {\\r\\n        address underlying = getUnderlyingAddress(_vaultNumber, chain);\\r\\n        address vault = getVaultAddress(_vaultNumber, chain);\\r\\n\\r\\n        IERC20(underlying).safeIncreaseAllowance(address(xProvider), amountToDeposit);\\r\\n        xProvider.xTransferToVaults(vault, chain, amountToDeposit, underlying);\\r\\n        setAmountToDeposit(_vaultNumber, chain, 0);\\r\\n\\r\\n        emit SentFundsToVault(vault, chain, amountToDeposit, underlying);\\r\\n      }\\r\\n    }\\r\\n\\r\\n    resetVaultStages(_vaultNumber);\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get total current allocation of vaultNumber\\r\\n  function getTotalUnderlyingOnChain(uint256 _vaultNumber, uint16 _chainId)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return vaults[_vaultNumber].totalUnderlyingPerChain[_chainId];\\r\\n  }\\r\\n\\r\\n  /// @notice Gets saved totalUnderlying for vaultNumber\\r\\n  function getTotalUnderlyingVault(uint256 _vaultNumber)\\r\\n    internal\\r\\n    view\\r\\n    onlyWhenUnderlyingsReceived(_vaultNumber)\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return vaults[_vaultNumber].totalUnderlying;\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get vault address of vaultNumber with given chainID\\r\\n  function getVaultAddress(uint256 _vaultNumber, uint16 _chainId) internal view returns (address) {\\r\\n    return vaults[_vaultNumber].vaultChainAddress[_chainId];\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get underyling address of vaultNumber with given chainID eg USDC\\r\\n  function getUnderlyingAddress(uint256 _vaultNumber, uint16 _chainId)\\r\\n    internal\\r\\n    view\\r\\n    returns (address)\\r\\n  {\\r\\n    return vaults[_vaultNumber].vaultUnderlyingAddress[_chainId];\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get current allocation per chain of vaultNumber with given chainID\\r\\n  function getCurrentAllocation(uint256 _vaultNumber, uint16 _chainId)\\r\\n    internal\\r\\n    view\\r\\n    returns (int256)\\r\\n  {\\r\\n    return vaults[_vaultNumber].currentAllocationPerChain[_chainId];\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get total current allocation of vaultNumber\\r\\n  function getCurrentTotalAllocation(uint256 _vaultNumber) internal view returns (int256) {\\r\\n    return vaults[_vaultNumber].totalCurrentAllocation;\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get if vault is active or not\\r\\n  function getVaultChainIdOff(uint256 _vaultNumber, uint16 _chainId) public view returns (bool) {\\r\\n    return vaults[_vaultNumber].chainIdOff[_chainId];\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to set the amount to deposit in a chain vault\\r\\n  function setAmountToDeposit(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    int256 _amountToDeposit\\r\\n  ) internal {\\r\\n    vaults[_vaultNumber].amountToDepositPerChain[_chainId] = uint256(_amountToDeposit);\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get the amount to deposit in a chain vault\\r\\n  function getAmountToDeposit(uint256 _vaultNumber, uint16 _chainId)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return vaults[_vaultNumber].amountToDepositPerChain[_chainId];\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get total supply from the vault on given chainId\\r\\n  function getTotalSupply(uint256 _vaultNumber) internal view returns (uint256) {\\r\\n    return vaults[_vaultNumber].totalSupply;\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get withdrawal requests from the vault on given chainId\\r\\n  function getWithdrawalRequests(uint256 _vaultNumber, uint16 _chainId)\\r\\n    internal\\r\\n    view\\r\\n    returns (uint256)\\r\\n  {\\r\\n    return vaults[_vaultNumber].withdrawalRequests[_chainId];\\r\\n  }\\r\\n\\r\\n  /// @notice Helper to get total withdrawal requests from the vault on given chainId\\r\\n  function getTotalWithdrawalRequests(uint256 _vaultNumber) internal view returns (uint256) {\\r\\n    return vaults[_vaultNumber].totalWithdrawalRequests;\\r\\n  }\\r\\n\\r\\n  /// @notice Getter for dao address\\r\\n  function getDao() public view returns (address) {\\r\\n    return dao;\\r\\n  }\\r\\n\\r\\n  /// @notice Getter for guardian address\\r\\n  function getGuardian() public view returns (address) {\\r\\n    return guardian;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n  Only Dao functions\\r\\n  */\\r\\n\\r\\n  /// @notice Set Vault address and underlying for a particulair chainId\\r\\n  /// @param _vaultNumber number of Vault\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _address address of the Vault\\r\\n  /// @param _underlying underlying of the Vault eg USDC\\r\\n  function setVaultChainAddress(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    address _address,\\r\\n    address _underlying\\r\\n  ) external onlyDao {\\r\\n    vaults[_vaultNumber].vaultChainAddress[_chainId] = _address;\\r\\n    vaults[_vaultNumber].vaultUnderlyingAddress[_chainId] = _underlying;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for xProvider address\\r\\n  /// @param _xProvider new address of xProvider on this chain\\r\\n  function setHomeXProvider(address _xProvider) external onlyDao {\\r\\n    xProvider = IXProvider(_xProvider);\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for homeChain Id\\r\\n  /// @param _homeChainId New home chainId\\r\\n  function setHomeChainId(uint16 _homeChainId) external onlyDao {\\r\\n    homeChain = _homeChainId;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for DAO address\\r\\n  /// @param _dao DAO address\\r\\n  function setDao(address _dao) external onlyDao {\\r\\n    dao = _dao;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for guardian address\\r\\n  /// @param _guardian new address of the guardian\\r\\n  function setGuardian(address _guardian) external onlyDao {\\r\\n    guardian = _guardian;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for new game address\\r\\n  /// @param _game New address of the game\\r\\n  function setGame(address _game) external onlyDao {\\r\\n    game = _game;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n  Only Guardian functions\\r\\n  */\\r\\n\\r\\n  /// @notice Setter for chainId array\\r\\n  /// @param _chainIds array of all the used chainIds\\r\\n  function setChainIds(uint16[] memory _chainIds) external onlyGuardian {\\r\\n    chainIds = _chainIds;\\r\\n  }\\r\\n\\r\\n  /// @notice Resets all stages in vaultStage struct for a vaultNumber\\r\\n  /// @dev onlyDao modifier so the dao can reset all stages for a vaultNumber incase something goes wrong\\r\\n  function resetVaultStagesDao(uint256 _vaultNumber) external onlyGuardian {\\r\\n    return resetVaultStages(_vaultNumber);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 1: Guardian function\\r\\n  function receiveAllocationsFromGameGuard(uint256 _vaultNumber, int256[] memory _deltas)\\r\\n    external\\r\\n    onlyGuardian\\r\\n  {\\r\\n    return receiveAllocationsFromGameInt(_vaultNumber, _deltas);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 2: Guardian function\\r\\n  function setTotalUnderlyingGuard(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    uint256 _underlying,\\r\\n    uint256 _totalSupply,\\r\\n    uint256 _withdrawalRequests\\r\\n  ) external onlyGuardian {\\r\\n    return\\r\\n      setTotalUnderlyingInt(_vaultNumber, _chainId, _underlying, _totalSupply, _withdrawalRequests);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 4: Guardian function\\r\\n  function setFundsReceivedGuard(uint256 _vaultNumber, uint256 _fundsReceived)\\r\\n    external\\r\\n    onlyGuardian\\r\\n  {\\r\\n    vaultStage[_vaultNumber].fundsReceived = _fundsReceived;\\r\\n  }\\r\\n\\r\\n  /// @notice Guardian setter for number of active vaults for vaultNumber, set in xChainRebalance\\r\\n  function setActiveVaultsGuard(uint256 _vaultNumber, uint256 _activeVaults) external onlyGuardian {\\r\\n    vaultStage[_vaultNumber].activeVaults = _activeVaults;\\r\\n  }\\r\\n\\r\\n  /// @notice Guardian setter for stage 0:\\r\\n  function setReadyGuard(uint256 _vaultNumber, bool _state) external onlyGuardian {\\r\\n    vaultStage[_vaultNumber].ready = _state;\\r\\n  }\\r\\n\\r\\n  /// @notice Guardian setter for stage 1:\\r\\n  function setAllocationsReceivedGuard(uint256 _vaultNumber, bool _state) external onlyGuardian {\\r\\n    vaultStage[_vaultNumber].allocationsReceived = _state;\\r\\n  }\\r\\n\\r\\n  /// @notice Guardian setter to tick up stage 2:\\r\\n  function setUnderlyingReceivedGuard(uint256 _vaultNumber, uint256 _underlyingReceived)\\r\\n    external\\r\\n    onlyGuardian\\r\\n  {\\r\\n    vaultStage[_vaultNumber].underlyingReceived = _underlyingReceived;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x91f2cb113a28c8737f5b9bd60eaec1bffe3250b6dbc1ccc48d57fdf9b85a5409\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162002322380380620023228339810160408190526200003491620000a9565b600280546001600160a01b03199081166001600160a01b03968716179091556000805482169486169490941790935560018054909316919093161790556006805461ffff191661ffff9092169190911790556200010e565b80516001600160a01b0381168114620000a457600080fd5b919050565b60008060008060808587031215620000c057600080fd5b620000cb856200008c565b9350620000db602086016200008c565b9250620000eb604086016200008c565b9150606085015161ffff811681146200010357600080fd5b939692955090935050565b612204806200011e6000396000f3fe608060405234801561001057600080fd5b506004361061015f5760003560e01c806321d930901461016457806324b679701461018f57806324ce881f146101a457806327e3a685146101b757806349bc7c28146101ca5780635519f027146101dd578063621e62f2146101f05780636637b882146102035780637468a52b14610216578063814244ab14610224578063814361ce14610237578063819912a21461024a5780638319e1cf1461025d578063888494e2146102805780638a0dac4a14610293578063a75b87d2146102a6578063a9ff3618146102c0578063ab266586146102d3578063b6f57b59146102e6578063b70811bc14610356578063bc9c746e14610367578063c3fe3e281461037a578063cc76aa7a1461038d578063ce1a3286146103a0578063dd692af3146103b3578063e0ba555e146103c6578063f113c5b1146103d9578063f6d53d7b146103ec578063fdba466e146103ff575b600080fd5b61017761017236600461197a565b610412565b60405161ffff90911681526020015b60405180910390f35b6101a261019d3660046119af565b61044a565b005b6101a26101b23660046119dc565b61049f565b6101a26101c536600461197a565b6105a6565b6101a26101d8366004611a22565b6107b0565b6101a26101eb366004611aa6565b6107f2565b6101a26101fe366004611b55565b610826565b6101a26102113660046119af565b61087a565b6006546101779061ffff1681565b6101a2610232366004611b85565b6108c6565b6101a2610245366004611bd2565b610948565b6101a26102583660046119af565b610985565b61027061026b366004611c5e565b6109d1565b6040519015158152602001610186565b6101a261028e366004611aa6565b6109fc565b6101a26102a13660046119af565b610a68565b6001546001600160a01b03165b6040516101869190611c8a565b6101a26102ce366004611b55565b610ab4565b6101a26102e136600461197a565b610b01565b6103276102f436600461197a565b6008602052600090815260409020805460018201546002830154600390930154919260ff80831693610100909304169185565b604051610186959493929190948552921515602085015290151560408401526060830152608082015260a00190565b6000546001600160a01b03166102b3565b6003546102b3906001600160a01b031681565b6002546102b3906001600160a01b031681565b6101a261039b366004611c9e565b610b37565b6101a26103ae366004611c9e565b610b73565b6101a26103c1366004611c9e565b610bb2565b6101a26103d436600461197a565b610bf1565b6101a26103e73660046119dc565b610dc1565b6101a26103fa36600461197a565b610dff565b6004546102b3906001600160a01b031681565b6005818154811061042257600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b6000546001600160a01b0316331461047d5760405162461bcd60e51b815260040161047490611cc0565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146104c95760405162461bcd60e51b815260040161047490611cef565b6000858152600860205260409020600101548590610100900460ff1661053c5760405162461bcd60e51b815260206004820152602260248201527f416c6c6f636174696f6e73206e6f742072656365697665642066726f6d2067616044820152616d6560f01b6064820152608401610474565b6105468686610e84565b156105915760405162461bcd60e51b815260206004820152601b60248201527a151bdd185b155b99195c9b1e5a5b99c8185b1c9958591e481cd95d602a1b6044820152606401610474565b61059e8686868686610eab565b505050505050565b600081815260086020526040902080546003909101548291146106045760405162461bcd60e51b8152602060048201526016602482015275139bdd08185b1b08199d5b991cc81c9958d95a5d995960521b6044820152606401610474565b60005b6005548110156107a25760006005828154811061062657610626611d26565b90600052602060002090601091828204019190066002029054906101000a900461ffff16905061065684826109d1565b156106615750610790565b600084815260076020908152604080832061ffff85168452600a01909152902054801561078d57600085815260076020908152604080832061ffff861684526008019091528120546001600160a01b0316906106bd8785610f6e565b6004549091506106da906001600160a01b03848116911685610f9d565b6004805460405163839436d360e01b81526001600160a01b039091169163839436d39161070f91859189918991899101611d3c565b600060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b5050505061074d87856000611077565b7f6f323bba615785e34a38601fef2e179257caee4ab2508c9d1a4813ee99c4fd99818585856040516107829493929190611d3c565b60405180910390a150505b50505b8061079a81611d81565b915050610607565b506107ac8261109c565b5050565b6000546001600160a01b031633146107da5760405162461bcd60e51b815260040161047490611cc0565b6006805461ffff191661ffff92909216919091179055565b6001546001600160a01b0316331461081c5760405162461bcd60e51b815260040161047490611d9c565b6107ac82826110c8565b6001546001600160a01b031633146108505760405162461bcd60e51b815260040161047490611d9c565b60009182526008602052604090912060010180549115156101000261ff0019909216919091179055565b6000546001600160a01b031633146108a45760405162461bcd60e51b815260040161047490611cc0565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108f05760405162461bcd60e51b815260040161047490611cc0565b600093845260076020818152604080872061ffff969096168752918501815281862080546001600160a01b03199081166001600160a01b03968716179091556008909501905290932080549092169216919091179055565b6001546001600160a01b031633146109725760405162461bcd60e51b815260040161047490611d9c565b80516107ac9060059060208401906118bc565b6000546001600160a01b031633146109af5760405162461bcd60e51b815260040161047490611cc0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260076020908152604080832061ffff8516845260040190915290205460ff165b92915050565b6004546001600160a01b03163314610a265760405162461bcd60e51b815260040161047490611cef565b600082815260086020526040902060010154829060ff16610a595760405162461bcd60e51b815260040161047490611dd0565b610a6383836110c8565b505050565b6000546001600160a01b03163314610a925760405162461bcd60e51b815260040161047490611cc0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610ade5760405162461bcd60e51b815260040161047490611d9c565b600091825260086020526040909120600101805460ff1916911515919091179055565b6001546001600160a01b03163314610b2b5760405162461bcd60e51b815260040161047490611d9c565b610b348161109c565b50565b6001546001600160a01b03163314610b615760405162461bcd60e51b815260040161047490611d9c565b60009182526008602052604090912055565b6001546001600160a01b03163314610b9d5760405162461bcd60e51b815260040161047490611d9c565b60009182526008602052604090912060020155565b6001546001600160a01b03163314610bdc5760405162461bcd60e51b815260040161047490611d9c565b60009182526008602052604090912060030155565b60008181526008602052604090208054600290910154829114610c265760405162461bcd60e51b815260040161047490611e02565b60008281526007602052604081208054600390910154909181610c48866111b8565b610c529190611e38565b60008681526007602052604081206002015460045460065493945090926001600160a01b039091169063cf54aaa090610c90908a9061ffff16610f6e565b6040518263ffffffff1660e01b8152600401610cac9190611c8a565b602060405180830381865afa158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ced9190611e4f565b9050600082610cfd83600a611f4c565b610d079086611f58565b610d119190611f8d565b905060005b600554811015610db657600060058281548110610d3557610d35611d26565b90600052602060002090601091828204019190066002029054906101000a900461ffff169050610d658a826109d1565b15610d705750610da4565b6000610d7e8b83898c611204565b9050600080610d8e8d8585611262565b91509150610d9f8d8584848a6112aa565b505050505b80610dae81611d81565b915050610d16565b505050505050505050565b6001546001600160a01b03163314610deb5760405162461bcd60e51b815260040161047490611d9c565b610df88585858585610eab565b5050505050565b6004546001600160a01b03163314610e295760405162461bcd60e51b815260040161047490611cef565b60008181526008602052604090208054600290910154829114610e5e5760405162461bcd60e51b815260040161047490611e02565b6000828152600860205260408120600301805491610e7b83611d81565b91905055505050565b600082815260076020908152604080832061ffff8516845260060190915290205492915050565b600085815260076020818152604080842061ffff891685526006810183528185208890556009810183529084208590558884529190526002018054849290610ef4908490611fa1565b909155505060008581526007602052604081206001018054859290610f1a908490611fa1565b909155505060008581526007602052604081206003018054839290610f40908490611fa1565b90915550506000858152600860205260408120600201805491610f6283611d81565b91905055505050505050565b600082815260076020818152604080842061ffff8616855290920190529020546001600160a01b031692915050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110129190611e4f565b61101c9190611fa1565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150611071908590611424565b50505050565b600092835260076020908152604080852061ffff9094168552600a9093019052912055565b60009081526008602052604081206001818101805461ffff191690911790556002810182905560030155565b6000805b600554811015611175576000600582815481106110eb576110eb611d26565b90600052602060002090601091828204019190066002029054906101000a900461ffff169050611135858286858151811061112857611128611d26565b60200260200101516114f6565b61113f9084611fa1565b600086815260076020908152604080832061ffff861684526006019091528120559250508061116d81611d81565b9150506110cc565b5060008381526007602090815260408083206001908101849055600890925282206002810192909255908290556111ad9084906115e9565b610a63836000610ade565b600081815260086020526040812080546002909101548391146111ed5760405162461bcd60e51b815260040161047490611e02565b505060009081526007602052604090206001015490565b6000806112118686611647565b600087815260076020908152604080832061ffff8a168452600901909152812054919250846112408488611fb9565b61124a919061203e565b9050611256828261206c565b98975050505050505050565b60008060006112718686610e84565b9050600061127f82866120ad565b9050600080821261129157600061129b565b61129b8684611e38565b91989197509095505050505050565b60006112b68686610f6e565b90506000841315611384576112cc868686611077565b6004805460405163180b113d60e11b81526001600160a01b0390911691633016227a916113029185918a916000918991016120ec565b600060405180830381600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b5050506000878152600860205260408120600301805492509061135283611d81565b91905055506000805160206121af833981519152818660008560405161137b94939291906120ec565b60405180910390a15b821561059e576004805460405163180b113d60e11b81526001600160a01b0390911691633016227a916113bf9185918a9189918991016120ec565b600060405180830381600087803b1580156113d957600080fd5b505af11580156113ed573d6000803e3d6000fd5b505050506000805160206121af8339815191528186858560405161141494939291906120ec565b60405180910390a1505050505050565b6000611479826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661166e9092919063ffffffff16565b805190915015610a6357808060200190518101906114979190612116565b610a635760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610474565b60006115028484611647565b15801561150d575081155b156115265761151e84846001611685565b506000611536565b61153284846000611685565b5060015b6000848152600760205260408120805484929061155490849061206c565b9091555050600084815260076020908152604080832061ffff871684526005019091528120805484929061158990849061206c565b909155505060008481526007602052604081205412156115e25760405162461bcd60e51b8152602060048201526014602482015273416c6c6f636174696f6e20756e646572666c6f7760601b6044820152606401610474565b9392505050565b600082815260086020526040902060010154829060ff1661161c5760405162461bcd60e51b815260040161047490611dd0565b5060009182526008602052604090912060010180549115156101000261ff0019909216919091179055565b600082815260076020908152604080832061ffff8516845260050190915290205492915050565b606061167d8484600085611752565b949350505050565b80151561169284846109d1565b151514610a63576004546001600160a01b0316639951d33d6116b48585610f6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015261ffff851660248201528315156044820152606401600060405180830381600087803b15801561170757600080fd5b505af115801561171b573d6000803e3d6000fd5b505050600084815260076020908152604080832061ffff871684526004019091529020805483151560ff1990911617905550505050565b6060824710156117b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610474565b6001600160a01b0385163b61180a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610474565b600080866001600160a01b03168587604051611826919061215f565b60006040518083038185875af1925050503d8060008114611863576040519150601f19603f3d011682016040523d82523d6000602084013e611868565b606091505b5091509150611878828286611883565b979650505050505050565b606083156118925750816115e2565b8251156118a25782518084602001fd5b8160405162461bcd60e51b8152600401610474919061217b565b82805482825590600052602060002090600f016010900481019282156119555791602002820160005b8382111561192557835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026118e5565b80156119535782816101000a81549061ffff0219169055600201602081600101049283019260010302611925565b505b50611961929150611965565b5090565b5b808211156119615760008155600101611966565b60006020828403121561198c57600080fd5b5035919050565b80356001600160a01b03811681146119aa57600080fd5b919050565b6000602082840312156119c157600080fd5b6115e282611993565b803561ffff811681146119aa57600080fd5b600080600080600060a086880312156119f457600080fd5b85359450611a04602087016119ca565b94979496505050506040830135926060810135926080909101359150565b600060208284031215611a3457600080fd5b6115e2826119ca565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611a7b57611a7b611a3d565b604052919050565b60006001600160401b03821115611a9c57611a9c611a3d565b5060051b60200190565b60008060408385031215611ab957600080fd5b823591506020808401356001600160401b03811115611ad757600080fd5b8401601f81018613611ae857600080fd5b8035611afb611af682611a83565b611a53565b81815260059190911b82018301908381019088831115611b1a57600080fd5b928401925b82841015611b3857833582529284019290840190611b1f565b80955050505050509250929050565b8015158114610b3457600080fd5b60008060408385031215611b6857600080fd5b823591506020830135611b7a81611b47565b809150509250929050565b60008060008060808587031215611b9b57600080fd5b84359350611bab602086016119ca565b9250611bb960408601611993565b9150611bc760608601611993565b905092959194509250565b60006020808385031215611be557600080fd5b82356001600160401b03811115611bfb57600080fd5b8301601f81018513611c0c57600080fd5b8035611c1a611af682611a83565b81815260059190911b82018301908381019087831115611c3957600080fd5b928401925b8284101561187857611c4f846119ca565b82529284019290840190611c3e565b60008060408385031215611c7157600080fd5b82359150611c81602084016119ca565b90509250929050565b6001600160a01b0391909116815260200190565b60008060408385031215611cb157600080fd5b50508035926020909101359150565b60208082526015908201527478436f6e74726f6c6c65723a206f6e6c792044414f60581b604082015260600190565b6020808252601f908201527f78436f6e74726f6c6c65723a206f6e6c79207850726f76696465724164647200604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03948516815261ffff9390931660208401526040830191909152909116606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611d9557611d95611d6b565b5060010190565b6020808252601a90820152793c21b7b73a3937b63632b91d1037b7363c9023bab0b93234b0b760311b604082015260600190565b6020808252601890820152774e6f7420616c6c207661756c74732061726520726561647960401b604082015260600190565b6020808252601c908201527b139bdd08185b1b081d5b99195c9b1e5a5b99dcc81c9958d95a5d995960221b604082015260600190565b600082821015611e4a57611e4a611d6b565b500390565b600060208284031215611e6157600080fd5b5051919050565b600181815b80851115611ea3578160001904821115611e8957611e89611d6b565b80851615611e9657918102915b93841c9390800290611e6d565b509250929050565b600082611eba575060016109f6565b81611ec7575060006109f6565b8160018114611edd5760028114611ee757611f03565b60019150506109f6565b60ff841115611ef857611ef8611d6b565b50506001821b6109f6565b5060208310610133831016604e8410600b8410161715611f26575081810a6109f6565b611f308383611e68565b8060001904821115611f4457611f44611d6b565b029392505050565b60006115e28383611eab565b6000816000190483118215151615611f7257611f72611d6b565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611f9c57611f9c611f77565b500490565b60008219821115611fb457611fb4611d6b565b500190565b60006001600160ff1b0381841382841380821686840486111615611fdf57611fdf611d6b565b600160ff1b6000871282811687830589121615611ffe57611ffe611d6b565b6000871292508782058712848416161561201a5761201a611d6b565b8785058712818416161561203057612030611d6b565b505050929093029392505050565b60008261204d5761204d611f77565b600160ff1b82146000198414161561206757612067611d6b565b500590565b600080821280156001600160ff1b038490038513161561208e5761208e611d6b565b600160ff1b83900384128116156120a7576120a7611d6b565b50500190565b60008083128015600160ff1b8501841216156120cb576120cb611d6b565b6001600160ff1b03840183138116156120e6576120e6611d6b565b50500390565b6001600160a01b0394909416845261ffff9290921660208401526040830152606082015260800190565b60006020828403121561212857600080fd5b81516115e281611b47565b60005b8381101561214e578181015183820152602001612136565b838111156110715750506000910152565b60008251612171818460208701612133565b9190910192915050565b602081526000825180602084015261219a816040850160208701612133565b601f01601f1916919091016040019291505056fe568a278f594c7d5fdf5cacdc2887764e3a751a7e347f8c56236a92fc133ea0afa2646970667358221220124a2124ebec8e14c2df8c025d1dad9234db7b0367ed49b8e5edad668f1dc59b64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061015f5760003560e01c806321d930901461016457806324b679701461018f57806324ce881f146101a457806327e3a685146101b757806349bc7c28146101ca5780635519f027146101dd578063621e62f2146101f05780636637b882146102035780637468a52b14610216578063814244ab14610224578063814361ce14610237578063819912a21461024a5780638319e1cf1461025d578063888494e2146102805780638a0dac4a14610293578063a75b87d2146102a6578063a9ff3618146102c0578063ab266586146102d3578063b6f57b59146102e6578063b70811bc14610356578063bc9c746e14610367578063c3fe3e281461037a578063cc76aa7a1461038d578063ce1a3286146103a0578063dd692af3146103b3578063e0ba555e146103c6578063f113c5b1146103d9578063f6d53d7b146103ec578063fdba466e146103ff575b600080fd5b61017761017236600461197a565b610412565b60405161ffff90911681526020015b60405180910390f35b6101a261019d3660046119af565b61044a565b005b6101a26101b23660046119dc565b61049f565b6101a26101c536600461197a565b6105a6565b6101a26101d8366004611a22565b6107b0565b6101a26101eb366004611aa6565b6107f2565b6101a26101fe366004611b55565b610826565b6101a26102113660046119af565b61087a565b6006546101779061ffff1681565b6101a2610232366004611b85565b6108c6565b6101a2610245366004611bd2565b610948565b6101a26102583660046119af565b610985565b61027061026b366004611c5e565b6109d1565b6040519015158152602001610186565b6101a261028e366004611aa6565b6109fc565b6101a26102a13660046119af565b610a68565b6001546001600160a01b03165b6040516101869190611c8a565b6101a26102ce366004611b55565b610ab4565b6101a26102e136600461197a565b610b01565b6103276102f436600461197a565b6008602052600090815260409020805460018201546002830154600390930154919260ff80831693610100909304169185565b604051610186959493929190948552921515602085015290151560408401526060830152608082015260a00190565b6000546001600160a01b03166102b3565b6003546102b3906001600160a01b031681565b6002546102b3906001600160a01b031681565b6101a261039b366004611c9e565b610b37565b6101a26103ae366004611c9e565b610b73565b6101a26103c1366004611c9e565b610bb2565b6101a26103d436600461197a565b610bf1565b6101a26103e73660046119dc565b610dc1565b6101a26103fa36600461197a565b610dff565b6004546102b3906001600160a01b031681565b6005818154811061042257600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b6000546001600160a01b0316331461047d5760405162461bcd60e51b815260040161047490611cc0565b60405180910390fd5b600480546001600160a01b0319166001600160a01b0392909216919091179055565b6004546001600160a01b031633146104c95760405162461bcd60e51b815260040161047490611cef565b6000858152600860205260409020600101548590610100900460ff1661053c5760405162461bcd60e51b815260206004820152602260248201527f416c6c6f636174696f6e73206e6f742072656365697665642066726f6d2067616044820152616d6560f01b6064820152608401610474565b6105468686610e84565b156105915760405162461bcd60e51b815260206004820152601b60248201527a151bdd185b155b99195c9b1e5a5b99c8185b1c9958591e481cd95d602a1b6044820152606401610474565b61059e8686868686610eab565b505050505050565b600081815260086020526040902080546003909101548291146106045760405162461bcd60e51b8152602060048201526016602482015275139bdd08185b1b08199d5b991cc81c9958d95a5d995960521b6044820152606401610474565b60005b6005548110156107a25760006005828154811061062657610626611d26565b90600052602060002090601091828204019190066002029054906101000a900461ffff16905061065684826109d1565b156106615750610790565b600084815260076020908152604080832061ffff85168452600a01909152902054801561078d57600085815260076020908152604080832061ffff861684526008019091528120546001600160a01b0316906106bd8785610f6e565b6004549091506106da906001600160a01b03848116911685610f9d565b6004805460405163839436d360e01b81526001600160a01b039091169163839436d39161070f91859189918991899101611d3c565b600060405180830381600087803b15801561072957600080fd5b505af115801561073d573d6000803e3d6000fd5b5050505061074d87856000611077565b7f6f323bba615785e34a38601fef2e179257caee4ab2508c9d1a4813ee99c4fd99818585856040516107829493929190611d3c565b60405180910390a150505b50505b8061079a81611d81565b915050610607565b506107ac8261109c565b5050565b6000546001600160a01b031633146107da5760405162461bcd60e51b815260040161047490611cc0565b6006805461ffff191661ffff92909216919091179055565b6001546001600160a01b0316331461081c5760405162461bcd60e51b815260040161047490611d9c565b6107ac82826110c8565b6001546001600160a01b031633146108505760405162461bcd60e51b815260040161047490611d9c565b60009182526008602052604090912060010180549115156101000261ff0019909216919091179055565b6000546001600160a01b031633146108a45760405162461bcd60e51b815260040161047490611cc0565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b031633146108f05760405162461bcd60e51b815260040161047490611cc0565b600093845260076020818152604080872061ffff969096168752918501815281862080546001600160a01b03199081166001600160a01b03968716179091556008909501905290932080549092169216919091179055565b6001546001600160a01b031633146109725760405162461bcd60e51b815260040161047490611d9c565b80516107ac9060059060208401906118bc565b6000546001600160a01b031633146109af5760405162461bcd60e51b815260040161047490611cc0565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b600082815260076020908152604080832061ffff8516845260040190915290205460ff165b92915050565b6004546001600160a01b03163314610a265760405162461bcd60e51b815260040161047490611cef565b600082815260086020526040902060010154829060ff16610a595760405162461bcd60e51b815260040161047490611dd0565b610a6383836110c8565b505050565b6000546001600160a01b03163314610a925760405162461bcd60e51b815260040161047490611cc0565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b03163314610ade5760405162461bcd60e51b815260040161047490611d9c565b600091825260086020526040909120600101805460ff1916911515919091179055565b6001546001600160a01b03163314610b2b5760405162461bcd60e51b815260040161047490611d9c565b610b348161109c565b50565b6001546001600160a01b03163314610b615760405162461bcd60e51b815260040161047490611d9c565b60009182526008602052604090912055565b6001546001600160a01b03163314610b9d5760405162461bcd60e51b815260040161047490611d9c565b60009182526008602052604090912060020155565b6001546001600160a01b03163314610bdc5760405162461bcd60e51b815260040161047490611d9c565b60009182526008602052604090912060030155565b60008181526008602052604090208054600290910154829114610c265760405162461bcd60e51b815260040161047490611e02565b60008281526007602052604081208054600390910154909181610c48866111b8565b610c529190611e38565b60008681526007602052604081206002015460045460065493945090926001600160a01b039091169063cf54aaa090610c90908a9061ffff16610f6e565b6040518263ffffffff1660e01b8152600401610cac9190611c8a565b602060405180830381865afa158015610cc9573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ced9190611e4f565b9050600082610cfd83600a611f4c565b610d079086611f58565b610d119190611f8d565b905060005b600554811015610db657600060058281548110610d3557610d35611d26565b90600052602060002090601091828204019190066002029054906101000a900461ffff169050610d658a826109d1565b15610d705750610da4565b6000610d7e8b83898c611204565b9050600080610d8e8d8585611262565b91509150610d9f8d8584848a6112aa565b505050505b80610dae81611d81565b915050610d16565b505050505050505050565b6001546001600160a01b03163314610deb5760405162461bcd60e51b815260040161047490611d9c565b610df88585858585610eab565b5050505050565b6004546001600160a01b03163314610e295760405162461bcd60e51b815260040161047490611cef565b60008181526008602052604090208054600290910154829114610e5e5760405162461bcd60e51b815260040161047490611e02565b6000828152600860205260408120600301805491610e7b83611d81565b91905055505050565b600082815260076020908152604080832061ffff8516845260060190915290205492915050565b600085815260076020818152604080842061ffff891685526006810183528185208890556009810183529084208590558884529190526002018054849290610ef4908490611fa1565b909155505060008581526007602052604081206001018054859290610f1a908490611fa1565b909155505060008581526007602052604081206003018054839290610f40908490611fa1565b90915550506000858152600860205260408120600201805491610f6283611d81565b91905055505050505050565b600082815260076020818152604080842061ffff8616855290920190529020546001600160a01b031692915050565b604051636eb1769f60e11b81523060048201526001600160a01b038381166024830152600091839186169063dd62ed3e90604401602060405180830381865afa158015610fee573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110129190611e4f565b61101c9190611fa1565b604080516001600160a01b038616602482015260448082018490528251808303909101815260649091019091526020810180516001600160e01b031663095ea7b360e01b179052909150611071908590611424565b50505050565b600092835260076020908152604080852061ffff9094168552600a9093019052912055565b60009081526008602052604081206001818101805461ffff191690911790556002810182905560030155565b6000805b600554811015611175576000600582815481106110eb576110eb611d26565b90600052602060002090601091828204019190066002029054906101000a900461ffff169050611135858286858151811061112857611128611d26565b60200260200101516114f6565b61113f9084611fa1565b600086815260076020908152604080832061ffff861684526006019091528120559250508061116d81611d81565b9150506110cc565b5060008381526007602090815260408083206001908101849055600890925282206002810192909255908290556111ad9084906115e9565b610a63836000610ade565b600081815260086020526040812080546002909101548391146111ed5760405162461bcd60e51b815260040161047490611e02565b505060009081526007602052604090206001015490565b6000806112118686611647565b600087815260076020908152604080832061ffff8a168452600901909152812054919250846112408488611fb9565b61124a919061203e565b9050611256828261206c565b98975050505050505050565b60008060006112718686610e84565b9050600061127f82866120ad565b9050600080821261129157600061129b565b61129b8684611e38565b91989197509095505050505050565b60006112b68686610f6e565b90506000841315611384576112cc868686611077565b6004805460405163180b113d60e11b81526001600160a01b0390911691633016227a916113029185918a916000918991016120ec565b600060405180830381600087803b15801561131c57600080fd5b505af1158015611330573d6000803e3d6000fd5b5050506000878152600860205260408120600301805492509061135283611d81565b91905055506000805160206121af833981519152818660008560405161137b94939291906120ec565b60405180910390a15b821561059e576004805460405163180b113d60e11b81526001600160a01b0390911691633016227a916113bf9185918a9189918991016120ec565b600060405180830381600087803b1580156113d957600080fd5b505af11580156113ed573d6000803e3d6000fd5b505050506000805160206121af8339815191528186858560405161141494939291906120ec565b60405180910390a1505050505050565b6000611479826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661166e9092919063ffffffff16565b805190915015610a6357808060200190518101906114979190612116565b610a635760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b6064820152608401610474565b60006115028484611647565b15801561150d575081155b156115265761151e84846001611685565b506000611536565b61153284846000611685565b5060015b6000848152600760205260408120805484929061155490849061206c565b9091555050600084815260076020908152604080832061ffff871684526005019091528120805484929061158990849061206c565b909155505060008481526007602052604081205412156115e25760405162461bcd60e51b8152602060048201526014602482015273416c6c6f636174696f6e20756e646572666c6f7760601b6044820152606401610474565b9392505050565b600082815260086020526040902060010154829060ff1661161c5760405162461bcd60e51b815260040161047490611dd0565b5060009182526008602052604090912060010180549115156101000261ff0019909216919091179055565b600082815260076020908152604080832061ffff8516845260050190915290205492915050565b606061167d8484600085611752565b949350505050565b80151561169284846109d1565b151514610a63576004546001600160a01b0316639951d33d6116b48585610f6e565b6040516001600160e01b031960e084901b1681526001600160a01b03909116600482015261ffff851660248201528315156044820152606401600060405180830381600087803b15801561170757600080fd5b505af115801561171b573d6000803e3d6000fd5b505050600084815260076020908152604080832061ffff871684526004019091529020805483151560ff1990911617905550505050565b6060824710156117b35760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b6064820152608401610474565b6001600160a01b0385163b61180a5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610474565b600080866001600160a01b03168587604051611826919061215f565b60006040518083038185875af1925050503d8060008114611863576040519150601f19603f3d011682016040523d82523d6000602084013e611868565b606091505b5091509150611878828286611883565b979650505050505050565b606083156118925750816115e2565b8251156118a25782518084602001fd5b8160405162461bcd60e51b8152600401610474919061217b565b82805482825590600052602060002090600f016010900481019282156119555791602002820160005b8382111561192557835183826101000a81548161ffff021916908361ffff16021790555092602001926002016020816001010492830192600103026118e5565b80156119535782816101000a81549061ffff0219169055600201602081600101049283019260010302611925565b505b50611961929150611965565b5090565b5b808211156119615760008155600101611966565b60006020828403121561198c57600080fd5b5035919050565b80356001600160a01b03811681146119aa57600080fd5b919050565b6000602082840312156119c157600080fd5b6115e282611993565b803561ffff811681146119aa57600080fd5b600080600080600060a086880312156119f457600080fd5b85359450611a04602087016119ca565b94979496505050506040830135926060810135926080909101359150565b600060208284031215611a3457600080fd5b6115e2826119ca565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b0381118282101715611a7b57611a7b611a3d565b604052919050565b60006001600160401b03821115611a9c57611a9c611a3d565b5060051b60200190565b60008060408385031215611ab957600080fd5b823591506020808401356001600160401b03811115611ad757600080fd5b8401601f81018613611ae857600080fd5b8035611afb611af682611a83565b611a53565b81815260059190911b82018301908381019088831115611b1a57600080fd5b928401925b82841015611b3857833582529284019290840190611b1f565b80955050505050509250929050565b8015158114610b3457600080fd5b60008060408385031215611b6857600080fd5b823591506020830135611b7a81611b47565b809150509250929050565b60008060008060808587031215611b9b57600080fd5b84359350611bab602086016119ca565b9250611bb960408601611993565b9150611bc760608601611993565b905092959194509250565b60006020808385031215611be557600080fd5b82356001600160401b03811115611bfb57600080fd5b8301601f81018513611c0c57600080fd5b8035611c1a611af682611a83565b81815260059190911b82018301908381019087831115611c3957600080fd5b928401925b8284101561187857611c4f846119ca565b82529284019290840190611c3e565b60008060408385031215611c7157600080fd5b82359150611c81602084016119ca565b90509250929050565b6001600160a01b0391909116815260200190565b60008060408385031215611cb157600080fd5b50508035926020909101359150565b60208082526015908201527478436f6e74726f6c6c65723a206f6e6c792044414f60581b604082015260600190565b6020808252601f908201527f78436f6e74726f6c6c65723a206f6e6c79207850726f76696465724164647200604082015260600190565b634e487b7160e01b600052603260045260246000fd5b6001600160a01b03948516815261ffff9390931660208401526040830191909152909116606082015260800190565b634e487b7160e01b600052601160045260246000fd5b6000600019821415611d9557611d95611d6b565b5060010190565b6020808252601a90820152793c21b7b73a3937b63632b91d1037b7363c9023bab0b93234b0b760311b604082015260600190565b6020808252601890820152774e6f7420616c6c207661756c74732061726520726561647960401b604082015260600190565b6020808252601c908201527b139bdd08185b1b081d5b99195c9b1e5a5b99dcc81c9958d95a5d995960221b604082015260600190565b600082821015611e4a57611e4a611d6b565b500390565b600060208284031215611e6157600080fd5b5051919050565b600181815b80851115611ea3578160001904821115611e8957611e89611d6b565b80851615611e9657918102915b93841c9390800290611e6d565b509250929050565b600082611eba575060016109f6565b81611ec7575060006109f6565b8160018114611edd5760028114611ee757611f03565b60019150506109f6565b60ff841115611ef857611ef8611d6b565b50506001821b6109f6565b5060208310610133831016604e8410600b8410161715611f26575081810a6109f6565b611f308383611e68565b8060001904821115611f4457611f44611d6b565b029392505050565b60006115e28383611eab565b6000816000190483118215151615611f7257611f72611d6b565b500290565b634e487b7160e01b600052601260045260246000fd5b600082611f9c57611f9c611f77565b500490565b60008219821115611fb457611fb4611d6b565b500190565b60006001600160ff1b0381841382841380821686840486111615611fdf57611fdf611d6b565b600160ff1b6000871282811687830589121615611ffe57611ffe611d6b565b6000871292508782058712848416161561201a5761201a611d6b565b8785058712818416161561203057612030611d6b565b505050929093029392505050565b60008261204d5761204d611f77565b600160ff1b82146000198414161561206757612067611d6b565b500590565b600080821280156001600160ff1b038490038513161561208e5761208e611d6b565b600160ff1b83900384128116156120a7576120a7611d6b565b50500190565b60008083128015600160ff1b8501841216156120cb576120cb611d6b565b6001600160ff1b03840183138116156120e6576120e6611d6b565b50500390565b6001600160a01b0394909416845261ffff9290921660208401526040830152606082015260800190565b60006020828403121561212857600080fd5b81516115e281611b47565b60005b8381101561214e578181015183820152602001612136565b838111156110715750506000910152565b60008251612171818460208701612133565b9190910192915050565b602081526000825180602084015261219a816040850160208701612133565b601f01601f1916919091016040019291505056fe568a278f594c7d5fdf5cacdc2887764e3a751a7e347f8c56236a92fc133ea0afa2646970667358221220124a2124ebec8e14c2df8c025d1dad9234db7b0367ed49b8e5edad668f1dc59b64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "pushVaultAmounts(uint256)": {
        "params": {
          "_vaultNumber": "Number of vault"
        }
      },
      "receiveAllocationsFromGame(uint256,int256[])": {
        "params": {
          "_deltas": "Delta allocations array received from game, indexes match chainIds[] set in this contract",
          "_vaultNumber": "Number of Vault"
        }
      },
      "resetVaultStagesDao(uint256)": {
        "details": "onlyDao modifier so the dao can reset all stages for a vaultNumber incase something goes wrong"
      },
      "sendFundsToVault(uint256)": {
        "params": {
          "_vaultNumber": "Number of vault"
        }
      },
      "setChainIds(uint16[])": {
        "params": {
          "_chainIds": "array of all the used chainIds"
        }
      },
      "setDao(address)": {
        "params": {
          "_dao": "DAO address"
        }
      },
      "setGame(address)": {
        "params": {
          "_game": "New address of the game"
        }
      },
      "setGuardian(address)": {
        "params": {
          "_guardian": "new address of the guardian"
        }
      },
      "setHomeChainId(uint16)": {
        "params": {
          "_homeChainId": "New home chainId"
        }
      },
      "setHomeXProvider(address)": {
        "params": {
          "_xProvider": "new address of xProvider on this chain"
        }
      },
      "setVaultChainAddress(uint256,uint16,address,address)": {
        "params": {
          "_address": "address of the Vault",
          "_chainId": "Number of chain used",
          "_underlying": "underlying of the Vault eg USDC",
          "_vaultNumber": "number of Vault"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDao()": {
        "notice": "Getter for dao address"
      },
      "getGuardian()": {
        "notice": "Getter for guardian address"
      },
      "getVaultChainIdOff(uint256,uint16)": {
        "notice": "Helper to get if vault is active or not"
      },
      "pushVaultAmounts(uint256)": {
        "notice": "Step 3 trigger; xChainController pushes exchangeRate and amount the vaults have to send back to all vaultsCalculates the amounts the vaults on each chainId have to send or receive"
      },
      "receiveAllocationsFromGame(uint256,int256[])": {
        "notice": "Step 1 end; Game pushes totalDeltaAllocations to xChainController"
      },
      "receiveAllocationsFromGameGuard(uint256,int256[])": {
        "notice": "Step 1: Guardian function"
      },
      "resetVaultStagesDao(uint256)": {
        "notice": "Resets all stages in vaultStage struct for a vaultNumber"
      },
      "sendFundsToVault(uint256)": {
        "notice": "Step 5 trigger; Push funds from xChainController to vaultsSend amount to deposit from xController to vault and reset all stages for the vault"
      },
      "setActiveVaultsGuard(uint256,uint256)": {
        "notice": "Guardian setter for number of active vaults for vaultNumber, set in xChainRebalance"
      },
      "setAllocationsReceivedGuard(uint256,bool)": {
        "notice": "Guardian setter for stage 1:"
      },
      "setChainIds(uint16[])": {
        "notice": "Setter for chainId array"
      },
      "setDao(address)": {
        "notice": "Setter for DAO address"
      },
      "setFundsReceivedGuard(uint256,uint256)": {
        "notice": "Step 4: Guardian function"
      },
      "setGame(address)": {
        "notice": "Setter for new game address"
      },
      "setGuardian(address)": {
        "notice": "Setter for guardian address"
      },
      "setHomeChainId(uint16)": {
        "notice": "Setter for homeChain Id"
      },
      "setHomeXProvider(address)": {
        "notice": "Setter for xProvider address"
      },
      "setReadyGuard(uint256,bool)": {
        "notice": "Guardian setter for stage 0:"
      },
      "setTotalUnderlying(uint256,uint16,uint256,uint256,uint256)": {
        "notice": "See setTotalUnderlyingInt below"
      },
      "setTotalUnderlyingGuard(uint256,uint16,uint256,uint256,uint256)": {
        "notice": "Step 2: Guardian function"
      },
      "setUnderlyingReceivedGuard(uint256,uint256)": {
        "notice": "Guardian setter to tick up stage 2:"
      },
      "setVaultChainAddress(uint256,uint16,address,address)": {
        "notice": "Set Vault address and underlying for a particulair chainId"
      },
      "upFundsReceived(uint256)": {
        "notice": "Step 4 end; Push funds from vaults to xChainControllerFundsReceived; funds received from all active vault contracts"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15174,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "dao",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 15176,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "guardian",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 15178,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "game",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 15180,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "xProviderAddr",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 15183,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "xProvider",
        "offset": 0,
        "slot": "4",
        "type": "t_contract(IXProvider)6253"
      },
      {
        "astId": 15186,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "chainIds",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_uint16)dyn_storage"
      },
      {
        "astId": 15188,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "homeChain",
        "offset": 0,
        "slot": "6",
        "type": "t_uint16"
      },
      {
        "astId": 15193,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "vaults",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_struct(vaultInfo)15161_storage)"
      },
      {
        "astId": 15198,
        "contract": "contracts/XChainController.sol:XChainController",
        "label": "vaultStage",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_struct(vaultStages)15172_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_uint16)dyn_storage": {
        "base": "t_uint16",
        "encoding": "dynamic_array",
        "label": "uint16[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IXProvider)6253": {
        "encoding": "inplace",
        "label": "contract IXProvider",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_uint16,t_address)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint16,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint16,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_struct(vaultInfo)15161_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct XChainController.vaultInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(vaultInfo)15161_storage"
      },
      "t_mapping(t_uint256,t_struct(vaultStages)15172_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct XChainController.vaultStages)",
        "numberOfBytes": "32",
        "value": "t_struct(vaultStages)15172_storage"
      },
      "t_struct(vaultInfo)15161_storage": {
        "encoding": "inplace",
        "label": "struct XChainController.vaultInfo",
        "members": [
          {
            "astId": 15126,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "totalCurrentAllocation",
            "offset": 0,
            "slot": "0",
            "type": "t_int256"
          },
          {
            "astId": 15128,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "totalUnderlying",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 15130,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "totalSupply",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15132,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "totalWithdrawalRequests",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 15136,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "chainIdOff",
            "offset": 0,
            "slot": "4",
            "type": "t_mapping(t_uint16,t_bool)"
          },
          {
            "astId": 15140,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "currentAllocationPerChain",
            "offset": 0,
            "slot": "5",
            "type": "t_mapping(t_uint16,t_int256)"
          },
          {
            "astId": 15144,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "totalUnderlyingPerChain",
            "offset": 0,
            "slot": "6",
            "type": "t_mapping(t_uint16,t_uint256)"
          },
          {
            "astId": 15148,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "vaultChainAddress",
            "offset": 0,
            "slot": "7",
            "type": "t_mapping(t_uint16,t_address)"
          },
          {
            "astId": 15152,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "vaultUnderlyingAddress",
            "offset": 0,
            "slot": "8",
            "type": "t_mapping(t_uint16,t_address)"
          },
          {
            "astId": 15156,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "withdrawalRequests",
            "offset": 0,
            "slot": "9",
            "type": "t_mapping(t_uint16,t_uint256)"
          },
          {
            "astId": 15160,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "amountToDepositPerChain",
            "offset": 0,
            "slot": "10",
            "type": "t_mapping(t_uint16,t_uint256)"
          }
        ],
        "numberOfBytes": "352"
      },
      "t_struct(vaultStages)15172_storage": {
        "encoding": "inplace",
        "label": "struct XChainController.vaultStages",
        "members": [
          {
            "astId": 15163,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "activeVaults",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 15165,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "ready",
            "offset": 0,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 15167,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "allocationsReceived",
            "offset": 1,
            "slot": "1",
            "type": "t_bool"
          },
          {
            "astId": 15169,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "underlyingReceived",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 15171,
            "contract": "contracts/XChainController.sol:XChainController",
            "label": "fundsReceived",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
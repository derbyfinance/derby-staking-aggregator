{
  "address": "0x2BB8B93F585B43b06F3d523bf30C203d3B6d4BD4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_endpoint",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_connextHandler",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_xController",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_homeChain",
          "type": "uint16"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "contract IConnextHandler",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "connextChainId",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "endpoint",
      "outputs": [
        {
          "internalType": "contract ILayerZeroEndpoint",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameChain",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "getDecimals",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeChain",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        },
        {
          "internalType": "uint64",
          "name": "_nonce",
          "type": "uint64"
        },
        {
          "internalType": "bytes",
          "name": "_payload",
          "type": "bytes"
        }
      ],
      "name": "lzReceive",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "pushAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "pushProtocolAllocationsToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "int256[]",
          "name": "_rewards",
          "type": "int256[]"
        }
      ],
      "name": "pushRewardsToGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amountToSendBack",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "pushSetXChainAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "pushStateFeedbackToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_underlying",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalRequests",
          "type": "uint256"
        }
      ],
      "name": "pushTotalUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "receiveFeedbackToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        }
      ],
      "name": "receiveFeedbackToXController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveProtocolAllocationsToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "int256[]",
          "name": "_rewards",
          "type": "int256[]"
        }
      ],
      "name": "receiveRewardsToGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amountToSendBack",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_exchangeRate",
          "type": "uint256"
        }
      ],
      "name": "receiveSetXChainAllocation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "receiveStateFeedbackToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_underlying",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_totalSupply",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_withdrawalRequests",
          "type": "uint256"
        }
      ],
      "name": "receiveTotalUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_layerzeroChainId",
          "type": "uint16"
        },
        {
          "internalType": "uint32",
          "name": "_connextChainId",
          "type": "uint32"
        }
      ],
      "name": "setConnextChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "setDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        }
      ],
      "name": "setGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_gameChain",
          "type": "uint16"
        }
      ],
      "name": "setGameChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_homeChain",
          "type": "uint16"
        }
      ],
      "name": "setHomeChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_srcChainId",
          "type": "uint16"
        },
        {
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "setTrustedRemote",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xController",
          "type": "address"
        }
      ],
      "name": "setXController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_xControllerChain",
          "type": "uint16"
        }
      ],
      "name": "setXControllerChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xControllerProvider",
          "type": "address"
        }
      ],
      "name": "setXControllerProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "toggleVaultWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "name": "trustedRemoteLookup",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xController",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xControllerChain",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xControllerProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "xTransferToController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_chainId",
          "type": "uint16"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        }
      ],
      "name": "xTransferToVaults",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2051c5cf405462547a8c0c9505c0fbdfc555b44ab0234d53b0e75ee3f2dac38",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x2BB8B93F585B43b06F3d523bf30C203d3B6d4BD4",
    "transactionIndex": 0,
    "gasUsed": "2333443",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x1d7562d48ecc5016d6978b4b99fcbc8cdf42303be09c846271797720f670dac2",
    "transactionHash": "0xe2051c5cf405462547a8c0c9505c0fbdfc555b44ab0234d53b0e75ee3f2dac38",
    "logs": [],
    "blockNumber": 15932103,
    "cumulativeGasUsed": "2333443",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65",
    "0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65",
    "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "0xc6B407503dE64956Ad3cF5Ab112cA4f56AA13517",
    "0x7A28cf37763279F774916b85b5ef8b64AB421f79",
    100
  ],
  "numDeployments": 1,
  "solcInputHash": "a4dd9cf6f9a65e85785f63248e1cb35a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_endpoint\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_connextHandler\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_xController\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_homeChain\",\"type\":\"uint16\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"contract IConnextHandler\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"connextChainId\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"endpoint\",\"outputs\":[{\"internalType\":\"contract ILayerZeroEndpoint\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameChain\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"getDecimals\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeChain\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"},{\"internalType\":\"uint64\",\"name\":\"_nonce\",\"type\":\"uint64\"},{\"internalType\":\"bytes\",\"name\":\"_payload\",\"type\":\"bytes\"}],\"name\":\"lzReceive\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"pushAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"pushProtocolAllocationsToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"int256[]\",\"name\":\"_rewards\",\"type\":\"int256[]\"}],\"name\":\"pushRewardsToGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amountToSendBack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"pushSetXChainAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"pushStateFeedbackToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalRequests\",\"type\":\"uint256\"}],\"name\":\"pushTotalUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"receiveFeedbackToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"}],\"name\":\"receiveFeedbackToXController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveProtocolAllocationsToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"int256[]\",\"name\":\"_rewards\",\"type\":\"int256[]\"}],\"name\":\"receiveRewardsToGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amountToSendBack\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_exchangeRate\",\"type\":\"uint256\"}],\"name\":\"receiveSetXChainAllocation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"receiveStateFeedbackToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_underlying\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_totalSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_withdrawalRequests\",\"type\":\"uint256\"}],\"name\":\"receiveTotalUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_layerzeroChainId\",\"type\":\"uint16\"},{\"internalType\":\"uint32\",\"name\":\"_connextChainId\",\"type\":\"uint32\"}],\"name\":\"setConnextChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"}],\"name\":\"setGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_gameChain\",\"type\":\"uint16\"}],\"name\":\"setGameChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_homeChain\",\"type\":\"uint16\"}],\"name\":\"setHomeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_srcChainId\",\"type\":\"uint16\"},{\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"setTrustedRemote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xController\",\"type\":\"address\"}],\"name\":\"setXController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_xControllerChain\",\"type\":\"uint16\"}],\"name\":\"setXControllerChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xControllerProvider\",\"type\":\"address\"}],\"name\":\"setXControllerProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"toggleVaultWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"name\":\"trustedRemoteLookup\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xController\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xControllerChain\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xControllerProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"xTransferToController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_chainId\",\"type\":\"uint16\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"}],\"name\":\"xTransferToVaults\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"pushAllocations(uint256,int256[])\":{\"params\":{\"_deltas\":\"Array with delta Allocations for all chainIds\",\"_vaultNumber\":\"number of the vault\"}},\"pushProtocolAllocationsToVault(uint16,address,int256[])\":{\"params\":{\"_deltas\":\"Array with delta allocations where the index matches the protocolId\",\"_vault\":\"Address of the vault on given chainId\"}},\"pushRewardsToGame(uint256,uint16,int256[])\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_rewards\":\"Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\",\"_vaultNumber\":\"Number of the vault\"}},\"pushSetXChainAllocation(address,uint16,uint256,uint256)\":{\"params\":{\"_amountToSendBack\":\"Amount the vault has to send back\",\"_chainId\":\"Number of chain used\",\"_exchangeRate\":\"New exchangerate for vaults\",\"_vault\":\"Address of the Derby Vault on given chainId\"}},\"pushStateFeedbackToVault(address,uint16,bool)\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_state\":\"bool for chainId on or off\",\"_vault\":\"Address of the Derby Vault on given chainId\"}},\"pushTotalUnderlying(uint256,uint16,uint256,uint256,uint256)\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_totalSupply\":\"Supply of the LP token of the vault on given chainId\",\"_underlying\":\"TotalUnderling plus vault balance in vaultcurrency e.g USDC\",\"_vaultNumber\":\"Number of the vault\",\"_withdrawalRequests\":\"Total amount of withdrawal requests from the vault in LP Tokens\"}},\"receiveAllocations(uint256,int256[])\":{\"params\":{\"_deltas\":\"Array with delta Allocations for all chainIds\",\"_vaultNumber\":\"number of the vault\"}},\"receiveFeedbackToVault(address)\":{\"params\":{\"_vault\":\"Address of the vault on given chainId\"}},\"receiveFeedbackToXController(uint256)\":{\"params\":{\"_vaultNumber\":\"Number of the vault\"}},\"receiveProtocolAllocationsToVault(address,int256[])\":{\"params\":{\"_deltas\":\"Array with delta allocations where the index matches the protocolId\",\"_vault\":\"Address of the vault on given chainId\"}},\"receiveRewardsToGame(uint256,uint16,int256[])\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_rewards\":\"Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\",\"_vaultNumber\":\"Number of the vault\"}},\"receiveSetXChainAllocation(address,uint256,uint256)\":{\"params\":{\"_amountToSendBack\":\"Amount the vault has to send back\",\"_exchangeRate\":\"New exchangerate for vaults\",\"_vault\":\"Address of the Derby Vault on given chainId\"}},\"receiveStateFeedbackToVault(address,bool)\":{\"params\":{\"_state\":\"bool for chainId on or off\",\"_vault\":\"Address of the Derby Vault on given chainId\"}},\"receiveTotalUnderlying(uint256,uint16,uint256,uint256,uint256)\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_totalSupply\":\"Supply of the LP token of the vault on given chainId\",\"_underlying\":\"TotalUnderling plus vault balance in vaultcurrency e.g USDC\",\"_vaultNumber\":\"Number of the vault\",\"_withdrawalRequests\":\"Total amount of withdrawal requests from the vault in LP Tokens\"}},\"setGame(address)\":{\"params\":{\"_game\":\"New address of the game\"}},\"setGameChainId(uint16)\":{\"params\":{\"_gameChain\":\"New chainId for game contract\"}},\"setHomeChain(uint16)\":{\"params\":{\"_homeChain\":\"New home chainId\"}},\"setTrustedRemote(uint16,bytes)\":{\"params\":{\"_srcAddress\":\"Address of remote xprovider\",\"_srcChainId\":\"Chain is for remote xprovider, some as the remote receiving contract chain id (xReceive)\"}},\"setXController(address)\":{\"params\":{\"_xController\":\"New address of _xController\"}},\"setXControllerChainId(uint16)\":{\"params\":{\"_xControllerChain\":\"New address of xProvider for xController chain\"}},\"setXControllerProvider(address)\":{\"params\":{\"_xControllerProvider\":\"New address of xProvider for xController chain\"}},\"xTransferToController(uint256,uint256,address)\":{\"params\":{\"_amount\":\"Number of the vault\",\"_asset\":\"Address of the token to send e.g USDC\",\"_vaultNumber\":\"Address of the Derby Vault on given chainId\"}},\"xTransferToVaults(address,uint16,uint256,address)\":{\"params\":{\"_amount\":\"Amount to send to vault in vaultcurrency\",\"_asset\":\"Addres of underlying e.g USDC\",\"_chainId\":\"Number of chainId\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getDao()\":{\"notice\":\"Getter for dao address\"},\"getDecimals(address)\":{\"notice\":\"returns number of decimals for the vault\"},\"pushAllocations(uint256,int256[])\":{\"notice\":\"Step 1 push; Game pushes totalDeltaAllocations to xChainControllerPushes the delta allocations from the game to the xChainController\"},\"pushProtocolAllocationsToVault(uint16,address,int256[])\":{\"notice\":\"Step 6 push; Game pushes deltaAllocations to vaultsPush protocol allocation array from the game to all vaults/chains\"},\"pushRewardsToGame(uint256,uint16,int256[])\":{\"notice\":\"Step 8 push; Vaults push rewardsPerLockedToken to gamePush price and rewards array from vaults to the game\"},\"pushSetXChainAllocation(address,uint16,uint256,uint256)\":{\"notice\":\"Step 3 push; xChainController pushes exchangeRate and amount the vaults have to send back to all vaults\"},\"pushStateFeedbackToVault(address,uint16,bool)\":{\"notice\":\"Push feedback to the vault if the vault is set to on or off\"},\"pushTotalUnderlying(uint256,uint16,uint256,uint256,uint256)\":{\"notice\":\"Step 2 push; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainControllerPushes cross chain requests for the totalUnderlying for a vaultNumber on a chainId\"},\"receiveAllocations(uint256,int256[])\":{\"notice\":\"Step 1 receive; Game pushes totalDeltaAllocations to xChainControllerReceives the delta allocations from the game and routes to xChainController\"},\"receiveFeedbackToVault(address)\":{\"notice\":\"Step 5 receive; Push funds from xChainController to vaultsReceive feedback message so the vault knows it has received funds and is ready to rebalance\"},\"receiveFeedbackToXController(uint256)\":{\"notice\":\"Step 4 receive; Push funds from vaults to xChainControllerReceive crosschain feedback to xController to know when the vaultNumber has sent funds\"},\"receiveProtocolAllocationsToVault(address,int256[])\":{\"notice\":\"Step 6 receive; Game pushes deltaAllocations to vaultsReceives protocol allocation array from the game to all vaults/chains\"},\"receiveRewardsToGame(uint256,uint16,int256[])\":{\"notice\":\"Step 8 receive; Vaults push rewardsPerLockedToken to gameReceives price and rewards array from vaults to the game\"},\"receiveSetXChainAllocation(address,uint256,uint256)\":{\"notice\":\"Step 3 receive; xChainController pushes exchangeRate and amount the vaults have to send back to all vaults\"},\"receiveStateFeedbackToVault(address,bool)\":{\"notice\":\"Receive feedback for the vault if the vault is set to on or off\"},\"receiveTotalUnderlying(uint256,uint16,uint256,uint256,uint256)\":{\"notice\":\"Step 2 receive; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainControllerReceive and set totalUnderlyings from the vaults for every chainId\"},\"setConnextChainId(uint16,uint32)\":{\"notice\":\"links layerZero chain id to a connext chain id for transfers\"},\"setDao(address)\":{\"notice\":\"Setter for dao address\"},\"setGame(address)\":{\"notice\":\"Setter for new game address\"},\"setGameChainId(uint16)\":{\"notice\":\"Setter for gameChain Id\"},\"setHomeChain(uint16)\":{\"notice\":\"Setter for homeChain Id\"},\"setTrustedRemote(uint16,bytes)\":{\"notice\":\"set trusted provider on remote chains, allow owner to set it multiple times.\"},\"setXController(address)\":{\"notice\":\"Setter for xControlleraddress\"},\"setXControllerChainId(uint16)\":{\"notice\":\"Setter for xControllerProvider address\"},\"setXControllerProvider(address)\":{\"notice\":\"Setter for xControllerProvider address\"},\"toggleVaultWhitelist(address)\":{\"notice\":\"Whitelists vault address for onlyVault modifier\"},\"xTransferToController(uint256,uint256,address)\":{\"notice\":\"Step 4 push; Push funds from vaults to xChainControllerTransfers funds from vault to xController for crosschain rebalance\"},\"xTransferToVaults(address,uint16,uint256,address)\":{\"notice\":\"Step 5 push; Push funds from xChainController to vaultsTransfers funds from xController to vault for crosschain rebalance\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/XProvider.sol\":\"XProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IConnextHandler.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport {XCallArgs} from \\\"../../libraries/LibConnextStorage.sol\\\";\\r\\n\\r\\ninterface IConnextHandler {\\r\\n  function xcall(XCallArgs calldata _args) external payable returns (bytes32);\\r\\n}\\r\\n\",\"keccak256\":\"0xdf630f95b2fef144aea67f87e8c59233b54efedbecdd30a01c804a13ae79f876\",\"license\":\"MIT\"},\"contracts/Interfaces/IGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IGame {\\r\\n  function Vaults(uint256 _ETFnumber) external view returns (address);\\r\\n\\r\\n  function basketUnredeemedRewardsViaVault(uint256 _basketId, address _ownerAddr)\\r\\n    external\\r\\n    view\\r\\n    returns (int256);\\r\\n\\r\\n  function basketRedeemedRewards(uint256 _basketId) external view returns (int256);\\r\\n\\r\\n  function setUnredeemedToRedeemed(uint256 _basketId, address _ownerAddr) external;\\r\\n\\r\\n  function settleRewards(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    int256[] memory rewards\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0x7c75cdf514d5c5c5e49b2bce930389662b5b2b344e3e324faf9de5cbfc8714f9\",\"license\":\"MIT\"},\"contracts/Interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IVault {\\r\\n  function swapTokens(uint256 _amountIn, address _tokenIn) external returns (uint256);\\r\\n\\r\\n  function rebalancingPeriod() external view returns (uint256);\\r\\n\\r\\n  function price(uint256) external view returns (uint256);\\r\\n\\r\\n  function setDeltaAllocations(uint256 _protocolNum, int256 _allocation) external;\\r\\n\\r\\n  function historicalPrices(uint256 _rebalancingPeriod, uint256 _protocolNum)\\r\\n    external\\r\\n    view\\r\\n    returns (uint256);\\r\\n\\r\\n  function rewardPerLockedToken(uint256 _rebalancingPeriod, uint256 _protocolNum)\\r\\n    external\\r\\n    view\\r\\n    returns (int256);\\r\\n\\r\\n  function performanceFee() external view returns (uint256);\\r\\n\\r\\n  function getTotalUnderlying() external view returns (uint256);\\r\\n\\r\\n  function getTotalUnderlyingIncBalance() external view returns (uint256);\\r\\n\\r\\n  function vaultCurrencyAddress() external view returns (address);\\r\\n\\r\\n  function setXChainAllocation(uint256 _amountToSend, uint256 _exchangeRate) external;\\r\\n\\r\\n  function setVaultState(uint256 _state) external;\\r\\n\\r\\n  function receiveFunds() external;\\r\\n\\r\\n  function receiveProtocolAllocations(int256[] memory _deltas) external;\\r\\n\\r\\n  function toggleVaultOnOff(bool _state) external;\\r\\n\\r\\n  function decimals() external view returns (uint256);\\r\\n\\r\\n  function redeemRewardsGame(uint256 _amount, address _user) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xfd2b09dbc3b0ffe52233b6225beb3a65f8f54af122435e347bc97195bf896c82\",\"license\":\"MIT\"},\"contracts/Interfaces/IXChainController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface IXChainController {\\r\\n  function addTotalChainUnderlying(uint256 _vaultNumber, uint256 _amount) external;\\r\\n\\r\\n  function upFundsReceived(uint256 _vaultNumber) external;\\r\\n\\r\\n  function receiveAllocationsFromGame(uint256 _vaultNumber, int256[] memory _deltas) external;\\r\\n\\r\\n  function setTotalUnderlying(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    uint256 _underlying,\\r\\n    uint256 _totalSupply,\\r\\n    uint256 _withdrawalRequests\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa14001382de9757a7af5c25122e00e2dffc6eb8f81f7afb5fea6339890cc7ed2\",\"license\":\"MIT\"},\"contracts/Mocks/LayerZero/interfaces/ILayerZeroEndpoint.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\nimport \\\"./ILayerZeroUserApplicationConfig.sol\\\";\\r\\n\\r\\ninterface ILayerZeroEndpoint is ILayerZeroUserApplicationConfig {\\r\\n  // @notice send a LayerZero message to the specified address at a LayerZero endpoint.\\r\\n  // @param _dstChainId - the destination chain identifier\\r\\n  // @param _destination - the address on destination chain (in bytes). address length/format may vary by chains\\r\\n  // @param _payload - a custom bytes payload to send to the destination contract\\r\\n  // @param _refundAddress - if the source transaction is cheaper than the amount of value passed, refund the additional amount to this address\\r\\n  // @param _zroPaymentAddress - the address of the ZRO token holder who would pay for the transaction\\r\\n  // @param _adapterParams - parameters for custom functionality. e.g. receive airdropped native gas from the relayer on destination\\r\\n  function send(\\r\\n    uint16 _dstChainId,\\r\\n    bytes calldata _destination,\\r\\n    bytes calldata _payload,\\r\\n    address payable _refundAddress,\\r\\n    address _zroPaymentAddress,\\r\\n    bytes calldata _adapterParams\\r\\n  ) external payable;\\r\\n\\r\\n  // @notice used by the messaging library to publish verified payload\\r\\n  // @param _srcChainId - the source chain identifier\\r\\n  // @param _srcAddress - the source contract (as bytes) at the source chain\\r\\n  // @param _dstAddress - the address on destination chain\\r\\n  // @param _nonce - the unbound message ordering nonce\\r\\n  // @param _gasLimit - the gas limit for external contract execution\\r\\n  // @param _payload - verified payload to send to the destination contract\\r\\n  function receivePayload(\\r\\n    uint16 _srcChainId,\\r\\n    bytes calldata _srcAddress,\\r\\n    address _dstAddress,\\r\\n    uint64 _nonce,\\r\\n    uint _gasLimit,\\r\\n    bytes calldata _payload\\r\\n  ) external;\\r\\n\\r\\n  // @notice get the inboundNonce of a lzApp from a source chain which could be EVM or non-EVM chain\\r\\n  // @param _srcChainId - the source chain identifier\\r\\n  // @param _srcAddress - the source chain contract address\\r\\n  function getInboundNonce(uint16 _srcChainId, bytes calldata _srcAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (uint64);\\r\\n\\r\\n  // @notice get the outboundNonce from this source chain which, consequently, is always an EVM\\r\\n  // @param _srcAddress - the source chain contract address\\r\\n  function getOutboundNonce(uint16 _dstChainId, address _srcAddress) external view returns (uint64);\\r\\n\\r\\n  // @notice gets a quote in source native gas, for the amount that send() requires to pay for message delivery\\r\\n  // @param _dstChainId - the destination chain identifier\\r\\n  // @param _userApplication - the user app address on this EVM chain\\r\\n  // @param _payload - the custom message to send over LayerZero\\r\\n  // @param _payInZRO - if false, user app pays the protocol fee in native token\\r\\n  // @param _adapterParam - parameters for the adapter service, e.g. send some dust native token to dstChain\\r\\n  function estimateFees(\\r\\n    uint16 _dstChainId,\\r\\n    address _userApplication,\\r\\n    bytes calldata _payload,\\r\\n    bool _payInZRO,\\r\\n    bytes calldata _adapterParam\\r\\n  ) external view returns (uint nativeFee, uint zroFee);\\r\\n\\r\\n  // @notice get this Endpoint's immutable source identifier\\r\\n  function getChainId() external view returns (uint16);\\r\\n\\r\\n  // @notice the interface to retry failed message on this Endpoint destination\\r\\n  // @param _srcChainId - the source chain identifier\\r\\n  // @param _srcAddress - the source chain contract address\\r\\n  // @param _payload - the payload to be retried\\r\\n  function retryPayload(\\r\\n    uint16 _srcChainId,\\r\\n    bytes calldata _srcAddress,\\r\\n    bytes calldata _payload\\r\\n  ) external;\\r\\n\\r\\n  // @notice query if any STORED payload (message blocking) at the endpoint.\\r\\n  // @param _srcChainId - the source chain identifier\\r\\n  // @param _srcAddress - the source chain contract address\\r\\n  function hasStoredPayload(uint16 _srcChainId, bytes calldata _srcAddress)\\r\\n    external\\r\\n    view\\r\\n    returns (bool);\\r\\n\\r\\n  // @notice query if the _libraryAddress is valid for sending msgs.\\r\\n  // @param _userApplication - the user app address on this EVM chain\\r\\n  function getSendLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n  // @notice query if the _libraryAddress is valid for receiving msgs.\\r\\n  // @param _userApplication - the user app address on this EVM chain\\r\\n  function getReceiveLibraryAddress(address _userApplication) external view returns (address);\\r\\n\\r\\n  // @notice query if the non-reentrancy guard for send() is on\\r\\n  // @return true if the guard is on. false otherwise\\r\\n  function isSendingPayload() external view returns (bool);\\r\\n\\r\\n  // @notice query if the non-reentrancy guard for receive() is on\\r\\n  // @return true if the guard is on. false otherwise\\r\\n  function isReceivingPayload() external view returns (bool);\\r\\n\\r\\n  // @notice get the configuration of the LayerZero messaging library of the specified version\\r\\n  // @param _version - messaging library version\\r\\n  // @param _chainId - the chainId for the pending config change\\r\\n  // @param _userApplication - the contract address of the user application\\r\\n  // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n  function getConfig(\\r\\n    uint16 _version,\\r\\n    uint16 _chainId,\\r\\n    address _userApplication,\\r\\n    uint _configType\\r\\n  ) external view returns (bytes memory);\\r\\n\\r\\n  // @notice get the send() LayerZero messaging library version\\r\\n  // @param _userApplication - the contract address of the user application\\r\\n  function getSendVersion(address _userApplication) external view returns (uint16);\\r\\n\\r\\n  // @notice get the lzReceive() LayerZero messaging library version\\r\\n  // @param _userApplication - the contract address of the user application\\r\\n  function getReceiveVersion(address _userApplication) external view returns (uint16);\\r\\n}\\r\\n\",\"keccak256\":\"0xf242501d65951a3b6cf999d8cc0757a126e2751d3ceb9e8f9759dd18c32bd08e\",\"license\":\"MIT\"},\"contracts/Mocks/LayerZero/interfaces/ILayerZeroReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILayerZeroReceiver {\\r\\n  // @notice LayerZero endpoint will invoke this function to deliver the message on the destination\\r\\n  // @param _srcChainId - the source endpoint identifier\\r\\n  // @param _srcAddress - the source sending contract address from the source chain\\r\\n  // @param _nonce - the ordered message nonce\\r\\n  // @param _payload - the signed payload is the UA bytes has encoded to be sent\\r\\n  function lzReceive(\\r\\n    uint16 _srcChainId,\\r\\n    bytes calldata _srcAddress,\\r\\n    uint64 _nonce,\\r\\n    bytes calldata _payload\\r\\n  ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xb6d077f3832e3e4f5d5e762476fc71e06ce974141abff6fcb1343c6c81504bed\",\"license\":\"MIT\"},\"contracts/Mocks/LayerZero/interfaces/ILayerZeroUserApplicationConfig.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n\\r\\npragma solidity ^0.8.0;\\r\\n\\r\\ninterface ILayerZeroUserApplicationConfig {\\r\\n  // @notice set the configuration of the LayerZero messaging library of the specified version\\r\\n  // @param _version - messaging library version\\r\\n  // @param _chainId - the chainId for the pending config change\\r\\n  // @param _configType - type of configuration. every messaging library has its own convention.\\r\\n  // @param _config - configuration in the bytes. can encode arbitrary content.\\r\\n  function setConfig(\\r\\n    uint16 _version,\\r\\n    uint16 _chainId,\\r\\n    uint _configType,\\r\\n    bytes calldata _config\\r\\n  ) external;\\r\\n\\r\\n  // @notice set the send() LayerZero messaging library version to _version\\r\\n  // @param _version - new messaging library version\\r\\n  function setSendVersion(uint16 _version) external;\\r\\n\\r\\n  // @notice set the lzReceive() LayerZero messaging library version to _version\\r\\n  // @param _version - new messaging library version\\r\\n  function setReceiveVersion(uint16 _version) external;\\r\\n\\r\\n  // @notice Only when the UA needs to resume the message flow in blocking mode and clear the stored payload\\r\\n  // @param _srcChainId - the chainId of the source chain\\r\\n  // @param _srcAddress - the contract address of the source contract at the source chain\\r\\n  function forceResumeReceive(uint16 _srcChainId, bytes calldata _srcAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc25cc953a62dda8109af51260109ce3cf42319b72f879b0bf689e88569cfd988\",\"license\":\"MIT\"},\"contracts/XProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport {XCallArgs, CallParams} from \\\"./libraries/LibConnextStorage.sol\\\";\\r\\n\\r\\nimport \\\"./Interfaces/IVault.sol\\\";\\r\\nimport \\\"./Interfaces/IXChainController.sol\\\";\\r\\nimport \\\"./Interfaces/IGame.sol\\\";\\r\\nimport \\\"./Mocks/LayerZero/interfaces/ILayerZeroEndpoint.sol\\\";\\r\\nimport \\\"./Mocks/LayerZero/interfaces/ILayerZeroReceiver.sol\\\";\\r\\nimport \\\"./Interfaces/ExternalInterfaces/IConnextHandler.sol\\\";\\r\\n\\r\\nimport \\\"hardhat/console.sol\\\";\\r\\n\\r\\ncontract XProvider is ILayerZeroReceiver {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  ILayerZeroEndpoint public immutable endpoint;\\r\\n  IConnextHandler public immutable connext;\\r\\n\\r\\n  address private dao;\\r\\n  address public xController;\\r\\n  address public xControllerProvider;\\r\\n  address public game;\\r\\n\\r\\n  uint16 public homeChain;\\r\\n  uint16 public xControllerChain;\\r\\n  uint16 public gameChain;\\r\\n\\r\\n  // (layerZeroChainId => connextChainId): layerZeroChainId is the main ID we use\\r\\n  mapping(uint16 => uint32) public connextChainId;\\r\\n  // (layerZeroChainId => trustedChainIds): used for whitelisting chains\\r\\n  mapping(uint16 => bytes) public trustedRemoteLookup;\\r\\n  // (vaultAddress => bool): used for whitelisting vaults\\r\\n  mapping(address => bool) public vaultWhitelist;\\r\\n\\r\\n  event SetTrustedRemote(uint16 _srcChainId, bytes _srcAddress);\\r\\n\\r\\n  modifier onlyDao() {\\r\\n    require(msg.sender == dao, \\\"LZProvider: only DAO\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyController() {\\r\\n    require(msg.sender == xController, \\\"LZProvider: only Controller\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyVaults() {\\r\\n    require(vaultWhitelist[msg.sender], \\\"LZProvider: only vault\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlyGame() {\\r\\n    require(msg.sender == game, \\\"LZProvider: only Game\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  /// @notice Solution for the low-level call in lzReceive that is seen as an external call\\r\\n  modifier onlySelf() {\\r\\n    require(msg.sender == address(this), \\\"LZProvider: only Self\\\");\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  modifier onlySelfOrVault() {\\r\\n    require(\\r\\n      msg.sender == address(this) || vaultWhitelist[msg.sender],\\r\\n      \\\"LZProvider: only Self or Vault\\\"\\r\\n    );\\r\\n    _;\\r\\n  }\\r\\n\\r\\n  constructor(\\r\\n    address _endpoint,\\r\\n    address _connextHandler,\\r\\n    address _dao,\\r\\n    address _game,\\r\\n    address _xController,\\r\\n    uint16 _homeChain\\r\\n  ) {\\r\\n    endpoint = ILayerZeroEndpoint(_endpoint);\\r\\n    connext = IConnextHandler(_connextHandler);\\r\\n    dao = _dao;\\r\\n    game = _game;\\r\\n    xController = _xController;\\r\\n    homeChain = _homeChain;\\r\\n  }\\r\\n\\r\\n  /// @notice Function to send function selectors crossChain\\r\\n  /// @param _destinationDomain chain Id of destination chain\\r\\n  /// @param _callData Function selector to call on receiving chain with params\\r\\n  function xSend(uint16 _destinationDomain, bytes memory _callData) internal {\\r\\n    bytes memory trustedRemote = trustedRemoteLookup[_destinationDomain]; // same chainID as the provider on the receiverChain\\r\\n    require(trustedRemote.length != 0, \\\"LZProvider: destination chain not trusted\\\");\\r\\n\\r\\n    endpoint.send(\\r\\n      _destinationDomain,\\r\\n      trustedRemote,\\r\\n      _callData,\\r\\n      payable(msg.sender),\\r\\n      address(0x0),\\r\\n      bytes(\\\"\\\")\\r\\n    );\\r\\n  }\\r\\n\\r\\n  function xTransfer(\\r\\n    address _to,\\r\\n    address _asset,\\r\\n    uint32 _originDomain,\\r\\n    uint32 _destinationDomain,\\r\\n    uint256 _amount\\r\\n  ) internal {\\r\\n    require(\\r\\n      IERC20(_asset).allowance(msg.sender, address(this)) >= _amount,\\r\\n      \\\"LZXProvider: Not approved\\\"\\r\\n    );\\r\\n\\r\\n    IERC20(_asset).transferFrom(msg.sender, address(this), _amount);\\r\\n    IERC20(_asset).approve(address(connext), _amount);\\r\\n\\r\\n    CallParams memory callParams = CallParams({\\r\\n      to: _to,\\r\\n      callData: \\\"\\\",\\r\\n      originDomain: _originDomain,\\r\\n      destinationDomain: _destinationDomain,\\r\\n      agent: _to,\\r\\n      recovery: _to,\\r\\n      forceSlow: false,\\r\\n      receiveLocal: false,\\r\\n      callback: address(0),\\r\\n      callbackFee: 0,\\r\\n      relayerFee: 0,\\r\\n      slippageTol: 9995\\r\\n    });\\r\\n\\r\\n    XCallArgs memory xcallArgs = XCallArgs({\\r\\n      params: callParams,\\r\\n      transactingAssetId: _asset,\\r\\n      amount: _amount\\r\\n    });\\r\\n\\r\\n    connext.xcall(xcallArgs);\\r\\n  }\\r\\n\\r\\n  function lzReceive(\\r\\n    uint16 _srcChainId,\\r\\n    bytes calldata _srcAddress,\\r\\n    uint64 _nonce,\\r\\n    bytes calldata _payload\\r\\n  ) external {\\r\\n    require(msg.sender == address(endpoint), \\\"Not an endpoint\\\");\\r\\n    require(\\r\\n      _srcAddress.length == trustedRemoteLookup[_srcChainId].length &&\\r\\n        keccak256(_srcAddress) == keccak256(trustedRemoteLookup[_srcChainId]),\\r\\n      \\\"Not trusted\\\"\\r\\n    );\\r\\n\\r\\n    (bool success, ) = address(this).call(_payload);\\r\\n    require(success, \\\"LZReceive: No success\\\");\\r\\n  }\\r\\n\\r\\n  /// @notice Step 1 push; Game pushes totalDeltaAllocations to xChainController\\r\\n  /// @notice Pushes the delta allocations from the game to the xChainController\\r\\n  /// @param _vaultNumber number of the vault\\r\\n  /// @param _deltas Array with delta Allocations for all chainIds\\r\\n  function pushAllocations(uint256 _vaultNumber, int256[] memory _deltas) external onlyGame {\\r\\n    bytes4 selector = bytes4(keccak256(\\\"receiveAllocations(uint256,int256[])\\\"));\\r\\n    bytes memory callData = abi.encodeWithSelector(selector, _vaultNumber, _deltas);\\r\\n\\r\\n    xSend(xControllerChain, callData);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 1 receive; Game pushes totalDeltaAllocations to xChainController\\r\\n  /// @notice Receives the delta allocations from the game and routes to xChainController\\r\\n  /// @param _vaultNumber number of the vault\\r\\n  /// @param _deltas Array with delta Allocations for all chainIds\\r\\n  function receiveAllocations(uint256 _vaultNumber, int256[] memory _deltas) external onlySelf {\\r\\n    return IXChainController(xController).receiveAllocationsFromGame(_vaultNumber, _deltas);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 2 push; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainController\\r\\n  /// @notice Pushes cross chain requests for the totalUnderlying for a vaultNumber on a chainId\\r\\n  /// @param _vaultNumber Number of the vault\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _underlying TotalUnderling plus vault balance in vaultcurrency e.g USDC\\r\\n  /// @param _totalSupply Supply of the LP token of the vault on given chainId\\r\\n  /// @param _withdrawalRequests Total amount of withdrawal requests from the vault in LP Tokens\\r\\n  function pushTotalUnderlying(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    uint256 _underlying,\\r\\n    uint256 _totalSupply,\\r\\n    uint256 _withdrawalRequests\\r\\n  ) external onlyVaults {\\r\\n    if (_chainId == xControllerChain) {\\r\\n      return\\r\\n        IXChainController(xController).setTotalUnderlying(\\r\\n          _vaultNumber,\\r\\n          _chainId,\\r\\n          _underlying,\\r\\n          _totalSupply,\\r\\n          _withdrawalRequests\\r\\n        );\\r\\n    } else {\\r\\n      bytes4 selector = bytes4(\\r\\n        keccak256(\\\"receiveTotalUnderlying(uint256,uint16,uint256,uint256,uint256)\\\")\\r\\n      );\\r\\n      bytes memory callData = abi.encodeWithSelector(\\r\\n        selector,\\r\\n        _vaultNumber,\\r\\n        _chainId,\\r\\n        _underlying,\\r\\n        _totalSupply,\\r\\n        _withdrawalRequests\\r\\n      );\\r\\n\\r\\n      xSend(xControllerChain, callData);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Step 2 receive; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainController\\r\\n  /// @notice Receive and set totalUnderlyings from the vaults for every chainId\\r\\n  /// @param _vaultNumber Number of the vault\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _underlying TotalUnderling plus vault balance in vaultcurrency e.g USDC\\r\\n  /// @param _totalSupply Supply of the LP token of the vault on given chainId\\r\\n  /// @param _withdrawalRequests Total amount of withdrawal requests from the vault in LP Tokens\\r\\n  function receiveTotalUnderlying(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    uint256 _underlying,\\r\\n    uint256 _totalSupply,\\r\\n    uint256 _withdrawalRequests\\r\\n  ) external onlySelf {\\r\\n    return\\r\\n      IXChainController(xController).setTotalUnderlying(\\r\\n        _vaultNumber,\\r\\n        _chainId,\\r\\n        _underlying,\\r\\n        _totalSupply,\\r\\n        _withdrawalRequests\\r\\n      );\\r\\n  }\\r\\n\\r\\n  /// @notice Step 3 push; xChainController pushes exchangeRate and amount the vaults have to send back to all vaults\\r\\n  /// @param _vault Address of the Derby Vault on given chainId\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _amountToSendBack Amount the vault has to send back\\r\\n  /// @param _exchangeRate New exchangerate for vaults\\r\\n  function pushSetXChainAllocation(\\r\\n    address _vault,\\r\\n    uint16 _chainId,\\r\\n    uint256 _amountToSendBack,\\r\\n    uint256 _exchangeRate\\r\\n  ) external onlyController {\\r\\n    if (_chainId == homeChain) {\\r\\n      return IVault(_vault).setXChainAllocation(_amountToSendBack, _exchangeRate);\\r\\n    } else {\\r\\n      bytes4 selector = bytes4(keccak256(\\\"receiveSetXChainAllocation(address,uint256,uint256)\\\"));\\r\\n      bytes memory callData = abi.encodeWithSelector(\\r\\n        selector,\\r\\n        _vault,\\r\\n        _amountToSendBack,\\r\\n        _exchangeRate\\r\\n      );\\r\\n\\r\\n      xSend(_chainId, callData);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Step 3 receive; xChainController pushes exchangeRate and amount the vaults have to send back to all vaults\\r\\n  /// @param _vault Address of the Derby Vault on given chainId\\r\\n  /// @param _amountToSendBack Amount the vault has to send back\\r\\n  /// @param _exchangeRate New exchangerate for vaults\\r\\n  function receiveSetXChainAllocation(\\r\\n    address _vault,\\r\\n    uint256 _amountToSendBack,\\r\\n    uint256 _exchangeRate\\r\\n  ) external onlySelf {\\r\\n    return IVault(_vault).setXChainAllocation(_amountToSendBack, _exchangeRate);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 4 push; Push funds from vaults to xChainController\\r\\n  /// @notice Transfers funds from vault to xController for crosschain rebalance\\r\\n  /// @param _vaultNumber Address of the Derby Vault on given chainId\\r\\n  /// @param _amount Number of the vault\\r\\n  /// @param _asset Address of the token to send e.g USDC\\r\\n  function xTransferToController(\\r\\n    uint256 _vaultNumber,\\r\\n    uint256 _amount,\\r\\n    address _asset\\r\\n  ) external onlyVaults {\\r\\n    if (homeChain == xControllerChain) {\\r\\n      IERC20(_asset).transferFrom(msg.sender, xController, _amount);\\r\\n      IXChainController(xController).upFundsReceived(_vaultNumber);\\r\\n    } else {\\r\\n      xTransfer(\\r\\n        xController,\\r\\n        _asset,\\r\\n        connextChainId[homeChain],\\r\\n        connextChainId[xControllerChain],\\r\\n        _amount\\r\\n      );\\r\\n      pushFeedbackToXController(_vaultNumber);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Step 4 push; Push funds from vaults to xChainController\\r\\n  /// @notice Push crosschain feedback to xController to know when the vaultNumber has sent funds\\r\\n  /// @param _vaultNumber Number of the vault\\r\\n  function pushFeedbackToXController(uint256 _vaultNumber) internal {\\r\\n    bytes4 selector = bytes4(keccak256(\\\"receiveFeedbackToXController(uint256)\\\"));\\r\\n    bytes memory callData = abi.encodeWithSelector(selector, _vaultNumber);\\r\\n\\r\\n    xSend(xControllerChain, callData);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 4 receive; Push funds from vaults to xChainController\\r\\n  /// @notice Receive crosschain feedback to xController to know when the vaultNumber has sent funds\\r\\n  /// @param _vaultNumber Number of the vault\\r\\n  function receiveFeedbackToXController(uint256 _vaultNumber) external onlySelf {\\r\\n    return IXChainController(xController).upFundsReceived(_vaultNumber);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 5 push; Push funds from xChainController to vaults\\r\\n  /// @notice Transfers funds from xController to vault for crosschain rebalance\\r\\n  /// @param _chainId Number of chainId\\r\\n  /// @param _amount Amount to send to vault in vaultcurrency\\r\\n  /// @param _asset Addres of underlying e.g USDC\\r\\n  function xTransferToVaults(\\r\\n    address _vault,\\r\\n    uint16 _chainId,\\r\\n    uint256 _amount,\\r\\n    address _asset\\r\\n  ) external onlyController {\\r\\n    xTransfer(_vault, _asset, connextChainId[homeChain], connextChainId[_chainId], _amount);\\r\\n    pushFeedbackToVault(_chainId, _vault);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 5 push; Push funds from xChainController to vaults\\r\\n  /// @notice Push feedback message so the vault knows it has received funds and is ready to rebalance\\r\\n  /// @param _chainId Number of chainId\\r\\n  /// @param _vault Address of the vault on given chainId\\r\\n  function pushFeedbackToVault(uint16 _chainId, address _vault) internal {\\r\\n    bytes4 selector = bytes4(keccak256(\\\"receiveFeedbackToVault(address)\\\"));\\r\\n    bytes memory callData = abi.encodeWithSelector(selector, _vault);\\r\\n\\r\\n    xSend(_chainId, callData);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 5 receive; Push funds from xChainController to vaults\\r\\n  /// @notice Receive feedback message so the vault knows it has received funds and is ready to rebalance\\r\\n  /// @param _vault Address of the vault on given chainId\\r\\n  function receiveFeedbackToVault(address _vault) external onlySelfOrVault {\\r\\n    return IVault(_vault).receiveFunds();\\r\\n  }\\r\\n\\r\\n  /// @notice Step 6 push; Game pushes deltaAllocations to vaults\\r\\n  /// @notice Push protocol allocation array from the game to all vaults/chains\\r\\n  /// @param _vault Address of the vault on given chainId\\r\\n  /// @param _deltas Array with delta allocations where the index matches the protocolId\\r\\n  function pushProtocolAllocationsToVault(\\r\\n    uint16 _chainId,\\r\\n    address _vault,\\r\\n    int256[] memory _deltas\\r\\n  ) external onlyGame {\\r\\n    if (_chainId == homeChain) return IVault(_vault).receiveProtocolAllocations(_deltas);\\r\\n    else {\\r\\n      bytes4 selector = bytes4(keccak256(\\\"receiveProtocolAllocationsToVault(address,int256[])\\\"));\\r\\n      bytes memory callData = abi.encodeWithSelector(selector, _vault, _deltas);\\r\\n\\r\\n      xSend(_chainId, callData);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Step 6 receive; Game pushes deltaAllocations to vaults\\r\\n  /// @notice Receives protocol allocation array from the game to all vaults/chains\\r\\n  /// @param _vault Address of the vault on given chainId\\r\\n  /// @param _deltas Array with delta allocations where the index matches the protocolId\\r\\n  function receiveProtocolAllocationsToVault(address _vault, int256[] memory _deltas)\\r\\n    external\\r\\n    onlySelf\\r\\n  {\\r\\n    return IVault(_vault).receiveProtocolAllocations(_deltas);\\r\\n  }\\r\\n\\r\\n  /// @notice Step 8 push; Vaults push rewardsPerLockedToken to game\\r\\n  /// @notice Push price and rewards array from vaults to the game\\r\\n  /// @param _vaultNumber Number of the vault\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _rewards Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\\r\\n  function pushRewardsToGame(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    int256[] memory _rewards\\r\\n  ) external onlyVaults {\\r\\n    if (_chainId == homeChain) {\\r\\n      return IGame(game).settleRewards(_vaultNumber, _chainId, _rewards);\\r\\n    } else {\\r\\n      bytes4 selector = bytes4(keccak256(\\\"receiveRewardsToGame(uint256,uint16,int256[])\\\"));\\r\\n      bytes memory callData = abi.encodeWithSelector(selector, _vaultNumber, _chainId, _rewards);\\r\\n\\r\\n      xSend(gameChain, callData);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Step 8 receive; Vaults push rewardsPerLockedToken to game\\r\\n  /// @notice Receives price and rewards array from vaults to the game\\r\\n  /// @param _vaultNumber Number of the vault\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _rewards Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\\r\\n  function receiveRewardsToGame(\\r\\n    uint256 _vaultNumber,\\r\\n    uint16 _chainId,\\r\\n    int256[] memory _rewards\\r\\n  ) external onlySelf {\\r\\n    return IGame(game).settleRewards(_vaultNumber, _chainId, _rewards);\\r\\n  }\\r\\n\\r\\n  /// @notice Push feedback to the vault if the vault is set to on or off\\r\\n  /// @param _vault Address of the Derby Vault on given chainId\\r\\n  /// @param _chainId Number of chain used\\r\\n  /// @param _state bool for chainId on or off\\r\\n  function pushStateFeedbackToVault(\\r\\n    address _vault,\\r\\n    uint16 _chainId,\\r\\n    bool _state\\r\\n  ) external onlyController {\\r\\n    if (_chainId == homeChain) {\\r\\n      return IVault(_vault).toggleVaultOnOff(_state);\\r\\n    } else {\\r\\n      bytes4 selector = bytes4(keccak256(\\\"receiveStateFeedbackToVault(address,bool)\\\"));\\r\\n      bytes memory callData = abi.encodeWithSelector(selector, _vault, _state);\\r\\n\\r\\n      xSend(_chainId, callData);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  /// @notice Receive feedback for the vault if the vault is set to on or off\\r\\n  /// @param _vault Address of the Derby Vault on given chainId\\r\\n  /// @param _state bool for chainId on or off\\r\\n  function receiveStateFeedbackToVault(address _vault, bool _state) external onlySelf {\\r\\n    return IVault(_vault).toggleVaultOnOff(_state);\\r\\n  }\\r\\n\\r\\n  /// @notice returns number of decimals for the vault\\r\\n  function getDecimals(address _vault) external view returns (uint256) {\\r\\n    return IVault(_vault).decimals();\\r\\n  }\\r\\n\\r\\n  /// @notice Getter for dao address\\r\\n  function getDao() public view returns (address) {\\r\\n    return dao;\\r\\n  }\\r\\n\\r\\n  /*\\r\\n  Only Dao functions\\r\\n  */\\r\\n\\r\\n  /// @notice set trusted provider on remote chains, allow owner to set it multiple times.\\r\\n  /// @param _srcChainId Chain is for remote xprovider, some as the remote receiving contract chain id (xReceive)\\r\\n  /// @param _srcAddress Address of remote xprovider\\r\\n  function setTrustedRemote(uint16 _srcChainId, bytes calldata _srcAddress) external onlyDao {\\r\\n    trustedRemoteLookup[_srcChainId] = _srcAddress;\\r\\n    emit SetTrustedRemote(_srcChainId, _srcAddress);\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for xControlleraddress\\r\\n  /// @param _xController New address of _xController\\r\\n  function setXController(address _xController) external onlyDao {\\r\\n    xController = _xController;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for xControllerProvider address\\r\\n  /// @param _xControllerProvider New address of xProvider for xController chain\\r\\n  function setXControllerProvider(address _xControllerProvider) external onlyDao {\\r\\n    xControllerProvider = _xControllerProvider;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for xControllerProvider address\\r\\n  /// @param _xControllerChain New address of xProvider for xController chain\\r\\n  function setXControllerChainId(uint16 _xControllerChain) external onlyDao {\\r\\n    xControllerChain = _xControllerChain;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for homeChain Id\\r\\n  /// @param _homeChain New home chainId\\r\\n  function setHomeChain(uint16 _homeChain) external onlyDao {\\r\\n    homeChain = _homeChain;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for gameChain Id\\r\\n  /// @param _gameChain New chainId for game contract\\r\\n  function setGameChainId(uint16 _gameChain) external onlyDao {\\r\\n    gameChain = _gameChain;\\r\\n  }\\r\\n\\r\\n  /// @notice links layerZero chain id to a connext chain id for transfers\\r\\n  function setConnextChainId(uint16 _layerzeroChainId, uint32 _connextChainId) external onlyDao {\\r\\n    connextChainId[_layerzeroChainId] = _connextChainId;\\r\\n  }\\r\\n\\r\\n  /// @notice Whitelists vault address for onlyVault modifier\\r\\n  function toggleVaultWhitelist(address _vault) external onlyDao {\\r\\n    vaultWhitelist[_vault] = !vaultWhitelist[_vault];\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for dao address\\r\\n  function setDao(address _dao) external onlyDao {\\r\\n    dao = _dao;\\r\\n  }\\r\\n\\r\\n  /// @notice Setter for new game address\\r\\n  /// @param _game New address of the game\\r\\n  function setGame(address _game) external onlyDao {\\r\\n    game = _game;\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x7b4169e410f1cbec5778536e473a4f3058e6ce5e24e82f0ea48340322cc8d542\",\"license\":\"MIT\"},\"contracts/libraries/LibConnextStorage.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n// ============= Structs =============\\r\\n\\r\\n/**\\r\\n * @notice These are the call parameters that will remain constant between the\\r\\n * two chains. They are supplied on `xcall` and should be asserted on `execute`\\r\\n * @property to - The account that receives funds, in the event of a crosschain call,\\r\\n * will receive funds if the call fails.\\r\\n * @param to - The address you are sending funds (and potentially data) to\\r\\n * @param callData - The data to execute on the receiving chain. If no crosschain call is needed, then leave empty.\\r\\n * @param originDomain - The originating domain (i.e. where `xcall` is called). Must match nomad domain schema\\r\\n * @param destinationDomain - The final domain (i.e. where `execute` / `reconcile` are called). Must match nomad domain schema\\r\\n * @param agent - An address who can execute txs on behalf of `to`, in addition to allowing relayers\\r\\n * @param recovery - The address to send funds to if your `Executor.execute call` fails\\r\\n * @param callback - The address on the origin domain of the callback contract\\r\\n * @param callbackFee - The relayer fee to execute the callback\\r\\n * @param forceSlow - If true, will take slow liquidity path even if it is not a permissioned call\\r\\n * @param receiveLocal - If true, will use the local nomad asset on the destination instead of adopted.\\r\\n * @param relayerFee - The amount of relayer fee the tx called xcall with\\r\\n * @param slippageTol - Max bps of original due to slippage (i.e. would be 9995 to tolerate .05% slippage)\\r\\n */\\r\\nstruct CallParams {\\r\\n  address to;\\r\\n  bytes callData;\\r\\n  uint32 originDomain;\\r\\n  uint32 destinationDomain;\\r\\n  address agent;\\r\\n  address recovery;\\r\\n  bool forceSlow;\\r\\n  bool receiveLocal;\\r\\n  address callback;\\r\\n  uint256 callbackFee;\\r\\n  uint256 relayerFee;\\r\\n  uint256 slippageTol;\\r\\n}\\r\\n\\r\\n/**\\r\\n * @notice The arguments you supply to the `xcall` function called by user on origin domain\\r\\n * @param params - The CallParams. These are consistent across sending and receiving chains\\r\\n * @param transactingAssetId - The asset the caller sent with the transfer. Can be the adopted, canonical,\\r\\n * or the representational asset\\r\\n * @param amount - The amount of transferring asset the tx called xcall with\\r\\n */\\r\\nstruct XCallArgs {\\r\\n  CallParams params;\\r\\n  address transactingAssetId; // Could be adopted, local, or wrapped\\r\\n  uint256 amount;\\r\\n}\\r\\n\",\"keccak256\":\"0x3f312cb42ef31281030dc1013d8318cca1389d251f09baf49db6a59fb3c2d7f6\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b5060405162002974380380620029748339810160408190526200003491620000b8565b6001600160a01b0395861660805293851660a052600080549386166001600160a01b03199485161790556003805460018054938816939095169290921790935561ffff909316600160a01b026001600160b01b031990931693169290921717905562000143565b80516001600160a01b0381168114620000b357600080fd5b919050565b60008060008060008060c08789031215620000d257600080fd5b620000dd876200009b565b9550620000ed602088016200009b565b9450620000fd604088016200009b565b93506200010d606088016200009b565b92506200011d608088016200009b565b915060a087015161ffff811681146200013557600080fd5b809150509295509295509295565b60805160a0516127ef62000185600039600081816104f8015281816119a40152611aeb01526000818161034b01528181610599015261182201526127ef6000f3fe608060405234801561001057600080fd5b50600436106101d75760003560e01c80621d3567146101dc5780630268db32146101f15780630ce29fca1461020457806313dc97de146102175780631a5d8f871461022a5780631d2c3dad1461023d5780633016227a14610250578063357fb68d1461026357806339daa1b21461028c5780633d24b652146102bf578063487ed201146102e75780634f514f06146102fa578063507b600d1461030d578063537b1e2c146103205780635dab7709146103335780635e280f111461034657806360a15a6c1461036d57806365301abd146103805780636637b882146103935780637468a52b146103a65780637533d788146103bb578063753ae856146103db5780637ffdbeea146103ee578063819912a214610401578063839436d31461041457806389cd2dfd146104275780639202c112146104625780639951d33d14610475578063b70811bc14610488578063bd73ce2e14610499578063c3fe3e28146104ac578063ca066bf4146104bf578063cf54aaa0146104d2578063de4b0548146104f3578063e39949631461051a578063e4eadf371461052d578063eb8d72b714610540578063ec08035514610553578063f4239caf14610566578063ff4763e514610579575b600080fd5b6101ef6101ea366004611d65565b61058e565b005b6101ef6101ff366004611eae565b610753565b6101ef610212366004611f0b565b61080c565b6101ef610225366004611f40565b61098c565b6101ef610238366004611f62565b6109d8565b6101ef61024b366004611fa8565b610a69565b6101ef61025e366004611fe8565b610ac1565b600154610276906001600160a01b031681565b6040516102839190612037565b60405180910390f35b6102af61029a36600461204b565b60066020526000908152604090205460ff1681565b6040519015158152602001610283565b6003546102d490600160b01b900461ffff1681565b60405161ffff9091168152602001610283565b6101ef6102f5366004612066565b610beb565b6101ef61030836600461204b565b610cf1565b6101ef61031b36600461204b565b610d44565b600254610276906001600160a01b031681565b6101ef610341366004611f40565b610dfe565b6102767f000000000000000000000000000000000000000000000000000000000000000081565b6101ef61037b3660046120bc565b610e4a565b6101ef61038e366004612066565b610ec3565b6101ef6103a136600461204b565b610f16565b6003546102d490600160a01b900461ffff1681565b6103ce6103c9366004611f40565b610f62565b6040516102839190612140565b6101ef6103e9366004611eae565b610ffc565b6101ef6103fc366004612153565b61104d565b6101ef61040f36600461204b565b6110b2565b6101ef61042236600461216c565b6110fe565b61044d610435366004611f40565b60046020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610283565b6101ef61047036600461204b565b611172565b6101ef6104833660046121c7565b6111be565b6000546001600160a01b0316610276565b6101ef6104a736600461204b565b6112a5565b600354610276906001600160a01b031681565b6101ef6104cd36600461220e565b6112f1565b6104e56104e036600461204b565b6113d8565b604051908152602001610283565b6102767f000000000000000000000000000000000000000000000000000000000000000081565b6101ef610528366004611f40565b611442565b6101ef61053b366004611f62565b61148e565b6101ef61054e36600461223a565b6115d3565b6101ef61056136600461228c565b61165c565b6101ef6105743660046122b8565b6116a9565b6003546102d490600160c01b900461ffff1681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105fd5760405162461bcd60e51b815260206004820152600f60248201526e139bdd08185b88195b991c1bda5b9d608a1b60448201526064015b60405180910390fd5b61ffff86166000908152600560205260409020805461061b906122eb565b851490508015610669575061ffff86166000908152600560205260409081902090516106479190612326565b6040518091039020858560405161065f9291906123c2565b6040518091039020145b6106a35760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1c9d5cdd195960aa1b60448201526064016105f4565b6000306001600160a01b031683836040516106bf9291906123c2565b6000604051808303816000865af19150503d80600081146106fc576040519150601f19603f3d011682016040523d82523d6000602084013e610701565b606091505b505090508061074a5760405162461bcd60e51b81526020600482015260156024820152744c5a526563656976653a204e6f207375636365737360581b60448201526064016105f4565b50505050505050565b6003546001600160a01b0316331461077d5760405162461bcd60e51b81526004016105f4906123d2565b60007f753ae8560d5dfc2e430e0be59681f152d39882aec90f6b86bcd6dd8560dd8da1905060008184846040516024016107b892919061243c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526003549091506108069061ffff600160b01b90910416826116fc565b50505050565b3360009081526006602052604090205460ff1661083b5760405162461bcd60e51b81526004016105f49061245d565b600354600160a01b810461ffff908116600160b01b90920416141561092d576001546040516323b872dd60e01b81526001600160a01b03808416926323b872dd9261088e9233921690879060040161248d565b6020604051808303816000875af11580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d191906124b1565b5060015460405163f6d53d7b60e01b8152600481018590526001600160a01b039091169063f6d53d7b906024015b600060405180830381600087803b15801561091957600080fd5b505af115801561074a573d6000803e3d6000fd5b60015460035461ffff600160a01b8204811660009081526004602052604080822054600160b01b9094049092168152205461097e926001600160a01b031691849163ffffffff91821691168661185f565b61098783611b82565b505050565b6000546001600160a01b031633146109b65760405162461bcd60e51b81526004016105f4906124ce565b6003805461ffff909216600160c01b0261ffff60c01b19909216919091179055565b3330146109f75760405162461bcd60e51b81526004016105f4906124fc565b6001546040516324ce881f60e01b81526001600160a01b03909116906324ce881f90610a2f908890889088908890889060040161252b565b600060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b505050505b5050505050565b6000546001600160a01b03163314610a935760405162461bcd60e51b81526004016105f4906124ce565b61ffff919091166000908152600460205260409020805463ffffffff191663ffffffff909216919091179055565b6001546001600160a01b03163314610aeb5760405162461bcd60e51b81526004016105f490612552565b60035461ffff848116600160a01b909204161415610b69576040516302d43be960e61b815260048101839052602481018290526001600160a01b0385169063b50efa4090604401600060405180830381600087803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b50505050610806565b604080516001600160a01b03861660248201526044810184905260648082018490528251808303909101815260849091019091526020810180516001600160e01b031663f4239caf60e01b1790527ff4239caf9aef7cdeeb4b7db4732ac4dbba437f76ca5c09beeeaf02615784e33690610be385826116fc565b505050505050565b3360009081526006602052604090205460ff16610c1a5760405162461bcd60e51b81526004016105f49061245d565b60035461ffff838116600160a01b909204161415610c66576003546040516301e6790b60e41b81526001600160a01b0390911690631e6790b0906108ff90869086908690600401612587565b60007f65301abd657fb199cd070d218e0e2203452a71c494fb22a9e3aed7095eb2507e9050600081858585604051602401610ca393929190612587565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600354909150610a629061ffff600160c01b90910416826116fc565b6000546001600160a01b03163314610d1b5760405162461bcd60e51b81526004016105f4906124ce565b6001600160a01b03166000908152600660205260409020805460ff19811660ff90911615179055565b33301480610d6157503360009081526006602052604090205460ff165b610dad5760405162461bcd60e51b815260206004820152601e60248201527f4c5a50726f76696465723a206f6e6c792053656c66206f72205661756c74000060448201526064016105f4565b806001600160a01b0316625c33e16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610de757600080fd5b505af1158015610a62573d6000803e3d6000fd5b50565b6000546001600160a01b03163314610e285760405162461bcd60e51b81526004016105f4906124ce565b6003805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b333014610e695760405162461bcd60e51b81526004016105f4906124fc565b604051632189651f60e01b81526001600160a01b03831690632189651f90610e959084906004016125b3565b600060405180830381600087803b158015610eaf57600080fd5b505af1158015610be3573d6000803e3d6000fd5b333014610ee25760405162461bcd60e51b81526004016105f4906124fc565b6003546040516301e6790b60e41b81526001600160a01b0390911690631e6790b0906108ff90869086908690600401612587565b6000546001600160a01b03163314610f405760405162461bcd60e51b81526004016105f4906124ce565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60056020526000908152604090208054610f7b906122eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa7906122eb565b8015610ff45780601f10610fc957610100808354040283529160200191610ff4565b820191906000526020600020905b815481529060010190602001808311610fd757829003601f168201915b505050505081565b33301461101b5760405162461bcd60e51b81526004016105f4906124fc565b6001546040516344424a7160e11b81526001600160a01b039091169063888494e290610e95908590859060040161243c565b33301461106c5760405162461bcd60e51b81526004016105f4906124fc565b60015460405163f6d53d7b60e01b8152600481018390526001600160a01b039091169063f6d53d7b90602401600060405180830381600087803b158015610de757600080fd5b6000546001600160a01b031633146110dc5760405162461bcd60e51b81526004016105f4906124ce565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146111285760405162461bcd60e51b81526004016105f490612552565b60035461ffff600160a01b9091048116600090815260046020526040808220549286168252902054611168918691849163ffffffff90811691168661185f565b6108068385611bf6565b6000546001600160a01b0316331461119c5760405162461bcd60e51b81526004016105f4906124ce565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146111e85760405162461bcd60e51b81526004016105f490612552565b60035461ffff838116600160a01b90920416141561122e57604051631947f7ad60e31b815281151560048201526001600160a01b0384169063ca3fbd68906024016108ff565b604080516001600160a01b03851660248201528215156044808301919091528251808303909101815260649091019091526020810180516001600160e01b031663ec08035560e01b1790527fec080355f00e3698b22cd58179821bba9248402b3373207648777691d542982790610a6284826116fc565b6000546001600160a01b031633146112cf5760405162461bcd60e51b81526004016105f4906124ce565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316331461131b5760405162461bcd60e51b81526004016105f4906123d2565b60035461ffff848116600160a01b90920416141561135f57604051632189651f60e01b81526001600160a01b03831690632189651f906108ff9084906004016125b3565b60007f60a15a6ceeddd71d7d400d721256643867757bd9c349090ff2f5d4ac2855b0549050600081848460405160240161139a9291906125c6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050610a6285826116fc565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c91906125ea565b92915050565b6000546001600160a01b0316331461146c5760405162461bcd60e51b81526004016105f4906124ce565b6003805461ffff909216600160b01b0261ffff60b01b19909216919091179055565b3360009081526006602052604090205460ff166114bd5760405162461bcd60e51b81526004016105f49061245d565b60035461ffff858116600160b01b909204161415611544576001546040516324ce881f60e01b81526001600160a01b03909116906324ce881f9061150d908890889088908890889060040161252b565b600060405180830381600087803b15801561152757600080fd5b505af115801561153b573d6000803e3d6000fd5b50505050610a62565b60007f1a5d8f87f2c79ee568104e2a7ddc893589f312f340e6b1891b3d9f89f05c10539050600081878787878760405160240161158595949392919061252b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915260035490915061074a9061ffff600160b01b90910416826116fc565b6000546001600160a01b031633146115fd5760405162461bcd60e51b81526004016105f4906124ce565b61ffff8316600090815260056020526040902061161b908383611c6d565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161164f93929190612603565b60405180910390a1505050565b33301461167b5760405162461bcd60e51b81526004016105f4906124fc565b604051631947f7ad60e31b815281151560048201526001600160a01b0383169063ca3fbd6890602401610e95565b3330146116c85760405162461bcd60e51b81526004016105f4906124fc565b6040516302d43be960e61b815260048101839052602481018290526001600160a01b0384169063b50efa40906044016108ff565b61ffff82166000908152600560205260408120805461171a906122eb565b80601f0160208091040260200160405190810160405280929190818152602001828054611746906122eb565b80156117935780601f1061176857610100808354040283529160200191611793565b820191906000526020600020905b81548152906001019060200180831161177657829003601f168201915b505050505090508051600014156117fe5760405162461bcd60e51b815260206004820152602960248201527f4c5a50726f76696465723a2064657374696e6174696f6e20636861696e206e6f6044820152681d081d1c9d5cdd195960ba1b60648201526084016105f4565b604080516020810182526000808252915162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263c5803100926108ff928892879289923392919060040161263d565b604051636eb1769f60e11b815233600482015230602482015281906001600160a01b0386169063dd62ed3e90604401602060405180830381865afa1580156118ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cf91906125ea565b10156119195760405162461bcd60e51b8152602060048201526019602482015278131696141c9bdd9a59195c8e88139bdd08185c1c1c9bdd9959603a1b60448201526064016105f4565b6040516323b872dd60e01b81526001600160a01b038516906323b872dd906119499033903090869060040161248d565b6020604051808303816000875af1158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906124b1565b5060405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905285169063095ea7b3906044016020604051808303816000875af11580156119fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2091906124b1565b506000604051806101800160405280876001600160a01b031681526020016040518060200160405280600081525081526020018563ffffffff1681526020018463ffffffff168152602001876001600160a01b03168152602001876001600160a01b0316815260200160001515815260200160001515815260200160006001600160a01b03168152602001600081526020016000815260200161270b815250905060006040518060600160405280838152602001876001600160a01b031681526020018481525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636c0636a1826040518263ffffffff1660e01b8152600401611b3591906126a4565b6020604051808303816000875af1158015611b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7891906125ea565b5050505050505050565b6040805160248082018490528251808303909101815260449091019091526020810180516001600160e01b0316633ffedf7560e11b1790526003547f7ffdbeeacab76b1c6d0fac622f57e8e98420f7e35cc5fabcd844aa3d5182316491906109879061ffff600160b01b90910416826116fc565b60007f507b600dd00124c20ece910f48c6a50bc548d4a2fc94f563631e5abfe3b5f987905060008183604051602401611c2f9190612037565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905061080684826116fc565b828054611c79906122eb565b90600052602060002090601f016020900481019282611c9b5760008555611ce1565b82601f10611cb45782800160ff19823516178555611ce1565b82800160010185558215611ce1579182015b82811115611ce1578235825591602001919060010190611cc6565b50611ced929150611cf1565b5090565b5b80821115611ced5760008155600101611cf2565b803561ffff81168114611d1857600080fd5b919050565b60008083601f840112611d2f57600080fd5b5081356001600160401b03811115611d4657600080fd5b602083019150836020828501011115611d5e57600080fd5b9250929050565b60008060008060008060808789031215611d7e57600080fd5b611d8787611d06565b955060208701356001600160401b0380821115611da357600080fd5b611daf8a838b01611d1d565b9097509550604089013591508082168214611dc957600080fd5b90935060608801359080821115611ddf57600080fd5b50611dec89828a01611d1d565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611e2557600080fd5b813560206001600160401b0380831115611e4157611e41611dfe565b8260051b604051601f19603f83011681018181108482111715611e6657611e66611dfe565b604052938452858101830193838101925087851115611e8457600080fd5b83870191505b84821015611ea357813583529183019190830190611e8a565b979650505050505050565b60008060408385031215611ec157600080fd5b8235915060208301356001600160401b03811115611ede57600080fd5b611eea85828601611e14565b9150509250929050565b80356001600160a01b0381168114611d1857600080fd5b600080600060608486031215611f2057600080fd5b8335925060208401359150611f3760408501611ef4565b90509250925092565b600060208284031215611f5257600080fd5b611f5b82611d06565b9392505050565b600080600080600060a08688031215611f7a57600080fd5b85359450611f8a60208701611d06565b94979496505050506040830135926060810135926080909101359150565b60008060408385031215611fbb57600080fd5b611fc483611d06565b9150602083013563ffffffff81168114611fdd57600080fd5b809150509250929050565b60008060008060808587031215611ffe57600080fd5b61200785611ef4565b935061201560208601611d06565b93969395505050506040820135916060013590565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b60006020828403121561205d57600080fd5b611f5b82611ef4565b60008060006060848603121561207b57600080fd5b8335925061208b60208501611d06565b915060408401356001600160401b038111156120a657600080fd5b6120b286828701611e14565b9150509250925092565b600080604083850312156120cf57600080fd5b6120d883611ef4565b915060208301356001600160401b03811115611ede57600080fd5b6000815180845260005b81811015612119576020818501810151868301820152016120fd565b8181111561212b576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611f5b60208301846120f3565b60006020828403121561216557600080fd5b5035919050565b6000806000806080858703121561218257600080fd5b61218b85611ef4565b935061219960208601611d06565b9250604085013591506121ae60608601611ef4565b905092959194509250565b8015158114610dfb57600080fd5b6000806000606084860312156121dc57600080fd5b6121e584611ef4565b92506121f360208501611d06565b91506040840135612203816121b9565b809150509250925092565b60008060006060848603121561222357600080fd5b61222c84611d06565b925061208b60208501611ef4565b60008060006040848603121561224f57600080fd5b61225884611d06565b925060208401356001600160401b0381111561227357600080fd5b61227f86828701611d1d565b9497909650939450505050565b6000806040838503121561229f57600080fd5b6122a883611ef4565b91506020830135611fdd816121b9565b6000806000606084860312156122cd57600080fd5b6122d684611ef4565b95602085013595506040909401359392505050565b600181811c908216806122ff57607f821691505b6020821081141561232057634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061234257607f831692505b602080841082141561236257634e487b7160e01b86526022600452602486fd5b8180156123765760018114612387576123b4565b60ff198616895284890196506123b4565b60008a81526020902060005b868110156123ac5781548b820152908501908301612393565b505084890196505b509498975050505050505050565b8183823760009101908152919050565b6020808252601590820152744c5a50726f76696465723a206f6e6c792047616d6560581b604082015260600190565b600081518084526020808501945080840160005b8381101561243157815187529582019590820190600101612415565b509495945050505050565b8281526040602082015260006124556040830184612401565b949350505050565b6020808252601690820152751316941c9bdd9a59195c8e881bdb9b1e481d985d5b1d60521b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156124c357600080fd5b8151611f5b816121b9565b6020808252601490820152734c5a50726f76696465723a206f6e6c792044414f60601b604082015260600190565b602080825260159082015274262d283937bb34b232b91d1037b7363c9029b2b63360591b604082015260600190565b94855261ffff93909316602085015260408401919091526060830152608082015260a00190565b6020808252601b908201527a262d283937bb34b232b91d1037b7363c9021b7b73a3937b63632b960291b604082015260600190565b83815261ffff831660208201526060604082015260006125aa6060830184612401565b95945050505050565b602081526000611f5b6020830184612401565b6001600160a01b038316815260406020820181905260009061245590830184612401565b6000602082840312156125fc57600080fd5b5051919050565b61ffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b61ffff8716815260c06020820152600061265a60c08301886120f3565b828103604084015261266c81886120f3565b6001600160a01b0387811660608601528616608085015283810360a0850152905061269781856120f3565b9998505050505050505050565b6020815260008251606060208401526126c160808401825161202a565b60208101516101808060a08601526126dd6102008601836120f3565b915060408301516126f660c087018263ffffffff169052565b50606083015163ffffffff1660e0860152608083015161010061271b8188018361202a565b60a085015191506101206127318189018461202a565b60c08601519250610140612748818a018515159052565b60e0870151935061016061275f818b018615159052565b838801519450612771868b018661202a565b918701516101a08a01528601516101c0890152909401516101e08701525050602085015191506127a4604085018361202a565b6040850151606085015280925050509291505056fea26469706673582212202812f8a319410e216fc41d7b89a5102e2750f79c9d516901c5c24b7c0a4b23ed64736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101d75760003560e01c80621d3567146101dc5780630268db32146101f15780630ce29fca1461020457806313dc97de146102175780631a5d8f871461022a5780631d2c3dad1461023d5780633016227a14610250578063357fb68d1461026357806339daa1b21461028c5780633d24b652146102bf578063487ed201146102e75780634f514f06146102fa578063507b600d1461030d578063537b1e2c146103205780635dab7709146103335780635e280f111461034657806360a15a6c1461036d57806365301abd146103805780636637b882146103935780637468a52b146103a65780637533d788146103bb578063753ae856146103db5780637ffdbeea146103ee578063819912a214610401578063839436d31461041457806389cd2dfd146104275780639202c112146104625780639951d33d14610475578063b70811bc14610488578063bd73ce2e14610499578063c3fe3e28146104ac578063ca066bf4146104bf578063cf54aaa0146104d2578063de4b0548146104f3578063e39949631461051a578063e4eadf371461052d578063eb8d72b714610540578063ec08035514610553578063f4239caf14610566578063ff4763e514610579575b600080fd5b6101ef6101ea366004611d65565b61058e565b005b6101ef6101ff366004611eae565b610753565b6101ef610212366004611f0b565b61080c565b6101ef610225366004611f40565b61098c565b6101ef610238366004611f62565b6109d8565b6101ef61024b366004611fa8565b610a69565b6101ef61025e366004611fe8565b610ac1565b600154610276906001600160a01b031681565b6040516102839190612037565b60405180910390f35b6102af61029a36600461204b565b60066020526000908152604090205460ff1681565b6040519015158152602001610283565b6003546102d490600160b01b900461ffff1681565b60405161ffff9091168152602001610283565b6101ef6102f5366004612066565b610beb565b6101ef61030836600461204b565b610cf1565b6101ef61031b36600461204b565b610d44565b600254610276906001600160a01b031681565b6101ef610341366004611f40565b610dfe565b6102767f000000000000000000000000000000000000000000000000000000000000000081565b6101ef61037b3660046120bc565b610e4a565b6101ef61038e366004612066565b610ec3565b6101ef6103a136600461204b565b610f16565b6003546102d490600160a01b900461ffff1681565b6103ce6103c9366004611f40565b610f62565b6040516102839190612140565b6101ef6103e9366004611eae565b610ffc565b6101ef6103fc366004612153565b61104d565b6101ef61040f36600461204b565b6110b2565b6101ef61042236600461216c565b6110fe565b61044d610435366004611f40565b60046020526000908152604090205463ffffffff1681565b60405163ffffffff9091168152602001610283565b6101ef61047036600461204b565b611172565b6101ef6104833660046121c7565b6111be565b6000546001600160a01b0316610276565b6101ef6104a736600461204b565b6112a5565b600354610276906001600160a01b031681565b6101ef6104cd36600461220e565b6112f1565b6104e56104e036600461204b565b6113d8565b604051908152602001610283565b6102767f000000000000000000000000000000000000000000000000000000000000000081565b6101ef610528366004611f40565b611442565b6101ef61053b366004611f62565b61148e565b6101ef61054e36600461223a565b6115d3565b6101ef61056136600461228c565b61165c565b6101ef6105743660046122b8565b6116a9565b6003546102d490600160c01b900461ffff1681565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146105fd5760405162461bcd60e51b815260206004820152600f60248201526e139bdd08185b88195b991c1bda5b9d608a1b60448201526064015b60405180910390fd5b61ffff86166000908152600560205260409020805461061b906122eb565b851490508015610669575061ffff86166000908152600560205260409081902090516106479190612326565b6040518091039020858560405161065f9291906123c2565b6040518091039020145b6106a35760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1c9d5cdd195960aa1b60448201526064016105f4565b6000306001600160a01b031683836040516106bf9291906123c2565b6000604051808303816000865af19150503d80600081146106fc576040519150601f19603f3d011682016040523d82523d6000602084013e610701565b606091505b505090508061074a5760405162461bcd60e51b81526020600482015260156024820152744c5a526563656976653a204e6f207375636365737360581b60448201526064016105f4565b50505050505050565b6003546001600160a01b0316331461077d5760405162461bcd60e51b81526004016105f4906123d2565b60007f753ae8560d5dfc2e430e0be59681f152d39882aec90f6b86bcd6dd8560dd8da1905060008184846040516024016107b892919061243c565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526003549091506108069061ffff600160b01b90910416826116fc565b50505050565b3360009081526006602052604090205460ff1661083b5760405162461bcd60e51b81526004016105f49061245d565b600354600160a01b810461ffff908116600160b01b90920416141561092d576001546040516323b872dd60e01b81526001600160a01b03808416926323b872dd9261088e9233921690879060040161248d565b6020604051808303816000875af11580156108ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d191906124b1565b5060015460405163f6d53d7b60e01b8152600481018590526001600160a01b039091169063f6d53d7b906024015b600060405180830381600087803b15801561091957600080fd5b505af115801561074a573d6000803e3d6000fd5b60015460035461ffff600160a01b8204811660009081526004602052604080822054600160b01b9094049092168152205461097e926001600160a01b031691849163ffffffff91821691168661185f565b61098783611b82565b505050565b6000546001600160a01b031633146109b65760405162461bcd60e51b81526004016105f4906124ce565b6003805461ffff909216600160c01b0261ffff60c01b19909216919091179055565b3330146109f75760405162461bcd60e51b81526004016105f4906124fc565b6001546040516324ce881f60e01b81526001600160a01b03909116906324ce881f90610a2f908890889088908890889060040161252b565b600060405180830381600087803b158015610a4957600080fd5b505af1158015610a5d573d6000803e3d6000fd5b505050505b5050505050565b6000546001600160a01b03163314610a935760405162461bcd60e51b81526004016105f4906124ce565b61ffff919091166000908152600460205260409020805463ffffffff191663ffffffff909216919091179055565b6001546001600160a01b03163314610aeb5760405162461bcd60e51b81526004016105f490612552565b60035461ffff848116600160a01b909204161415610b69576040516302d43be960e61b815260048101839052602481018290526001600160a01b0385169063b50efa4090604401600060405180830381600087803b158015610b4c57600080fd5b505af1158015610b60573d6000803e3d6000fd5b50505050610806565b604080516001600160a01b03861660248201526044810184905260648082018490528251808303909101815260849091019091526020810180516001600160e01b031663f4239caf60e01b1790527ff4239caf9aef7cdeeb4b7db4732ac4dbba437f76ca5c09beeeaf02615784e33690610be385826116fc565b505050505050565b3360009081526006602052604090205460ff16610c1a5760405162461bcd60e51b81526004016105f49061245d565b60035461ffff838116600160a01b909204161415610c66576003546040516301e6790b60e41b81526001600160a01b0390911690631e6790b0906108ff90869086908690600401612587565b60007f65301abd657fb199cd070d218e0e2203452a71c494fb22a9e3aed7095eb2507e9050600081858585604051602401610ca393929190612587565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152600354909150610a629061ffff600160c01b90910416826116fc565b6000546001600160a01b03163314610d1b5760405162461bcd60e51b81526004016105f4906124ce565b6001600160a01b03166000908152600660205260409020805460ff19811660ff90911615179055565b33301480610d6157503360009081526006602052604090205460ff165b610dad5760405162461bcd60e51b815260206004820152601e60248201527f4c5a50726f76696465723a206f6e6c792053656c66206f72205661756c74000060448201526064016105f4565b806001600160a01b0316625c33e16040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610de757600080fd5b505af1158015610a62573d6000803e3d6000fd5b50565b6000546001600160a01b03163314610e285760405162461bcd60e51b81526004016105f4906124ce565b6003805461ffff909216600160a01b0261ffff60a01b19909216919091179055565b333014610e695760405162461bcd60e51b81526004016105f4906124fc565b604051632189651f60e01b81526001600160a01b03831690632189651f90610e959084906004016125b3565b600060405180830381600087803b158015610eaf57600080fd5b505af1158015610be3573d6000803e3d6000fd5b333014610ee25760405162461bcd60e51b81526004016105f4906124fc565b6003546040516301e6790b60e41b81526001600160a01b0390911690631e6790b0906108ff90869086908690600401612587565b6000546001600160a01b03163314610f405760405162461bcd60e51b81526004016105f4906124ce565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60056020526000908152604090208054610f7b906122eb565b80601f0160208091040260200160405190810160405280929190818152602001828054610fa7906122eb565b8015610ff45780601f10610fc957610100808354040283529160200191610ff4565b820191906000526020600020905b815481529060010190602001808311610fd757829003601f168201915b505050505081565b33301461101b5760405162461bcd60e51b81526004016105f4906124fc565b6001546040516344424a7160e11b81526001600160a01b039091169063888494e290610e95908590859060040161243c565b33301461106c5760405162461bcd60e51b81526004016105f4906124fc565b60015460405163f6d53d7b60e01b8152600481018390526001600160a01b039091169063f6d53d7b90602401600060405180830381600087803b158015610de757600080fd5b6000546001600160a01b031633146110dc5760405162461bcd60e51b81526004016105f4906124ce565b600380546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146111285760405162461bcd60e51b81526004016105f490612552565b60035461ffff600160a01b9091048116600090815260046020526040808220549286168252902054611168918691849163ffffffff90811691168661185f565b6108068385611bf6565b6000546001600160a01b0316331461119c5760405162461bcd60e51b81526004016105f4906124ce565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6001546001600160a01b031633146111e85760405162461bcd60e51b81526004016105f490612552565b60035461ffff838116600160a01b90920416141561122e57604051631947f7ad60e31b815281151560048201526001600160a01b0384169063ca3fbd68906024016108ff565b604080516001600160a01b03851660248201528215156044808301919091528251808303909101815260649091019091526020810180516001600160e01b031663ec08035560e01b1790527fec080355f00e3698b22cd58179821bba9248402b3373207648777691d542982790610a6284826116fc565b6000546001600160a01b031633146112cf5760405162461bcd60e51b81526004016105f4906124ce565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6003546001600160a01b0316331461131b5760405162461bcd60e51b81526004016105f4906123d2565b60035461ffff848116600160a01b90920416141561135f57604051632189651f60e01b81526001600160a01b03831690632189651f906108ff9084906004016125b3565b60007f60a15a6ceeddd71d7d400d721256643867757bd9c349090ff2f5d4ac2855b0549050600081848460405160240161139a9291906125c6565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091529050610a6285826116fc565b6000816001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015611418573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143c91906125ea565b92915050565b6000546001600160a01b0316331461146c5760405162461bcd60e51b81526004016105f4906124ce565b6003805461ffff909216600160b01b0261ffff60b01b19909216919091179055565b3360009081526006602052604090205460ff166114bd5760405162461bcd60e51b81526004016105f49061245d565b60035461ffff858116600160b01b909204161415611544576001546040516324ce881f60e01b81526001600160a01b03909116906324ce881f9061150d908890889088908890889060040161252b565b600060405180830381600087803b15801561152757600080fd5b505af115801561153b573d6000803e3d6000fd5b50505050610a62565b60007f1a5d8f87f2c79ee568104e2a7ddc893589f312f340e6b1891b3d9f89f05c10539050600081878787878760405160240161158595949392919061252b565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915260035490915061074a9061ffff600160b01b90910416826116fc565b6000546001600160a01b031633146115fd5760405162461bcd60e51b81526004016105f4906124ce565b61ffff8316600090815260056020526040902061161b908383611c6d565b507ffa41487ad5d6728f0b19276fa1eddc16558578f5109fc39d2dc33c3230470dab83838360405161164f93929190612603565b60405180910390a1505050565b33301461167b5760405162461bcd60e51b81526004016105f4906124fc565b604051631947f7ad60e31b815281151560048201526001600160a01b0383169063ca3fbd6890602401610e95565b3330146116c85760405162461bcd60e51b81526004016105f4906124fc565b6040516302d43be960e61b815260048101839052602481018290526001600160a01b0384169063b50efa40906044016108ff565b61ffff82166000908152600560205260408120805461171a906122eb565b80601f0160208091040260200160405190810160405280929190818152602001828054611746906122eb565b80156117935780601f1061176857610100808354040283529160200191611793565b820191906000526020600020905b81548152906001019060200180831161177657829003601f168201915b505050505090508051600014156117fe5760405162461bcd60e51b815260206004820152602960248201527f4c5a50726f76696465723a2064657374696e6174696f6e20636861696e206e6f6044820152681d081d1c9d5cdd195960ba1b60648201526084016105f4565b604080516020810182526000808252915162c5803160e81b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169263c5803100926108ff928892879289923392919060040161263d565b604051636eb1769f60e11b815233600482015230602482015281906001600160a01b0386169063dd62ed3e90604401602060405180830381865afa1580156118ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cf91906125ea565b10156119195760405162461bcd60e51b8152602060048201526019602482015278131696141c9bdd9a59195c8e88139bdd08185c1c1c9bdd9959603a1b60448201526064016105f4565b6040516323b872dd60e01b81526001600160a01b038516906323b872dd906119499033903090869060040161248d565b6020604051808303816000875af1158015611968573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061198c91906124b1565b5060405163095ea7b360e01b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811660048301526024820183905285169063095ea7b3906044016020604051808303816000875af11580156119fc573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a2091906124b1565b506000604051806101800160405280876001600160a01b031681526020016040518060200160405280600081525081526020018563ffffffff1681526020018463ffffffff168152602001876001600160a01b03168152602001876001600160a01b0316815260200160001515815260200160001515815260200160006001600160a01b03168152602001600081526020016000815260200161270b815250905060006040518060600160405280838152602001876001600160a01b031681526020018481525090507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316636c0636a1826040518263ffffffff1660e01b8152600401611b3591906126a4565b6020604051808303816000875af1158015611b54573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b7891906125ea565b5050505050505050565b6040805160248082018490528251808303909101815260449091019091526020810180516001600160e01b0316633ffedf7560e11b1790526003547f7ffdbeeacab76b1c6d0fac622f57e8e98420f7e35cc5fabcd844aa3d5182316491906109879061ffff600160b01b90910416826116fc565b60007f507b600dd00124c20ece910f48c6a50bc548d4a2fc94f563631e5abfe3b5f987905060008183604051602401611c2f9190612037565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152905061080684826116fc565b828054611c79906122eb565b90600052602060002090601f016020900481019282611c9b5760008555611ce1565b82601f10611cb45782800160ff19823516178555611ce1565b82800160010185558215611ce1579182015b82811115611ce1578235825591602001919060010190611cc6565b50611ced929150611cf1565b5090565b5b80821115611ced5760008155600101611cf2565b803561ffff81168114611d1857600080fd5b919050565b60008083601f840112611d2f57600080fd5b5081356001600160401b03811115611d4657600080fd5b602083019150836020828501011115611d5e57600080fd5b9250929050565b60008060008060008060808789031215611d7e57600080fd5b611d8787611d06565b955060208701356001600160401b0380821115611da357600080fd5b611daf8a838b01611d1d565b9097509550604089013591508082168214611dc957600080fd5b90935060608801359080821115611ddf57600080fd5b50611dec89828a01611d1d565b979a9699509497509295939492505050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112611e2557600080fd5b813560206001600160401b0380831115611e4157611e41611dfe565b8260051b604051601f19603f83011681018181108482111715611e6657611e66611dfe565b604052938452858101830193838101925087851115611e8457600080fd5b83870191505b84821015611ea357813583529183019190830190611e8a565b979650505050505050565b60008060408385031215611ec157600080fd5b8235915060208301356001600160401b03811115611ede57600080fd5b611eea85828601611e14565b9150509250929050565b80356001600160a01b0381168114611d1857600080fd5b600080600060608486031215611f2057600080fd5b8335925060208401359150611f3760408501611ef4565b90509250925092565b600060208284031215611f5257600080fd5b611f5b82611d06565b9392505050565b600080600080600060a08688031215611f7a57600080fd5b85359450611f8a60208701611d06565b94979496505050506040830135926060810135926080909101359150565b60008060408385031215611fbb57600080fd5b611fc483611d06565b9150602083013563ffffffff81168114611fdd57600080fd5b809150509250929050565b60008060008060808587031215611ffe57600080fd5b61200785611ef4565b935061201560208601611d06565b93969395505050506040820135916060013590565b6001600160a01b03169052565b6001600160a01b0391909116815260200190565b60006020828403121561205d57600080fd5b611f5b82611ef4565b60008060006060848603121561207b57600080fd5b8335925061208b60208501611d06565b915060408401356001600160401b038111156120a657600080fd5b6120b286828701611e14565b9150509250925092565b600080604083850312156120cf57600080fd5b6120d883611ef4565b915060208301356001600160401b03811115611ede57600080fd5b6000815180845260005b81811015612119576020818501810151868301820152016120fd565b8181111561212b576000602083870101525b50601f01601f19169290920160200192915050565b602081526000611f5b60208301846120f3565b60006020828403121561216557600080fd5b5035919050565b6000806000806080858703121561218257600080fd5b61218b85611ef4565b935061219960208601611d06565b9250604085013591506121ae60608601611ef4565b905092959194509250565b8015158114610dfb57600080fd5b6000806000606084860312156121dc57600080fd5b6121e584611ef4565b92506121f360208501611d06565b91506040840135612203816121b9565b809150509250925092565b60008060006060848603121561222357600080fd5b61222c84611d06565b925061208b60208501611ef4565b60008060006040848603121561224f57600080fd5b61225884611d06565b925060208401356001600160401b0381111561227357600080fd5b61227f86828701611d1d565b9497909650939450505050565b6000806040838503121561229f57600080fd5b6122a883611ef4565b91506020830135611fdd816121b9565b6000806000606084860312156122cd57600080fd5b6122d684611ef4565b95602085013595506040909401359392505050565b600181811c908216806122ff57607f821691505b6020821081141561232057634e487b7160e01b600052602260045260246000fd5b50919050565b600080835481600182811c91508083168061234257607f831692505b602080841082141561236257634e487b7160e01b86526022600452602486fd5b8180156123765760018114612387576123b4565b60ff198616895284890196506123b4565b60008a81526020902060005b868110156123ac5781548b820152908501908301612393565b505084890196505b509498975050505050505050565b8183823760009101908152919050565b6020808252601590820152744c5a50726f76696465723a206f6e6c792047616d6560581b604082015260600190565b600081518084526020808501945080840160005b8381101561243157815187529582019590820190600101612415565b509495945050505050565b8281526040602082015260006124556040830184612401565b949350505050565b6020808252601690820152751316941c9bdd9a59195c8e881bdb9b1e481d985d5b1d60521b604082015260600190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6000602082840312156124c357600080fd5b8151611f5b816121b9565b6020808252601490820152734c5a50726f76696465723a206f6e6c792044414f60601b604082015260600190565b602080825260159082015274262d283937bb34b232b91d1037b7363c9029b2b63360591b604082015260600190565b94855261ffff93909316602085015260408401919091526060830152608082015260a00190565b6020808252601b908201527a262d283937bb34b232b91d1037b7363c9021b7b73a3937b63632b960291b604082015260600190565b83815261ffff831660208201526060604082015260006125aa6060830184612401565b95945050505050565b602081526000611f5b6020830184612401565b6001600160a01b038316815260406020820181905260009061245590830184612401565b6000602082840312156125fc57600080fd5b5051919050565b61ffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f909201601f1916010192915050565b61ffff8716815260c06020820152600061265a60c08301886120f3565b828103604084015261266c81886120f3565b6001600160a01b0387811660608601528616608085015283810360a0850152905061269781856120f3565b9998505050505050505050565b6020815260008251606060208401526126c160808401825161202a565b60208101516101808060a08601526126dd6102008601836120f3565b915060408301516126f660c087018263ffffffff169052565b50606083015163ffffffff1660e0860152608083015161010061271b8188018361202a565b60a085015191506101206127318189018461202a565b60c08601519250610140612748818a018515159052565b60e0870151935061016061275f818b018615159052565b838801519450612771868b018661202a565b918701516101a08a01528601516101c0890152909401516101e08701525050602085015191506127a4604085018361202a565b6040850151606085015280925050509291505056fea26469706673582212202812f8a319410e216fc41d7b89a5102e2750f79c9d516901c5c24b7c0a4b23ed64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "pushAllocations(uint256,int256[])": {
        "params": {
          "_deltas": "Array with delta Allocations for all chainIds",
          "_vaultNumber": "number of the vault"
        }
      },
      "pushProtocolAllocationsToVault(uint16,address,int256[])": {
        "params": {
          "_deltas": "Array with delta allocations where the index matches the protocolId",
          "_vault": "Address of the vault on given chainId"
        }
      },
      "pushRewardsToGame(uint256,uint16,int256[])": {
        "params": {
          "_chainId": "Number of chain used",
          "_rewards": "Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId",
          "_vaultNumber": "Number of the vault"
        }
      },
      "pushSetXChainAllocation(address,uint16,uint256,uint256)": {
        "params": {
          "_amountToSendBack": "Amount the vault has to send back",
          "_chainId": "Number of chain used",
          "_exchangeRate": "New exchangerate for vaults",
          "_vault": "Address of the Derby Vault on given chainId"
        }
      },
      "pushStateFeedbackToVault(address,uint16,bool)": {
        "params": {
          "_chainId": "Number of chain used",
          "_state": "bool for chainId on or off",
          "_vault": "Address of the Derby Vault on given chainId"
        }
      },
      "pushTotalUnderlying(uint256,uint16,uint256,uint256,uint256)": {
        "params": {
          "_chainId": "Number of chain used",
          "_totalSupply": "Supply of the LP token of the vault on given chainId",
          "_underlying": "TotalUnderling plus vault balance in vaultcurrency e.g USDC",
          "_vaultNumber": "Number of the vault",
          "_withdrawalRequests": "Total amount of withdrawal requests from the vault in LP Tokens"
        }
      },
      "receiveAllocations(uint256,int256[])": {
        "params": {
          "_deltas": "Array with delta Allocations for all chainIds",
          "_vaultNumber": "number of the vault"
        }
      },
      "receiveFeedbackToVault(address)": {
        "params": {
          "_vault": "Address of the vault on given chainId"
        }
      },
      "receiveFeedbackToXController(uint256)": {
        "params": {
          "_vaultNumber": "Number of the vault"
        }
      },
      "receiveProtocolAllocationsToVault(address,int256[])": {
        "params": {
          "_deltas": "Array with delta allocations where the index matches the protocolId",
          "_vault": "Address of the vault on given chainId"
        }
      },
      "receiveRewardsToGame(uint256,uint16,int256[])": {
        "params": {
          "_chainId": "Number of chain used",
          "_rewards": "Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId",
          "_vaultNumber": "Number of the vault"
        }
      },
      "receiveSetXChainAllocation(address,uint256,uint256)": {
        "params": {
          "_amountToSendBack": "Amount the vault has to send back",
          "_exchangeRate": "New exchangerate for vaults",
          "_vault": "Address of the Derby Vault on given chainId"
        }
      },
      "receiveStateFeedbackToVault(address,bool)": {
        "params": {
          "_state": "bool for chainId on or off",
          "_vault": "Address of the Derby Vault on given chainId"
        }
      },
      "receiveTotalUnderlying(uint256,uint16,uint256,uint256,uint256)": {
        "params": {
          "_chainId": "Number of chain used",
          "_totalSupply": "Supply of the LP token of the vault on given chainId",
          "_underlying": "TotalUnderling plus vault balance in vaultcurrency e.g USDC",
          "_vaultNumber": "Number of the vault",
          "_withdrawalRequests": "Total amount of withdrawal requests from the vault in LP Tokens"
        }
      },
      "setGame(address)": {
        "params": {
          "_game": "New address of the game"
        }
      },
      "setGameChainId(uint16)": {
        "params": {
          "_gameChain": "New chainId for game contract"
        }
      },
      "setHomeChain(uint16)": {
        "params": {
          "_homeChain": "New home chainId"
        }
      },
      "setTrustedRemote(uint16,bytes)": {
        "params": {
          "_srcAddress": "Address of remote xprovider",
          "_srcChainId": "Chain is for remote xprovider, some as the remote receiving contract chain id (xReceive)"
        }
      },
      "setXController(address)": {
        "params": {
          "_xController": "New address of _xController"
        }
      },
      "setXControllerChainId(uint16)": {
        "params": {
          "_xControllerChain": "New address of xProvider for xController chain"
        }
      },
      "setXControllerProvider(address)": {
        "params": {
          "_xControllerProvider": "New address of xProvider for xController chain"
        }
      },
      "xTransferToController(uint256,uint256,address)": {
        "params": {
          "_amount": "Number of the vault",
          "_asset": "Address of the token to send e.g USDC",
          "_vaultNumber": "Address of the Derby Vault on given chainId"
        }
      },
      "xTransferToVaults(address,uint16,uint256,address)": {
        "params": {
          "_amount": "Amount to send to vault in vaultcurrency",
          "_asset": "Addres of underlying e.g USDC",
          "_chainId": "Number of chainId"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getDao()": {
        "notice": "Getter for dao address"
      },
      "getDecimals(address)": {
        "notice": "returns number of decimals for the vault"
      },
      "pushAllocations(uint256,int256[])": {
        "notice": "Step 1 push; Game pushes totalDeltaAllocations to xChainControllerPushes the delta allocations from the game to the xChainController"
      },
      "pushProtocolAllocationsToVault(uint16,address,int256[])": {
        "notice": "Step 6 push; Game pushes deltaAllocations to vaultsPush protocol allocation array from the game to all vaults/chains"
      },
      "pushRewardsToGame(uint256,uint16,int256[])": {
        "notice": "Step 8 push; Vaults push rewardsPerLockedToken to gamePush price and rewards array from vaults to the game"
      },
      "pushSetXChainAllocation(address,uint16,uint256,uint256)": {
        "notice": "Step 3 push; xChainController pushes exchangeRate and amount the vaults have to send back to all vaults"
      },
      "pushStateFeedbackToVault(address,uint16,bool)": {
        "notice": "Push feedback to the vault if the vault is set to on or off"
      },
      "pushTotalUnderlying(uint256,uint16,uint256,uint256,uint256)": {
        "notice": "Step 2 push; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainControllerPushes cross chain requests for the totalUnderlying for a vaultNumber on a chainId"
      },
      "receiveAllocations(uint256,int256[])": {
        "notice": "Step 1 receive; Game pushes totalDeltaAllocations to xChainControllerReceives the delta allocations from the game and routes to xChainController"
      },
      "receiveFeedbackToVault(address)": {
        "notice": "Step 5 receive; Push funds from xChainController to vaultsReceive feedback message so the vault knows it has received funds and is ready to rebalance"
      },
      "receiveFeedbackToXController(uint256)": {
        "notice": "Step 4 receive; Push funds from vaults to xChainControllerReceive crosschain feedback to xController to know when the vaultNumber has sent funds"
      },
      "receiveProtocolAllocationsToVault(address,int256[])": {
        "notice": "Step 6 receive; Game pushes deltaAllocations to vaultsReceives protocol allocation array from the game to all vaults/chains"
      },
      "receiveRewardsToGame(uint256,uint16,int256[])": {
        "notice": "Step 8 receive; Vaults push rewardsPerLockedToken to gameReceives price and rewards array from vaults to the game"
      },
      "receiveSetXChainAllocation(address,uint256,uint256)": {
        "notice": "Step 3 receive; xChainController pushes exchangeRate and amount the vaults have to send back to all vaults"
      },
      "receiveStateFeedbackToVault(address,bool)": {
        "notice": "Receive feedback for the vault if the vault is set to on or off"
      },
      "receiveTotalUnderlying(uint256,uint16,uint256,uint256,uint256)": {
        "notice": "Step 2 receive; Vaults push totalUnderlying, totalSupply and totalWithdrawalRequests to xChainControllerReceive and set totalUnderlyings from the vaults for every chainId"
      },
      "setConnextChainId(uint16,uint32)": {
        "notice": "links layerZero chain id to a connext chain id for transfers"
      },
      "setDao(address)": {
        "notice": "Setter for dao address"
      },
      "setGame(address)": {
        "notice": "Setter for new game address"
      },
      "setGameChainId(uint16)": {
        "notice": "Setter for gameChain Id"
      },
      "setHomeChain(uint16)": {
        "notice": "Setter for homeChain Id"
      },
      "setTrustedRemote(uint16,bytes)": {
        "notice": "set trusted provider on remote chains, allow owner to set it multiple times."
      },
      "setXController(address)": {
        "notice": "Setter for xControlleraddress"
      },
      "setXControllerChainId(uint16)": {
        "notice": "Setter for xControllerProvider address"
      },
      "setXControllerProvider(address)": {
        "notice": "Setter for xControllerProvider address"
      },
      "toggleVaultWhitelist(address)": {
        "notice": "Whitelists vault address for onlyVault modifier"
      },
      "xTransferToController(uint256,uint256,address)": {
        "notice": "Step 4 push; Push funds from vaults to xChainControllerTransfers funds from vault to xController for crosschain rebalance"
      },
      "xTransferToVaults(address,uint16,uint256,address)": {
        "notice": "Step 5 push; Push funds from xChainController to vaultsTransfers funds from xController to vault for crosschain rebalance"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 16714,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "dao",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 16716,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "xController",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 16718,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "xControllerProvider",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 16720,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "game",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      },
      {
        "astId": 16722,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "homeChain",
        "offset": 20,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 16724,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "xControllerChain",
        "offset": 22,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 16726,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "gameChain",
        "offset": 24,
        "slot": "3",
        "type": "t_uint16"
      },
      {
        "astId": 16730,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "connextChainId",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint16,t_uint32)"
      },
      {
        "astId": 16734,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "trustedRemoteLookup",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_uint16,t_bytes_storage)"
      },
      {
        "astId": 16738,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "vaultWhitelist",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes_storage": {
        "encoding": "bytes",
        "label": "bytes",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint16,t_bytes_storage)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => bytes)",
        "numberOfBytes": "32",
        "value": "t_bytes_storage"
      },
      "t_mapping(t_uint16,t_uint32)": {
        "encoding": "mapping",
        "key": "t_uint16",
        "label": "mapping(uint16 => uint32)",
        "numberOfBytes": "32",
        "value": "t_uint32"
      },
      "t_uint16": {
        "encoding": "inplace",
        "label": "uint16",
        "numberOfBytes": "2"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}
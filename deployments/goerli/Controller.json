{
  "address": "0xa4EA3fba92C893A3e824aD75CA576852E269520f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "protocolLPToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "govToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolNumber",
          "type": "uint256"
        }
      ],
      "name": "AddProtocol",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "vaultName",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "chainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "coin",
          "type": "string"
        }
      ],
      "name": "AddVault",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_protocolLPToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_govToken",
          "type": "address"
        }
      ],
      "name": "addProtocol",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "category",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "coin",
          "type": "string"
        }
      ],
      "name": "addVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolNumber",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "claimable",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "getGovToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "getProtocolBlacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "getProtocolInfo",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "LPToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "provider",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "underlying",
              "type": "address"
            }
          ],
          "internalType": "struct IController.ProtocolInfoS",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapParams",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "router",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "quoter",
              "type": "address"
            },
            {
              "internalType": "uint24",
              "name": "poolFee",
              "type": "uint24"
            }
          ],
          "internalType": "struct IController.UniswapParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapPoolFee",
      "outputs": [
        {
          "internalType": "uint24",
          "name": "",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getUniswapQuoter",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "latestProtocolId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "protocolBlacklist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "protocolGovToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "protocolInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "LPToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "underlying",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "protocolNames",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_LPToken",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_bool",
          "type": "bool"
        }
      ],
      "name": "setClaimable",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "setDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "setProtocolBlacklist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_protocolNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_LPToken",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_provider",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_underlying",
          "type": "address"
        }
      ],
      "name": "setProtocolInfo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint24",
          "name": "_poolFee",
          "type": "uint24"
        }
      ],
      "name": "setUniswapPoolFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapQuoter",
          "type": "address"
        }
      ],
      "name": "setUniswapQuoter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_uniswapRouter",
          "type": "address"
        }
      ],
      "name": "setUniswapRouter",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "_status",
          "type": "bool"
        }
      ],
      "name": "setVaultWhitelistStatus",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "uniswapParams",
      "outputs": [
        {
          "internalType": "address",
          "name": "router",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "quoter",
          "type": "address"
        },
        {
          "internalType": "uint24",
          "name": "poolFee",
          "type": "uint24"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc65b3547ec24945fefba664fba9ca0308ab4fc0d15bde10a29dfdbb749759bfb",
  "receipt": {
    "to": null,
    "from": "0x1Ca7b496Ac4E609cf400793Db67916AC91773927",
    "contractAddress": "0xa4EA3fba92C893A3e824aD75CA576852E269520f",
    "transactionIndex": 78,
    "gasUsed": "1137928",
    "logsBloom": "0x
    "blockHash": "0x27c9b22427c298afe6533f43ad38f6c12ef12fc319e1a39ab909b2200a23de0d",
    "transactionHash": "0xc65b3547ec24945fefba664fba9ca0308ab4fc0d15bde10a29dfdbb749759bfb",
    "logs": [],
    "blockNumber": 10205456,
    "cumulativeGasUsed": "14337981",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x1Ca7b496Ac4E609cf400793Db67916AC91773927"
  ],
  "numDeployments": 1,
  "solcInputHash": "ff4a7f4f858c3289631580cff1a1f81e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"protocolLPToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"govToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolNumber\",\"type\":\"uint256\"}],\"name\":\"AddProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"vaultName\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"coin\",\"type\":\"string\"}],\"name\":\"AddVault\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_protocolLPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_govToken\",\"type\":\"address\"}],\"name\":\"addProtocol\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"category\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"coin\",\"type\":\"string\"}],\"name\":\"addVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolNumber\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"claimable\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"getGovToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"getProtocolBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"getProtocolInfo\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"LPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"internalType\":\"struct IController.ProtocolInfoS\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapParams\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"internalType\":\"struct IController.UniswapParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapPoolFee\",\"outputs\":[{\"internalType\":\"uint24\",\"name\":\"\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getUniswapQuoter\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"latestProtocolId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolBlacklist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolGovToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"LPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"underlying\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"protocolNames\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_LPToken\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_bool\",\"type\":\"bool\"}],\"name\":\"setClaimable\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"setProtocolBlacklist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_protocolNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_LPToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_provider\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_underlying\",\"type\":\"address\"}],\"name\":\"setProtocolInfo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint24\",\"name\":\"_poolFee\",\"type\":\"uint24\"}],\"name\":\"setUniswapPoolFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapQuoter\",\"type\":\"address\"}],\"name\":\"setUniswapQuoter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_uniswapRouter\",\"type\":\"address\"}],\"name\":\"setUniswapRouter\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"_status\",\"type\":\"bool\"}],\"name\":\"setVaultWhitelistStatus\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"uniswapParams\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"router\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"quoter\",\"type\":\"address\"},{\"internalType\":\"uint24\",\"name\":\"poolFee\",\"type\":\"uint24\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addProtocol(string,uint256,address,address,address,address)\":{\"params\":{\"_govToken\":\"Address governance token of the protocol\",\"_name\":\"Name of the protocol vault combination\",\"_protocolLPToken\":\"Address of protocolToken eg cUSDC\",\"_provider\":\"Address of the protocol provider\",\"_underlying\":\"Address of underlying protocol vault eg USDC\",\"_vaultNumber\":\"Number of the vault\"}},\"addVault(address,string,string,string)\":{\"params\":{\"_vault\":\"Vault address to whitelist\"}},\"claim(uint256,uint256)\":{\"params\":{\"_protocolNumber\":\"Protocol number linked to protocol vault\",\"_vaultNumber\":\"Number of the vault\"}},\"getGovToken(uint256,uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to protocol vault\",\"_vaultNumber\":\"Number of the vault\"},\"returns\":{\"_0\":\"Protocol gov token address\"}},\"getProtocolBlacklist(uint256,uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to protocol vault\",\"_vaultNumber\":\"Number of the vault\"}},\"getProtocolInfo(uint256,uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to protocol vault\",\"_vaultNumber\":\"Number of the vault\"}},\"setClaimable(address,bool)\":{\"params\":{\"_LPToken\":\"Address of the underlying protocol vault\",\"_bool\":\"True of the underlying protocol has claimable tokens\"}},\"setDao(address)\":{\"params\":{\"_dao\":\"DAO address\"}},\"setProtocolBlacklist(uint256,uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to protocol vault\",\"_vaultNumber\":\"Number of the vault\"}},\"setProtocolInfo(uint256,uint256,address,address,address)\":{\"details\":\"Stores the protocol information in the protocolInfo mapping.\",\"params\":{\"_LPToken\":\"The address of the liquidity provider token for the protocol.\",\"_protocolNumber\":\"The protocol number to associate the protocol information with.\",\"_provider\":\"The address of the provider for the protocol.\",\"_underlying\":\"The address of the underlying token for the protocol.\",\"_vaultNumber\":\"The vault number to associate the protocol information with.\"}},\"setUniswapPoolFee(uint24)\":{\"params\":{\"_poolFee\":\"New Pool fee\"}},\"setUniswapQuoter(address)\":{\"params\":{\"_uniswapQuoter\":\"New Uniswap Quoter address\"}},\"setUniswapRouter(address)\":{\"params\":{\"_uniswapRouter\":\"New Uniswap Router address\"}},\"setVaultWhitelistStatus(address,bool)\":{\"params\":{\"_status\":\"Boolean value representing the new whitelist status of the vault\",\"_vault\":\"Vault address to update\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addProtocol(string,uint256,address,address,address,address)\":{\"notice\":\"Add protocol and vault to Controller\"},\"addVault(address,string,string,string)\":{\"notice\":\"Add vault to Controller\"},\"claim(uint256,uint256)\":{\"notice\":\"Harvest tokens from underlying protocols\"},\"getDao()\":{\"notice\":\"Getter for dao address\"},\"getGovToken(uint256,uint256)\":{\"notice\":\"Getter for the gov token address\"},\"getProtocolBlacklist(uint256,uint256)\":{\"notice\":\"Getter for protocol blacklist, given an vaultnumber and protocol number returns true if blacklisted. Can only be called by vault.\"},\"getProtocolInfo(uint256,uint256)\":{\"notice\":\"Getter for the ProtocolInfo struct\"},\"setClaimable(address,bool)\":{\"notice\":\"Set if provider have claimable tokens\"},\"setDao(address)\":{\"notice\":\"Setter for DAO address\"},\"setProtocolBlacklist(uint256,uint256)\":{\"notice\":\"Setter for protocol blacklist, given an vaultnumber and protocol number puts the protocol on the blacklist. Can only be called by vault.\"},\"setProtocolInfo(uint256,uint256,address,address,address)\":{\"notice\":\"Sets the protocol information for a specific vault and protocol number in case something goes wrong.\"},\"setUniswapPoolFee(uint24)\":{\"notice\":\"Set the Uniswap Pool fee\"},\"setUniswapQuoter(address)\":{\"notice\":\"Set the Uniswap Factory address\"},\"setUniswapRouter(address)\":{\"notice\":\"Set the Uniswap Router address\"},\"setVaultWhitelistStatus(address,bool)\":{\"notice\":\"Set the whitelist status of a vault in the Controller\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Controller.sol\":\"Controller\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"contracts/Controller.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\nimport \\\"./Interfaces/IProvider.sol\\\";\\nimport \\\"./Interfaces/IController.sol\\\";\\n\\ncontract Controller is IController {\\n  UniswapParams public uniswapParams;\\n\\n  address private dao;\\n\\n  // (vaultNumber => protocolNumber => protocolInfoStruct): struct in IController\\n  mapping(uint256 => mapping(uint256 => ProtocolInfoS)) public protocolInfo;\\n  // (vaultNumber => protocolNumber => protocolName): name of underlying protocol vaults\\n  mapping(uint256 => mapping(uint256 => string)) public protocolNames;\\n\\n  // (vaultAddress => bool): true when address is whitelisted\\n  mapping(address => bool) public vaultWhitelist;\\n  // (vaultAddress => bool): true when protocol has claimable tokens / extra rewards\\n  mapping(address => bool) public claimable;\\n\\n  // (vaultNumber => protocolNumber => bool): true when protocol is blacklisted\\n  mapping(uint256 => mapping(uint256 => bool)) public protocolBlacklist;\\n  // (vaultNumber => protocolNumber => address): address of the governance token\\n  mapping(uint256 => mapping(uint256 => address)) public protocolGovToken;\\n  // (vaultNumber => latestProtocolId)\\n  mapping(uint256 => uint256) public latestProtocolId;\\n  // LPtoken => bool: already added protocols\\n  mapping(address => bool) private addedProtocols;\\n\\n  event AddVault(\\n    uint256 vaultNumber,\\n    string vaultName,\\n    uint256 chainId,\\n    string category,\\n    string coin\\n  );\\n  event AddProtocol(\\n    string name,\\n    uint256 vaultNumber,\\n    address provider,\\n    address protocolLPToken,\\n    address underlying,\\n    address govToken,\\n    uint256 protocolNumber\\n  );\\n\\n  constructor(address _dao) {\\n    dao = _dao;\\n  }\\n\\n  // Modifier for only vault?\\n  modifier onlyDao() {\\n    require(msg.sender == dao, \\\"Controller: only DAO\\\");\\n    _;\\n  }\\n\\n  modifier onlyVault() {\\n    require(vaultWhitelist[msg.sender] == true, \\\"Controller: only Vault\\\");\\n    _;\\n  }\\n\\n  /// @notice Harvest tokens from underlying protocols\\n  /// @param _vaultNumber Number of the vault\\n  /// @param _protocolNumber Protocol number linked to protocol vault\\n  function claim(\\n    uint256 _vaultNumber,\\n    uint256 _protocolNumber\\n  ) external override onlyVault returns (bool) {\\n    if (claimable[protocolInfo[_vaultNumber][_protocolNumber].LPToken]) {\\n      return\\n        IProvider(protocolInfo[_vaultNumber][_protocolNumber].provider).claim(\\n          protocolInfo[_vaultNumber][_protocolNumber].LPToken,\\n          msg.sender\\n        );\\n    } else {\\n      return false;\\n    }\\n  }\\n\\n  function getUniswapParams() external view returns (UniswapParams memory) {\\n    return uniswapParams;\\n  }\\n\\n  function getUniswapPoolFee() external view returns (uint24) {\\n    return uniswapParams.poolFee;\\n  }\\n\\n  function getUniswapQuoter() external view returns (address) {\\n    return uniswapParams.quoter;\\n  }\\n\\n  /// @notice Getter for protocol blacklist, given an vaultnumber and protocol number returns true if blacklisted. Can only be called by vault.\\n  /// @param _vaultNumber Number of the vault\\n  /// @param _protocolNum Protocol number linked to protocol vault\\n  function getProtocolBlacklist(\\n    uint256 _vaultNumber,\\n    uint256 _protocolNum\\n  ) external view override onlyVault returns (bool) {\\n    return protocolBlacklist[_vaultNumber][_protocolNum];\\n  }\\n\\n  /// @notice Getter for the ProtocolInfo struct\\n  /// @param _vaultNumber Number of the vault\\n  /// @param _protocolNum Protocol number linked to protocol vault\\n  function getProtocolInfo(\\n    uint256 _vaultNumber,\\n    uint256 _protocolNum\\n  ) external view override returns (ProtocolInfoS memory) {\\n    return protocolInfo[_vaultNumber][_protocolNum];\\n  }\\n\\n  /// @notice Setter for protocol blacklist, given an vaultnumber and protocol number puts the protocol on the blacklist. Can only be called by vault.\\n  /// @param _vaultNumber Number of the vault\\n  /// @param _protocolNum Protocol number linked to protocol vault\\n  function setProtocolBlacklist(\\n    uint256 _vaultNumber,\\n    uint256 _protocolNum\\n  ) external override onlyVault {\\n    protocolBlacklist[_vaultNumber][_protocolNum] = true;\\n  }\\n\\n  /// @notice Getter for the gov token address\\n  /// @param _vaultNumber Number of the vault\\n  /// @param _protocolNum Protocol number linked to protocol vault\\n  /// @return Protocol gov token address\\n  function getGovToken(uint256 _vaultNumber, uint256 _protocolNum) external view returns (address) {\\n    return protocolGovToken[_vaultNumber][_protocolNum];\\n  }\\n\\n  /// @notice Getter for dao address\\n  function getDao() public view returns (address) {\\n    return dao;\\n  }\\n\\n  /*\\n  Only Dao functions\\n  */\\n\\n  /// @notice Add protocol and vault to Controller\\n  /// @param _name Name of the protocol vault combination\\n  /// @param _vaultNumber Number of the vault\\n  /// @param _provider Address of the protocol provider\\n  /// @param _protocolLPToken Address of protocolToken eg cUSDC\\n  /// @param _underlying Address of underlying protocol vault eg USDC\\n  /// @param _govToken Address governance token of the protocol\\n  function addProtocol(\\n    string calldata _name,\\n    uint256 _vaultNumber,\\n    address _provider,\\n    address _protocolLPToken,\\n    address _underlying,\\n    address _govToken\\n  ) external onlyDao returns (uint256) {\\n    require(!addedProtocols[_protocolLPToken], \\\"Protocol already added\\\");\\n    uint256 protocolNumber = latestProtocolId[_vaultNumber];\\n\\n    protocolNames[_vaultNumber][protocolNumber] = _name;\\n    protocolGovToken[_vaultNumber][protocolNumber] = _govToken;\\n    protocolInfo[_vaultNumber][protocolNumber] = ProtocolInfoS(\\n      _protocolLPToken,\\n      _provider,\\n      _underlying\\n    );\\n\\n    addedProtocols[_protocolLPToken] = true;\\n    emit AddProtocol(\\n      _name,\\n      _vaultNumber,\\n      _provider,\\n      _protocolLPToken,\\n      _underlying,\\n      _govToken,\\n      protocolNumber\\n    );\\n\\n    latestProtocolId[_vaultNumber]++;\\n\\n    return protocolNumber;\\n  }\\n\\n  /// @notice Add vault to Controller\\n  /// @param _vault Vault address to whitelist\\n  function addVault(\\n    address _vault,\\n    string memory name,\\n    string memory category,\\n    string memory coin\\n  ) external onlyDao {\\n    vaultWhitelist[_vault] = true;\\n\\n    // emit AddVault(IVault(_vault).vaultNumber(), IVault(_vault).name(), category);\\n    emit AddVault(10, name, block.chainid, category, coin);\\n  }\\n\\n  /// @notice Sets the protocol information for a specific vault and protocol number in case something goes wrong.\\n  /// @dev Stores the protocol information in the protocolInfo mapping.\\n  /// @param _vaultNumber The vault number to associate the protocol information with.\\n  /// @param _protocolNumber The protocol number to associate the protocol information with.\\n  /// @param _LPToken The address of the liquidity provider token for the protocol.\\n  /// @param _provider The address of the provider for the protocol.\\n  /// @param _underlying The address of the underlying token for the protocol.\\n  function setProtocolInfo(\\n    uint256 _vaultNumber,\\n    uint256 _protocolNumber,\\n    address _LPToken,\\n    address _provider,\\n    address _underlying\\n  ) external onlyDao {\\n    protocolInfo[_vaultNumber][_protocolNumber] = ProtocolInfoS({\\n      LPToken: _LPToken,\\n      provider: _provider,\\n      underlying: _underlying\\n    });\\n  }\\n\\n  /// @notice Set the whitelist status of a vault in the Controller\\n  /// @param _vault Vault address to update\\n  /// @param _status Boolean value representing the new whitelist status of the vault\\n  function setVaultWhitelistStatus(address _vault, bool _status) external onlyDao {\\n    vaultWhitelist[_vault] = _status;\\n  }\\n\\n  /// @notice Set the Uniswap Router address\\n  /// @param _uniswapRouter New Uniswap Router address\\n  function setUniswapRouter(address _uniswapRouter) external onlyDao {\\n    uniswapParams.router = _uniswapRouter;\\n  }\\n\\n  /// @notice Set the Uniswap Factory address\\n  /// @param _uniswapQuoter New Uniswap Quoter address\\n  function setUniswapQuoter(address _uniswapQuoter) external onlyDao {\\n    uniswapParams.quoter = _uniswapQuoter;\\n  }\\n\\n  /// @notice Set the Uniswap Pool fee\\n  /// @param _poolFee New Pool fee\\n  function setUniswapPoolFee(uint24 _poolFee) external onlyDao {\\n    uniswapParams.poolFee = _poolFee;\\n  }\\n\\n  /// @notice Set if provider have claimable tokens\\n  /// @param _LPToken Address of the underlying protocol vault\\n  /// @param _bool True of the underlying protocol has claimable tokens\\n  function setClaimable(address _LPToken, bool _bool) external onlyDao {\\n    claimable[_LPToken] = _bool;\\n  }\\n\\n  /// @notice Setter for DAO address\\n  /// @param _dao DAO address\\n  function setDao(address _dao) external onlyDao {\\n    dao = _dao;\\n  }\\n}\\n\",\"keccak256\":\"0xd9957a5b27b15cc9076e68b710ada3f95274dfd090ef2841a338e3cf142f2285\",\"license\":\"MIT\"},\"contracts/Interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IController {\\n  struct ProtocolInfoS {\\n    address LPToken;\\n    address provider;\\n    address underlying;\\n  }\\n\\n  struct UniswapParams {\\n    address router;\\n    address quoter;\\n    uint24 poolFee;\\n  }\\n\\n  function claim(uint256 _ETFnumber, uint256 protocolNumber) external returns (bool);\\n\\n  function addProtocol(\\n    string calldata name,\\n    uint256 _ETFnumber,\\n    address provider,\\n    address protocolLPToken,\\n    address underlying,\\n    address govToken\\n  ) external returns (uint256);\\n\\n  function getProtocolInfo(\\n    uint256 _ETFnumber,\\n    uint256 protocolNumber\\n  ) external view returns (ProtocolInfoS memory);\\n\\n  function getUniswapParams() external view returns (UniswapParams memory);\\n\\n  function latestProtocolId(uint256 _ETFnumber) external view returns (uint256);\\n\\n  function setVaultWhitelistStatus(address _vault, bool _status) external;\\n\\n  function setUniswapRouter(address _uniswapRouter) external;\\n\\n  function setUniswapQuoter(address _uniswapQuoter) external;\\n\\n  function setUniswapPoolFee(uint24 _poolFee) external;\\n\\n  function getUniswapPoolFee() external view returns (uint24);\\n\\n  function getUniswapQuoter() external view returns (address);\\n\\n  function getProtocolBlacklist(\\n    uint256 _ETFnumber,\\n    uint256 _protocolNum\\n  ) external view returns (bool);\\n\\n  function setProtocolBlacklist(uint256 _ETFnumber, uint256 _protocolNum) external;\\n\\n  function getGovToken(uint256 _vaultNumber, uint256 _protocolNum) external view returns (address);\\n\\n  function getDao() external view returns (address);\\n}\\n\",\"keccak256\":\"0x25c788da89b1d3ee6d795545b5fb8838d7bfe5d555ee0b93266038088ce37b45\",\"license\":\"MIT\"},\"contracts/Interfaces/IProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IProvider {\\n  function deposit(\\n    uint256 _amount,\\n    address _uToken,\\n    address _protocolLPToken\\n  ) external returns (uint256);\\n\\n  function withdraw(\\n    uint256 _amount,\\n    address _uToken,\\n    address _protocolLPToken\\n  ) external returns (uint256);\\n\\n  function exchangeRate(address _protocolLPToken) external view returns (uint256);\\n\\n  function balanceUnderlying(address _address, address _protocolLPToken)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function calcShares(uint256 _amount, address _protocolLPToken) external view returns (uint256);\\n\\n  function balance(address _address, address _protocolLPToken) external view returns (uint256);\\n\\n  function claim(address _protocolLPToken, address _claimer) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9708d9f69e636e5ababc9e173b2b4e267bfb3b056118443c011ef73a640f4a70\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506040516113be3803806113be83398101604081905261002f91610054565b600280546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61132b806100936000396000f3fe608060405234801561001057600080fd5b506004361061013e5760003560e01c8063054c5b03146101435780632438cd561461017357806326158136146101e4578063384f5345146101f95780633865e8e71461022d57806339daa1b214610240578063402914f51461027357806359d8480c1461029657806360867cbd146102a95780636637b882146102cc57806367b4e067146102df5780637519313c14610370578063a0c024a414610390578063a45e08ec14610437578063b0a7097514610465578063b70811bc14610476578063bea9849e14610487578063c34902631461049a578063c48acf7b146104ad578063c93ab5dc14610501578063ca68c24b14610514578063d900d1f714610527578063e1bf1d151461053a578063f2e12b941461054d578063f78022c114610560578063ffa7cb711461058e575b600080fd5b610156610151366004610dcc565b6105a1565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ba610181366004610dcc565b60036020908152600092835260408084209091529082529020805460018201546002909201546001600160a01b03918216928216911683565b604080516001600160a01b039485168152928416602084015292169181019190915260600161016a565b6101f76101f2366004610e0a565b6105cb565b005b610156610207366004610dcc565b60086020908152600092835260408084209091529082529020546001600160a01b031681565b6101f761023b366004610e3d565b610620565b61026361024e366004610e0a565b60056020526000908152604090205460ff1681565b604051901515815260200161016a565b610263610281366004610e0a565b60066020526000908152604090205460ff1681565b6101f76102a4366004610e3d565b610675565b600154600160a01b900462ffffff1660405162ffffff909116815260200161016a565b6101f76102da366004610e0a565b6106ca565b61033b604080516060810182526000808252602082018190529181019190915250604080516060810182526000546001600160a01b0390811682526001549081166020830152600160a01b900462ffffff169181019190915290565b6040805182516001600160a01b039081168252602080850151909116908201529181015162ffffff169082015260600161016a565b61038361037e366004610dcc565b610716565b60405161016a9190610ec1565b61040561039e366004610dcc565b60408051606080820183526000808352602080840182905292840181905294855260038252828520938552928152928190208151928301825280546001600160a01b0390811684526001820154811694840194909452600201549092169181019190915290565b6040805182516001600160a01b039081168252602080850151821690830152928201519092169082015260600161016a565b610457610445366004610ed4565b60096020526000908152604090205481565b60405190815260200161016a565b6001546001600160a01b0316610156565b6002546001600160a01b0316610156565b6101f7610495366004610e0a565b6107bb565b6102636104a8366004610dcc565b610807565b6000546001546104d6916001600160a01b039081169190811690600160a01b900462ffffff1683565b604080516001600160a01b03948516815293909216602084015262ffffff169082015260600161016a565b6101f761050f366004610eed565b610912565b6101f7610522366004610dcc565b610960565b610263610535366004610dcc565b6109ba565b6101f7610548366004610fb4565b610a0f565b6101f761055b36600461104c565b610aa3565b61026361056e366004610dcc565b600760209081526000928352604080842090915290825290205460ff1681565b61045761059c3660046110a3565b610b4d565b60008281526008602090815260408083208484529091529020546001600160a01b03165b92915050565b6002546001600160a01b031633146105fe5760405162461bcd60e51b81526004016105f59061115d565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0316331461064a5760405162461bcd60e51b81526004016105f59061115d565b6001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b6002546001600160a01b0316331461069f5760405162461bcd60e51b81526004016105f59061115d565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b6002546001600160a01b031633146106f45760405162461bcd60e51b81526004016105f59061115d565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60046020908152600092835260408084209091529082529020805461073a9061118b565b80601f01602080910402602001604051908101604052809291908181526020018280546107669061118b565b80156107b35780601f10610788576101008083540402835291602001916107b3565b820191906000526020600020905b81548152906001019060200180831161079657829003601f168201915b505050505081565b6002546001600160a01b031633146107e55760405162461bcd60e51b81526004016105f59061115d565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526005602052604081205460ff16151560011461083b5760405162461bcd60e51b81526004016105f5906111c6565b60008381526003602090815260408083208584528252808320546001600160a01b03168352600690915290205460ff161561090a576000838152600360209081526040808320858452909152908190206001810154905491516310e059a160e11b81526001600160a01b0392831660048201523360248201529116906321c0b342906044016020604051808303816000875af11580156108df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090391906111f6565b90506105c5565b5060006105c5565b6002546001600160a01b0316331461093c5760405162461bcd60e51b81526004016105f59061115d565b6001805462ffffff909216600160a01b0262ffffff60a01b19909216919091179055565b3360009081526005602052604090205460ff1615156001146109945760405162461bcd60e51b81526004016105f5906111c6565b60009182526007602090815260408084209284529190529020805460ff19166001179055565b3360009081526005602052604081205460ff1615156001146109ee5760405162461bcd60e51b81526004016105f5906111c6565b50600091825260076020908152604080842092845291905290205460ff1690565b6002546001600160a01b03163314610a395760405162461bcd60e51b81526004016105f59061115d565b6001600160a01b03841660009081526005602052604090819020805460ff19166001179055517f8bc8c407ec0edf0e4b7f95f69b5330b849daf0e4d8920f0b6f9bf809e34b89d490610a9590600a908690469087908790611213565b60405180910390a150505050565b6002546001600160a01b03163314610acd5760405162461bcd60e51b81526004016105f59061115d565b604080516060810182526001600160a01b039485168152928416602080850191825292851684830190815260009788526003845282882096885295909252909420905181546001600160a01b0319908116918416919091178255935160018201805486169184169190911790559151600290920180549093169116179055565b6002546000906001600160a01b03163314610b7a5760405162461bcd60e51b81526004016105f59061115d565b6001600160a01b0384166000908152600a602052604090205460ff1615610bdc5760405162461bcd60e51b8152602060048201526016602482015275141c9bdd1bd8dbdb08185b1c9958591e48185919195960521b60448201526064016105f5565b60008681526009602090815260408083205460048352818420818552909252909120610c09908a8a610d33565b506000878152600860209081526040808320848452825280832080546001600160a01b03199081166001600160a01b038981169190911790925582516060810184528a83168082528c84168287019081528b85168387019081528f8952600388528689208a8a52885286892093518454861690871617845590516001848101805487169288169290921790915590516002909301805490941692909416919091179091558452600a90925291829020805460ff19169091179055517fbaa5936274f6bddc88193a7849c248b5d5b80204b8d07343a1e21945f18e6b6f90610cff908b908b908b908b908b908b908b908a90611264565b60405180910390a16000878152600960205260408120805491610d21836112cc565b90915550909998505050505050505050565b828054610d3f9061118b565b90600052602060002090601f016020900481019282610d615760008555610da7565b82601f10610d7a5782800160ff19823516178555610da7565b82800160010185558215610da7579182015b82811115610da7578235825591602001919060010190610d8c565b50610db3929150610db7565b5090565b5b80821115610db35760008155600101610db8565b60008060408385031215610ddf57600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610e0557600080fd5b919050565b600060208284031215610e1c57600080fd5b610e2582610dee565b9392505050565b8015158114610e3a57600080fd5b50565b60008060408385031215610e5057600080fd5b610e5983610dee565b91506020830135610e6981610e2c565b809150509250929050565b6000815180845260005b81811015610e9a57602081850181015186830182015201610e7e565b81811115610eac576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610e256020830184610e74565b600060208284031215610ee657600080fd5b5035919050565b600060208284031215610eff57600080fd5b813562ffffff81168114610e2557600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112610f3957600080fd5b81356001600160401b0380821115610f5357610f53610f12565b604051601f8301601f19908116603f01168101908282118183101715610f7b57610f7b610f12565b81604052838152866020858801011115610f9457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610fca57600080fd5b610fd385610dee565b935060208501356001600160401b0380821115610fef57600080fd5b610ffb88838901610f28565b9450604087013591508082111561101157600080fd5b61101d88838901610f28565b9350606087013591508082111561103357600080fd5b5061104087828801610f28565b91505092959194509250565b600080600080600060a0868803121561106457600080fd5b853594506020860135935061107b60408701610dee565b925061108960608701610dee565b915061109760808701610dee565b90509295509295909350565b600080600080600080600060c0888a0312156110be57600080fd5b87356001600160401b03808211156110d557600080fd5b818a0191508a601f8301126110e957600080fd5b8135818111156110f857600080fd5b8b602082850101111561110a57600080fd5b60209283019950975050880135945061112560408901610dee565b935061113360608901610dee565b925061114160808901610dee565b915061114f60a08901610dee565b905092959891949750929550565b602080825260149082015273436f6e74726f6c6c65723a206f6e6c792044414f60601b604082015260600190565b600181811c9082168061119f57607f821691505b602082108114156111c057634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526016908201527510dbdb9d1c9bdb1b195c8e881bdb9b1e4815985d5b1d60521b604082015260600190565b60006020828403121561120857600080fd5b8151610e2581610e2c565b85815260a06020820152600061122c60a0830187610e74565b85604084015282810360608401526112448186610e74565b905082810360808401526112588185610e74565b98975050505050505050565b60e081528760e08201526000610100898b828501376000838b018201526020830198909852506001600160a01b0395861660408201529385166060850152918416608084015290921660a082015260c0810191909152601f909201601f191690910101919050565b60006000198214156112ee57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122052310675f04efcd68cd94966581473c941b3e020ac1ac189e3cf14e4d4c8f68364736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061013e5760003560e01c8063054c5b03146101435780632438cd561461017357806326158136146101e4578063384f5345146101f95780633865e8e71461022d57806339daa1b214610240578063402914f51461027357806359d8480c1461029657806360867cbd146102a95780636637b882146102cc57806367b4e067146102df5780637519313c14610370578063a0c024a414610390578063a45e08ec14610437578063b0a7097514610465578063b70811bc14610476578063bea9849e14610487578063c34902631461049a578063c48acf7b146104ad578063c93ab5dc14610501578063ca68c24b14610514578063d900d1f714610527578063e1bf1d151461053a578063f2e12b941461054d578063f78022c114610560578063ffa7cb711461058e575b600080fd5b610156610151366004610dcc565b6105a1565b6040516001600160a01b0390911681526020015b60405180910390f35b6101ba610181366004610dcc565b60036020908152600092835260408084209091529082529020805460018201546002909201546001600160a01b03918216928216911683565b604080516001600160a01b039485168152928416602084015292169181019190915260600161016a565b6101f76101f2366004610e0a565b6105cb565b005b610156610207366004610dcc565b60086020908152600092835260408084209091529082529020546001600160a01b031681565b6101f761023b366004610e3d565b610620565b61026361024e366004610e0a565b60056020526000908152604090205460ff1681565b604051901515815260200161016a565b610263610281366004610e0a565b60066020526000908152604090205460ff1681565b6101f76102a4366004610e3d565b610675565b600154600160a01b900462ffffff1660405162ffffff909116815260200161016a565b6101f76102da366004610e0a565b6106ca565b61033b604080516060810182526000808252602082018190529181019190915250604080516060810182526000546001600160a01b0390811682526001549081166020830152600160a01b900462ffffff169181019190915290565b6040805182516001600160a01b039081168252602080850151909116908201529181015162ffffff169082015260600161016a565b61038361037e366004610dcc565b610716565b60405161016a9190610ec1565b61040561039e366004610dcc565b60408051606080820183526000808352602080840182905292840181905294855260038252828520938552928152928190208151928301825280546001600160a01b0390811684526001820154811694840194909452600201549092169181019190915290565b6040805182516001600160a01b039081168252602080850151821690830152928201519092169082015260600161016a565b610457610445366004610ed4565b60096020526000908152604090205481565b60405190815260200161016a565b6001546001600160a01b0316610156565b6002546001600160a01b0316610156565b6101f7610495366004610e0a565b6107bb565b6102636104a8366004610dcc565b610807565b6000546001546104d6916001600160a01b039081169190811690600160a01b900462ffffff1683565b604080516001600160a01b03948516815293909216602084015262ffffff169082015260600161016a565b6101f761050f366004610eed565b610912565b6101f7610522366004610dcc565b610960565b610263610535366004610dcc565b6109ba565b6101f7610548366004610fb4565b610a0f565b6101f761055b36600461104c565b610aa3565b61026361056e366004610dcc565b600760209081526000928352604080842090915290825290205460ff1681565b61045761059c3660046110a3565b610b4d565b60008281526008602090815260408083208484529091529020546001600160a01b03165b92915050565b6002546001600160a01b031633146105fe5760405162461bcd60e51b81526004016105f59061115d565b60405180910390fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b6002546001600160a01b0316331461064a5760405162461bcd60e51b81526004016105f59061115d565b6001600160a01b03919091166000908152600560205260409020805460ff1916911515919091179055565b6002546001600160a01b0316331461069f5760405162461bcd60e51b81526004016105f59061115d565b6001600160a01b03919091166000908152600660205260409020805460ff1916911515919091179055565b6002546001600160a01b031633146106f45760405162461bcd60e51b81526004016105f59061115d565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b60046020908152600092835260408084209091529082529020805461073a9061118b565b80601f01602080910402602001604051908101604052809291908181526020018280546107669061118b565b80156107b35780601f10610788576101008083540402835291602001916107b3565b820191906000526020600020905b81548152906001019060200180831161079657829003601f168201915b505050505081565b6002546001600160a01b031633146107e55760405162461bcd60e51b81526004016105f59061115d565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b3360009081526005602052604081205460ff16151560011461083b5760405162461bcd60e51b81526004016105f5906111c6565b60008381526003602090815260408083208584528252808320546001600160a01b03168352600690915290205460ff161561090a576000838152600360209081526040808320858452909152908190206001810154905491516310e059a160e11b81526001600160a01b0392831660048201523360248201529116906321c0b342906044016020604051808303816000875af11580156108df573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061090391906111f6565b90506105c5565b5060006105c5565b6002546001600160a01b0316331461093c5760405162461bcd60e51b81526004016105f59061115d565b6001805462ffffff909216600160a01b0262ffffff60a01b19909216919091179055565b3360009081526005602052604090205460ff1615156001146109945760405162461bcd60e51b81526004016105f5906111c6565b60009182526007602090815260408084209284529190529020805460ff19166001179055565b3360009081526005602052604081205460ff1615156001146109ee5760405162461bcd60e51b81526004016105f5906111c6565b50600091825260076020908152604080842092845291905290205460ff1690565b6002546001600160a01b03163314610a395760405162461bcd60e51b81526004016105f59061115d565b6001600160a01b03841660009081526005602052604090819020805460ff19166001179055517f8bc8c407ec0edf0e4b7f95f69b5330b849daf0e4d8920f0b6f9bf809e34b89d490610a9590600a908690469087908790611213565b60405180910390a150505050565b6002546001600160a01b03163314610acd5760405162461bcd60e51b81526004016105f59061115d565b604080516060810182526001600160a01b039485168152928416602080850191825292851684830190815260009788526003845282882096885295909252909420905181546001600160a01b0319908116918416919091178255935160018201805486169184169190911790559151600290920180549093169116179055565b6002546000906001600160a01b03163314610b7a5760405162461bcd60e51b81526004016105f59061115d565b6001600160a01b0384166000908152600a602052604090205460ff1615610bdc5760405162461bcd60e51b8152602060048201526016602482015275141c9bdd1bd8dbdb08185b1c9958591e48185919195960521b60448201526064016105f5565b60008681526009602090815260408083205460048352818420818552909252909120610c09908a8a610d33565b506000878152600860209081526040808320848452825280832080546001600160a01b03199081166001600160a01b038981169190911790925582516060810184528a83168082528c84168287019081528b85168387019081528f8952600388528689208a8a52885286892093518454861690871617845590516001848101805487169288169290921790915590516002909301805490941692909416919091179091558452600a90925291829020805460ff19169091179055517fbaa5936274f6bddc88193a7849c248b5d5b80204b8d07343a1e21945f18e6b6f90610cff908b908b908b908b908b908b908b908a90611264565b60405180910390a16000878152600960205260408120805491610d21836112cc565b90915550909998505050505050505050565b828054610d3f9061118b565b90600052602060002090601f016020900481019282610d615760008555610da7565b82601f10610d7a5782800160ff19823516178555610da7565b82800160010185558215610da7579182015b82811115610da7578235825591602001919060010190610d8c565b50610db3929150610db7565b5090565b5b80821115610db35760008155600101610db8565b60008060408385031215610ddf57600080fd5b50508035926020909101359150565b80356001600160a01b0381168114610e0557600080fd5b919050565b600060208284031215610e1c57600080fd5b610e2582610dee565b9392505050565b8015158114610e3a57600080fd5b50565b60008060408385031215610e5057600080fd5b610e5983610dee565b91506020830135610e6981610e2c565b809150509250929050565b6000815180845260005b81811015610e9a57602081850181015186830182015201610e7e565b81811115610eac576000602083870101525b50601f01601f19169290920160200192915050565b602081526000610e256020830184610e74565b600060208284031215610ee657600080fd5b5035919050565b600060208284031215610eff57600080fd5b813562ffffff81168114610e2557600080fd5b634e487b7160e01b600052604160045260246000fd5b600082601f830112610f3957600080fd5b81356001600160401b0380821115610f5357610f53610f12565b604051601f8301601f19908116603f01168101908282118183101715610f7b57610f7b610f12565b81604052838152866020858801011115610f9457600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060008060808587031215610fca57600080fd5b610fd385610dee565b935060208501356001600160401b0380821115610fef57600080fd5b610ffb88838901610f28565b9450604087013591508082111561101157600080fd5b61101d88838901610f28565b9350606087013591508082111561103357600080fd5b5061104087828801610f28565b91505092959194509250565b600080600080600060a0868803121561106457600080fd5b853594506020860135935061107b60408701610dee565b925061108960608701610dee565b915061109760808701610dee565b90509295509295909350565b600080600080600080600060c0888a0312156110be57600080fd5b87356001600160401b03808211156110d557600080fd5b818a0191508a601f8301126110e957600080fd5b8135818111156110f857600080fd5b8b602082850101111561110a57600080fd5b60209283019950975050880135945061112560408901610dee565b935061113360608901610dee565b925061114160808901610dee565b915061114f60a08901610dee565b905092959891949750929550565b602080825260149082015273436f6e74726f6c6c65723a206f6e6c792044414f60601b604082015260600190565b600181811c9082168061119f57607f821691505b602082108114156111c057634e487b7160e01b600052602260045260246000fd5b50919050565b60208082526016908201527510dbdb9d1c9bdb1b195c8e881bdb9b1e4815985d5b1d60521b604082015260600190565b60006020828403121561120857600080fd5b8151610e2581610e2c565b85815260a06020820152600061122c60a0830187610e74565b85604084015282810360608401526112448186610e74565b905082810360808401526112588185610e74565b98975050505050505050565b60e081528760e08201526000610100898b828501376000838b018201526020830198909852506001600160a01b0395861660408201529385166060850152918416608084015290921660a082015260c0810191909152601f909201601f191690910101919050565b60006000198214156112ee57634e487b7160e01b600052601160045260246000fd5b506001019056fea264697066735822122052310675f04efcd68cd94966581473c941b3e020ac1ac189e3cf14e4d4c8f68364736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addProtocol(string,uint256,address,address,address,address)": {
        "params": {
          "_govToken": "Address governance token of the protocol",
          "_name": "Name of the protocol vault combination",
          "_protocolLPToken": "Address of protocolToken eg cUSDC",
          "_provider": "Address of the protocol provider",
          "_underlying": "Address of underlying protocol vault eg USDC",
          "_vaultNumber": "Number of the vault"
        }
      },
      "addVault(address,string,string,string)": {
        "params": {
          "_vault": "Vault address to whitelist"
        }
      },
      "claim(uint256,uint256)": {
        "params": {
          "_protocolNumber": "Protocol number linked to protocol vault",
          "_vaultNumber": "Number of the vault"
        }
      },
      "getGovToken(uint256,uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to protocol vault",
          "_vaultNumber": "Number of the vault"
        },
        "returns": {
          "_0": "Protocol gov token address"
        }
      },
      "getProtocolBlacklist(uint256,uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to protocol vault",
          "_vaultNumber": "Number of the vault"
        }
      },
      "getProtocolInfo(uint256,uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to protocol vault",
          "_vaultNumber": "Number of the vault"
        }
      },
      "setClaimable(address,bool)": {
        "params": {
          "_LPToken": "Address of the underlying protocol vault",
          "_bool": "True of the underlying protocol has claimable tokens"
        }
      },
      "setDao(address)": {
        "params": {
          "_dao": "DAO address"
        }
      },
      "setProtocolBlacklist(uint256,uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to protocol vault",
          "_vaultNumber": "Number of the vault"
        }
      },
      "setProtocolInfo(uint256,uint256,address,address,address)": {
        "details": "Stores the protocol information in the protocolInfo mapping.",
        "params": {
          "_LPToken": "The address of the liquidity provider token for the protocol.",
          "_protocolNumber": "The protocol number to associate the protocol information with.",
          "_provider": "The address of the provider for the protocol.",
          "_underlying": "The address of the underlying token for the protocol.",
          "_vaultNumber": "The vault number to associate the protocol information with."
        }
      },
      "setUniswapPoolFee(uint24)": {
        "params": {
          "_poolFee": "New Pool fee"
        }
      },
      "setUniswapQuoter(address)": {
        "params": {
          "_uniswapQuoter": "New Uniswap Quoter address"
        }
      },
      "setUniswapRouter(address)": {
        "params": {
          "_uniswapRouter": "New Uniswap Router address"
        }
      },
      "setVaultWhitelistStatus(address,bool)": {
        "params": {
          "_status": "Boolean value representing the new whitelist status of the vault",
          "_vault": "Vault address to update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addProtocol(string,uint256,address,address,address,address)": {
        "notice": "Add protocol and vault to Controller"
      },
      "addVault(address,string,string,string)": {
        "notice": "Add vault to Controller"
      },
      "claim(uint256,uint256)": {
        "notice": "Harvest tokens from underlying protocols"
      },
      "getDao()": {
        "notice": "Getter for dao address"
      },
      "getGovToken(uint256,uint256)": {
        "notice": "Getter for the gov token address"
      },
      "getProtocolBlacklist(uint256,uint256)": {
        "notice": "Getter for protocol blacklist, given an vaultnumber and protocol number returns true if blacklisted. Can only be called by vault."
      },
      "getProtocolInfo(uint256,uint256)": {
        "notice": "Getter for the ProtocolInfo struct"
      },
      "setClaimable(address,bool)": {
        "notice": "Set if provider have claimable tokens"
      },
      "setDao(address)": {
        "notice": "Setter for DAO address"
      },
      "setProtocolBlacklist(uint256,uint256)": {
        "notice": "Setter for protocol blacklist, given an vaultnumber and protocol number puts the protocol on the blacklist. Can only be called by vault."
      },
      "setProtocolInfo(uint256,uint256,address,address,address)": {
        "notice": "Sets the protocol information for a specific vault and protocol number in case something goes wrong."
      },
      "setUniswapPoolFee(uint24)": {
        "notice": "Set the Uniswap Pool fee"
      },
      "setUniswapQuoter(address)": {
        "notice": "Set the Uniswap Factory address"
      },
      "setUniswapRouter(address)": {
        "notice": "Set the Uniswap Router address"
      },
      "setVaultWhitelistStatus(address,bool)": {
        "notice": "Set the whitelist status of a vault in the Controller"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2661,
        "contract": "contracts/Controller.sol:Controller",
        "label": "uniswapParams",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(UniswapParams)5050_storage"
      },
      {
        "astId": 2663,
        "contract": "contracts/Controller.sol:Controller",
        "label": "dao",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2670,
        "contract": "contracts/Controller.sol:Controller",
        "label": "protocolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProtocolInfoS)5043_storage))"
      },
      {
        "astId": 2676,
        "contract": "contracts/Controller.sol:Controller",
        "label": "protocolNames",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))"
      },
      {
        "astId": 2680,
        "contract": "contracts/Controller.sol:Controller",
        "label": "vaultWhitelist",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2684,
        "contract": "contracts/Controller.sol:Controller",
        "label": "claimable",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2690,
        "contract": "contracts/Controller.sol:Controller",
        "label": "protocolBlacklist",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))"
      },
      {
        "astId": 2696,
        "contract": "contracts/Controller.sol:Controller",
        "label": "protocolGovToken",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_address))"
      },
      {
        "astId": 2700,
        "contract": "contracts/Controller.sol:Controller",
        "label": "latestProtocolId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2704,
        "contract": "contracts/Controller.sol:Controller",
        "label": "addedProtocols",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_address))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_address)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_bool))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_bool)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_string_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => string))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_string_storage)"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_struct(ProtocolInfoS)5043_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => struct IController.ProtocolInfoS))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_struct(ProtocolInfoS)5043_storage)"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_struct(ProtocolInfoS)5043_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct IController.ProtocolInfoS)",
        "numberOfBytes": "32",
        "value": "t_struct(ProtocolInfoS)5043_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(ProtocolInfoS)5043_storage": {
        "encoding": "inplace",
        "label": "struct IController.ProtocolInfoS",
        "members": [
          {
            "astId": 5038,
            "contract": "contracts/Controller.sol:Controller",
            "label": "LPToken",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5040,
            "contract": "contracts/Controller.sol:Controller",
            "label": "provider",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5042,
            "contract": "contracts/Controller.sol:Controller",
            "label": "underlying",
            "offset": 0,
            "slot": "2",
            "type": "t_address"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UniswapParams)5050_storage": {
        "encoding": "inplace",
        "label": "struct IController.UniswapParams",
        "members": [
          {
            "astId": 5045,
            "contract": "contracts/Controller.sol:Controller",
            "label": "router",
            "offset": 0,
            "slot": "0",
            "type": "t_address"
          },
          {
            "astId": 5047,
            "contract": "contracts/Controller.sol:Controller",
            "label": "quoter",
            "offset": 0,
            "slot": "1",
            "type": "t_address"
          },
          {
            "astId": 5049,
            "contract": "contracts/Controller.sol:Controller",
            "label": "poolFee",
            "offset": 20,
            "slot": "1",
            "type": "t_uint24"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint24": {
        "encoding": "inplace",
        "label": "uint24",
        "numberOfBytes": "3"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
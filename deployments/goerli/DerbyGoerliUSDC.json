{
  "address": "0x2763eFAb9945A05423FF15040fAbB93C9692D020",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_name",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "_symbol",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "_decimals",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vaultCurrency",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_nativeToken",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_minScale",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "DepositInProtocol",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebalancingPeriod",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "price",
          "type": "uint256"
        }
      ],
      "name": "LastPrices",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "chain",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "int256[]",
          "name": "rewards",
          "type": "int256[]"
        }
      ],
      "name": "PushedRewardsToGame",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "vaultNumber",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rebalancingPeriod",
          "type": "uint256"
        }
      ],
      "name": "Rebalance",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "protocolNum",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "WithdrawFromProtocol",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BASE_SCALE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_address",
          "type": "address"
        }
      ],
      "name": "addToWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "balanceUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "blacklistProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calcShares",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "totalUnderlying",
          "type": "uint256"
        }
      ],
      "name": "calculateExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cancelDepositRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "claimAndSwapTokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "subtractedValue",
          "type": "uint256"
        }
      ],
      "name": "decreaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deltaAllocationsReceived",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "depositRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "derbyToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDepositRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGuardian",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getVaultBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getWithdrawalAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "governanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeChain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "addedValue",
          "type": "uint256"
        }
      ],
      "name": "increaseAllowance",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lastPrices",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastRewardPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "liquidityPerc",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "marginScale",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minScale",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nativeToken",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "performanceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        }
      ],
      "name": "price",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalance",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceInterval",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalanceNeeded",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rebalancingPeriod",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveProtocolAllocations",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveProtocolAllocationsGuard",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "redeemDeposit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "redeemRewardsGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewardPerLockedToken",
      "outputs": [
        {
          "internalType": "int256",
          "name": "",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "savedTotalUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sendRewardsToGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_controller",
          "type": "address"
        }
      ],
      "name": "setController",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "setDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "setDaoToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint16",
          "name": "_fee",
          "type": "uint16"
        }
      ],
      "name": "setGovernanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_homeChain",
          "type": "uint32"
        }
      ],
      "name": "setHomeChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_xProvider",
          "type": "address"
        }
      ],
      "name": "setHomeXProvider",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_liquidityPerc",
          "type": "uint256"
        }
      ],
      "name": "setLiquidityPerc",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "int256",
          "name": "_marginScale",
          "type": "int256"
        }
      ],
      "name": "setMarginScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinimumDeposit",
          "type": "uint256"
        }
      ],
      "name": "setMinimumDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_performanceFee",
          "type": "uint256"
        }
      ],
      "name": "setPerformanceFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_timestampInternal",
          "type": "uint256"
        }
      ],
      "name": "setRebalanceInterval",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "setTotalUnderlying",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "_state",
          "type": "bool"
        }
      ],
      "name": "setTraining",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_maxDeposit",
          "type": "uint256"
        }
      ],
      "name": "setTrainingDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_minScale",
          "type": "uint256"
        }
      ],
      "name": "setminScale",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocatedTokens",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vaultOff",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawAllowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_protocolNum",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_minAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_deadline",
          "type": "uint256"
        }
      ],
      "name": "withdrawFromBlacklistedProtocol",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "withdrawalRequest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "shares",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "xProvider",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1ac5657d7d5ad0cccccf68278526e5f26236aef98fe4dbf649af1ee3f8bc104d",
  "receipt": {
    "to": null,
    "from": "0x1Ca7b496Ac4E609cf400793Db67916AC91773927",
    "contractAddress": "0x2763eFAb9945A05423FF15040fAbB93C9692D020",
    "transactionIndex": 54,
    "gasUsed": "4708785",
    "logsBloom": "0x
    "blockHash": "0x303a372d068231d01dd2f462c5cf91c88f432d1d6ff3c6532d3dc78028c182e8",
    "transactionHash": "0x1ac5657d7d5ad0cccccf68278526e5f26236aef98fe4dbf649af1ee3f8bc104d",
    "logs": [],
    "blockNumber": 10205460,
    "cumulativeGasUsed": "20753687",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "DerbyUSDC",
    "dfUSDC",
    6,
    1,
    "0x1Ca7b496Ac4E609cf400793Db67916AC91773927",
    "0xa4EA3fba92C893A3e824aD75CA576852E269520f",
    "0x07865c6E87B9F70255377e024ace6630C1Eaa37F",
    "0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6",
    0
  ],
  "numDeployments": 1,
  "solcInputHash": "e43ec0e2d5415b9a8828a8651067602e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"_symbol\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"_decimals\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vaultCurrency\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_nativeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_minScale\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"DepositInProtocol\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebalancingPeriod\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"name\":\"LastPrices\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"chain\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"int256[]\",\"name\":\"rewards\",\"type\":\"int256[]\"}],\"name\":\"PushedRewardsToGame\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"vaultNumber\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rebalancingPeriod\",\"type\":\"uint256\"}],\"name\":\"Rebalance\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"protocolNum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"WithdrawFromProtocol\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BASE_SCALE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_address\",\"type\":\"address\"}],\"name\":\"addToWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"balanceUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"blacklistProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calcShares\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"totalUnderlying\",\"type\":\"uint256\"}],\"name\":\"calculateExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cancelDepositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"claimAndSwapTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deltaAllocationsReceived\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"depositRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"derbyToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDepositRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGuardian\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getVaultBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getWithdrawalAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"governanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeChain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lastPrices\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastRewardPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"liquidityPerc\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"marginScale\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minScale\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nativeToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"performanceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"}],\"name\":\"price\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalance\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceInterval\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalanceNeeded\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rebalancingPeriod\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveProtocolAllocations\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveProtocolAllocationsGuard\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"redeemDeposit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"redeemRewardsGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewardPerLockedToken\",\"outputs\":[{\"internalType\":\"int256\",\"name\":\"\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"savedTotalUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sendRewardsToGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_controller\",\"type\":\"address\"}],\"name\":\"setController\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"setDaoToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint16\",\"name\":\"_fee\",\"type\":\"uint16\"}],\"name\":\"setGovernanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_homeChain\",\"type\":\"uint32\"}],\"name\":\"setHomeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_xProvider\",\"type\":\"address\"}],\"name\":\"setHomeXProvider\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_liquidityPerc\",\"type\":\"uint256\"}],\"name\":\"setLiquidityPerc\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"int256\",\"name\":\"_marginScale\",\"type\":\"int256\"}],\"name\":\"setMarginScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimumDeposit\",\"type\":\"uint256\"}],\"name\":\"setMinimumDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_performanceFee\",\"type\":\"uint256\"}],\"name\":\"setPerformanceFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_timestampInternal\",\"type\":\"uint256\"}],\"name\":\"setRebalanceInterval\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"setTotalUnderlying\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"_state\",\"type\":\"bool\"}],\"name\":\"setTraining\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_maxDeposit\",\"type\":\"uint256\"}],\"name\":\"setTrainingDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_minScale\",\"type\":\"uint256\"}],\"name\":\"setminScale\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocatedTokens\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vaultOff\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawAllowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_protocolNum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_minAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_deadline\",\"type\":\"uint256\"}],\"name\":\"withdrawFromBlacklistedProtocol\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"withdrawalRequest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"shares\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"xProvider\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"balanceUnderlying(uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to an underlying protocol e.g compound_usdc_01\"},\"returns\":{\"_0\":\"Balance in VaultCurrency e.g USDC\"}},\"blacklistProtocol(uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to an underlying vault e.g compound_usdc_01\"}},\"calcShares(uint256,uint256)\":{\"params\":{\"_amount\":\"Amount in underyling token e.g USDC\",\"_protocolNum\":\"Protocol number linked to an underlying protocol e.g compound_usdc_01\"},\"returns\":{\"_0\":\"number of shares i.e LP tokens\"}},\"calculateExchangeRate(uint256)\":{\"params\":{\"totalUnderlying\":\"Total underlying in vaultCurrency\"},\"returns\":{\"_0\":\"price Exchange rate\"}},\"claimAndSwapTokens(uint256,uint256,uint256)\":{\"details\":\"Claims governance tokens from the underlying protocol if claimable, and swaps them to the vault's underlying token\",\"params\":{\"_protocolNum\":\"The protocol ID for which to claim and swap tokens\"}},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"decreaseAllowance(address,uint256)\":{\"details\":\"Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.\"},\"deposit(uint256)\":{\"details\":\"this can only be done if the funds from the user will be deposited directly into the underlying protocols. Hence, this is very gas intensive\",\"params\":{\"_amount\":\"Amount to deposit in vaultCurrency\"},\"returns\":{\"_0\":\"shares Amount of shares minted in LPtoken.decimals()\"}},\"depositRequest(uint256)\":{\"details\":\"This function allows a user to deposit an amount greater than or equal to the minimum deposit, transfers the deposited amount from the user to the Vault, and records the deposit request. If the training mode is active, the function checks if the user is whitelisted and the deposit doesn't exceed the max training deposit.\",\"params\":{\"_amount\":\"The amount that the user wants to deposit in vaultCurrency.\"}},\"getDepositRequest()\":{\"returns\":{\"_0\":\"The deposit request of the user in vaultCurrency.\"}},\"increaseAllowance(address,uint256)\":{\"details\":\"Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"price(uint256)\":{\"params\":{\"_protocolNum\":\"Protocol number linked to an underlying protocol e.g compound_usdc_01\"},\"returns\":{\"_0\":\"protocolPrice Price per lp token\"}},\"rebalance()\":{\"details\":\"amountToProtocol = totalAmount * currentAllocation / totalAllocatedTokensamountToDeposit = amountToProtocol - currentBalanceProtocolif amountToDeposit < 0 => withdrawExecute all withdrawals before deposits\"},\"rebalanceNeeded()\":{\"returns\":{\"_0\":\"bool True of rebalance is needed, false if not\"}},\"redeemDeposit()\":{\"details\":\"This function allows a user to redeem their deposit requests and receive shares. This can only be done if a deposit request has been made and the current rebalancing period is greater than the period in which the deposit request was made. The function will mint new shares in exchange for the deposit and update the user's deposit request status.\",\"returns\":{\"shares\":\"The number of shares minted in exchange for the deposit.\"}},\"redeemRewardsGame(uint256,address)\":{\"params\":{\"_user\":\"Address of the user\",\"_value\":\"Amount to set a request in vaultCurrency\"}},\"setDao(address)\":{\"params\":{\"_dao\":\"New address of the governance / DAO\"}},\"setDaoToken(address)\":{\"params\":{\"_token\":\"New address of the derby token\"}},\"setGovernanceFee(uint16)\":{\"params\":{\"_fee\":\"Fee in basis points\"}},\"setGuardian(address)\":{\"params\":{\"_guardian\":\"new address of the guardian\"}},\"setHomeXProvider(address)\":{\"params\":{\"_xProvider\":\"new address of xProvider on this chain\"}},\"setLiquidityPerc(uint256)\":{\"details\":\"The actual liquidityPerc could be a bit more or a bit less than the liquidityPerc set here.This is because some deposits or withdrawals might not execute because they don't meet the marginScale.\",\"params\":{\"_liquidityPerc\":\"Value at which to set the liquidityPerc.\"}},\"setMarginScale(int256)\":{\"details\":\"Take into account the scale of the underlying.\",\"params\":{\"_marginScale\":\"Value at which to set the marginScale.\"}},\"setMinimumDeposit(uint256)\":{\"details\":\"Sets the minimum deposit amount allowed.\",\"params\":{\"_newMinimumDeposit\":\"The new minimum deposit amount to be set.\"}},\"setPerformanceFee(uint256)\":{\"details\":\"The actual performanceFee could be a bit more or a bit less than the performanceFee set here due to approximations in the game.\",\"params\":{\"_performanceFee\":\"Value at which to set the performanceFee.\"}},\"setRebalanceInterval(uint256)\":{\"params\":{\"_timestampInternal\":\"UNIX timestamp\"}},\"setminScale(uint256)\":{\"params\":{\"_minScale\":\"New maximum divergence in vaultCurrency\"}},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transfer(address,uint256)\":{\"details\":\"See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`.\"},\"withdraw(uint256)\":{\"details\":\"this can only be done if the funds from the user will be withdrawed directly from the underlying protocols. Hence, this is very gas intensive\",\"params\":{\"_amount\":\"Amount to withdraw in vaultCurrency\"},\"returns\":{\"_0\":\"shares Amount of shares the user needs to supply in LPtoken decimals()\"}},\"withdrawAllowance()\":{\"details\":\"Will send the user funds and reset the allowance\",\"returns\":{\"value\":\"Amount received by seller in vaultCurrency, in vaultcurrency.decimals()\"}},\"withdrawFromBlacklistedProtocol(uint256,uint256,uint256)\":{\"details\":\"This function should only be called after a protocol has been blacklisted.\",\"params\":{\"_protocolNum\":\"The protocol number from which to withdraw the funds.\"}},\"withdrawRewards()\":{\"details\":\"Swaps vaultCurrency to Derby tokens, sends the funds to the user, and resets the allowance\",\"returns\":{\"value\":\"The amount of reward withdrawn by the user\"}},\"withdrawalRequest(uint256)\":{\"details\":\"Will give the user allowance for his funds and pulls the extra funds at the next rebalance\",\"params\":{\"_amount\":\"Amount to withdraw in vaultCurrency\"},\"returns\":{\"shares\":\"Amount of shares the user needs to supply in LPtoken decimals()\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"addToWhitelist(address)\":{\"notice\":\"Setter to add an address to the whitelist\"},\"balanceUnderlying(uint256)\":{\"notice\":\"Get balance in VaultCurrency in underlying protocol\"},\"blacklistProtocol(uint256)\":{\"notice\":\"The DAO should be able to blacklist protocols, the funds should be sent to the vault.\"},\"calcShares(uint256,uint256)\":{\"notice\":\"Calculates how many shares are equal to the amount in vault currency\"},\"calculateExchangeRate(uint256)\":{\"notice\":\"Function to calculate the exchangeRate (decimals = vaultCurrency decimals)\"},\"cancelDepositRequest()\":{\"notice\":\"Cancel the deposit request for the caller.\"},\"claimAndSwapTokens(uint256,uint256,uint256)\":{\"notice\":\"Claims and swaps tokens from the underlying protocol\"},\"deposit(uint256)\":{\"notice\":\"function that enables direct deposits into the vault\"},\"depositRequest(uint256)\":{\"notice\":\"Enables a user to make a deposit into the Vault.\"},\"getDao()\":{\"notice\":\"Getter for dao address\"},\"getDepositRequest()\":{\"notice\":\"Get the deposit request for a specific user.\"},\"getGuardian()\":{\"notice\":\"Getter for guardian address\"},\"getRewardAllowance()\":{\"notice\":\"Returns the rewards the user is able to withdraw\"},\"getWithdrawalAllowance()\":{\"notice\":\"Returns the amount in vaultCurrency the user is able to withdraw\"},\"price(uint256)\":{\"notice\":\"Get price for underlying protocol\"},\"rebalance()\":{\"notice\":\"Vaults rebalanceRebalances i.e deposit or withdraw from all underlying protocols\"},\"rebalanceNeeded()\":{\"notice\":\"Checks if a rebalance is needed based on the set interval\"},\"receiveProtocolAllocations(int256[])\":{\"notice\":\"See receiveProtocolAllocations below\"},\"receiveProtocolAllocationsGuard(int256[])\":{\"notice\":\"Guardian function\"},\"redeemDeposit()\":{\"notice\":\"Redeems the pending deposit requests for the calling user.\"},\"redeemRewardsGame(uint256,address)\":{\"notice\":\"Function for the game to set a withdrawalRequest for the rewards of the game user\"},\"sendRewardsToGame()\":{\"notice\":\"Vaults push rewardsPerLockedToken to game\"},\"setController(address)\":{\"notice\":\"Setter for controller address\"},\"setDao(address)\":{\"notice\":\"Set the governance address\"},\"setDaoToken(address)\":{\"notice\":\"Setter for derby token address\"},\"setGovernanceFee(uint16)\":{\"notice\":\"Setter for governance fee\"},\"setGuardian(address)\":{\"notice\":\"Setter for guardian address\"},\"setHomeChain(uint32)\":{\"notice\":\"Setter for new homeChain Id\"},\"setHomeXProvider(address)\":{\"notice\":\"Setter for xProvider address\"},\"setLiquidityPerc(uint256)\":{\"notice\":\"Set the liquidityPerc, the amount of liquidity which should be held in the vault after rebalancing.\"},\"setMarginScale(int256)\":{\"notice\":\"Set the marginScale, the threshold used for deposits and withdrawals.If the threshold is not met the deposit/ withdrawal is not executed.\"},\"setPerformanceFee(uint256)\":{\"notice\":\"Set the performanceFee, the percentage of the yield that goes to the game players.\"},\"setRebalanceInterval(uint256)\":{\"notice\":\"Set minimum interval for the rebalance function\"},\"setTotalUnderlying()\":{\"notice\":\"Set total balance in VaultCurrency in all underlying protocols\"},\"setTraining(bool)\":{\"notice\":\"Setter to control the training state in de deposit function\"},\"setTrainingDeposit(uint256)\":{\"notice\":\"Setter for maximum amount to be able to deposit in training state\"},\"setminScale(uint256)\":{\"notice\":\"Setter for maximum divergence a user can get during a withdraw\"},\"withdraw(uint256)\":{\"notice\":\"function that enables direct withdrawals from the vault\"},\"withdrawAllowance()\":{\"notice\":\"Withdraw the allowance the user requested on the last rebalancing period\"},\"withdrawFromBlacklistedProtocol(uint256,uint256,uint256)\":{\"notice\":\"Withdraws the funds from a blacklisted protocol and updates the savedTotalUnderlying.\"},\"withdrawRewards()\":{\"notice\":\"Withdraw the reward allowance set by the game using the redeemRewardsGame function\"},\"withdrawalRequest(uint256)\":{\"notice\":\"Withdrawal request for when the vault doesnt have enough funds available\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Vault.sol\":\"Vault\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x0e9621f60b2faabe65549f7ed0f24e8853a45c1b7990d47e8160e523683f3935\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC20.sol\\\";\\nimport \\\"./extensions/IERC20Metadata.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n * For a generic mechanism see {ERC20PresetMinterPauser}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n *\\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\\n * functions have been added to mitigate the well-known issues around setting\\n * allowances. See {IERC20-approve}.\\n */\\ncontract ERC20 is Context, IERC20, IERC20Metadata {\\n    mapping(address => uint256) private _balances;\\n\\n    mapping(address => mapping(address => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * The default value of {decimals} is 18. To select a different value for\\n     * {decimals} you should overload it.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\\n     * overridden;\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual override returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual override returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `amount`.\\n     */\\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `amount`.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) public virtual override returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, amount);\\n        _transfer(from, to, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\\n     *\\n     * This is an alternative to {approve} that can be used as a mitigation for\\n     * problems described in {IERC20-approve}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `spender` must have allowance for the caller of at least\\n     * `subtractedValue`.\\n     */\\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        uint256 currentAllowance = allowance(owner, spender);\\n        require(currentAllowance >= subtractedValue, \\\"ERC20: decreased allowance below zero\\\");\\n        unchecked {\\n            _approve(owner, spender, currentAllowance - subtractedValue);\\n        }\\n\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves `amount` of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `amount`.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {\\n        require(from != address(0), \\\"ERC20: transfer from the zero address\\\");\\n        require(to != address(0), \\\"ERC20: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, amount);\\n\\n        uint256 fromBalance = _balances[from];\\n        require(fromBalance >= amount, \\\"ERC20: transfer amount exceeds balance\\\");\\n        unchecked {\\n            _balances[from] = fromBalance - amount;\\n        }\\n        _balances[to] += amount;\\n\\n        emit Transfer(from, to, amount);\\n\\n        _afterTokenTransfer(from, to, amount);\\n    }\\n\\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\\n     * the total supply.\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     */\\n    function _mint(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: mint to the zero address\\\");\\n\\n        _beforeTokenTransfer(address(0), account, amount);\\n\\n        _totalSupply += amount;\\n        _balances[account] += amount;\\n        emit Transfer(address(0), account, amount);\\n\\n        _afterTokenTransfer(address(0), account, amount);\\n    }\\n\\n    /**\\n     * @dev Destroys `amount` tokens from `account`, reducing the\\n     * total supply.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * Requirements:\\n     *\\n     * - `account` cannot be the zero address.\\n     * - `account` must have at least `amount` tokens.\\n     */\\n    function _burn(address account, uint256 amount) internal virtual {\\n        require(account != address(0), \\\"ERC20: burn from the zero address\\\");\\n\\n        _beforeTokenTransfer(account, address(0), amount);\\n\\n        uint256 accountBalance = _balances[account];\\n        require(accountBalance >= amount, \\\"ERC20: burn amount exceeds balance\\\");\\n        unchecked {\\n            _balances[account] = accountBalance - amount;\\n        }\\n        _totalSupply -= amount;\\n\\n        emit Transfer(account, address(0), amount);\\n\\n        _afterTokenTransfer(account, address(0), amount);\\n    }\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     */\\n    function _approve(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        require(owner != address(0), \\\"ERC20: approve from the zero address\\\");\\n        require(spender != address(0), \\\"ERC20: approve to the zero address\\\");\\n\\n        _allowances[owner][spender] = amount;\\n        emit Approval(owner, spender, amount);\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\\n     *\\n     * Does not update the allowance amount in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Might emit an {Approval} event.\\n     */\\n    function _spendAllowance(\\n        address owner,\\n        address spender,\\n        uint256 amount\\n    ) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            require(currentAllowance >= amount, \\\"ERC20: insufficient allowance\\\");\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - amount);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * will be transferred to `to`.\\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any transfer of tokens. This includes\\n     * minting and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\\n     * has been transferred to `to`.\\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x24b04b8aacaaf1a4a0719117b29c9c3647b1f479c5ac2a60f5ff1bb6d839c238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n *\\n * _Available since v4.1._\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x8de418a5503946cabe331f35fe242d3201a73f67f77aaeb7110acb1f30423aca\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IQuoter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\n/// @title Quoter Interface\\r\\n/// @notice Supports quoting the calculated amounts from exact input or exact output swaps\\r\\n/// @dev These functions are not marked view because they rely on calling non-view functions and reverting\\r\\n/// to compute the result. They are also not gas efficient and should not be called on-chain.\\r\\ninterface IQuoter {\\r\\n  /// @notice Returns the amount out received for a given exact input swap without executing the swap\\r\\n  /// @param path The path of the swap, i.e. each token pair and the pool fee\\r\\n  /// @param amountIn The amount of the first token to swap\\r\\n  /// @return amountOut The amount of the last token that would be received\\r\\n  function quoteExactInput(bytes memory path, uint256 amountIn)\\r\\n    external\\r\\n    returns (uint256 amountOut);\\r\\n\\r\\n  /// @notice Returns the amount out received for a given exact input but for a swap of a single pool\\r\\n  /// @param tokenIn The token being swapped in\\r\\n  /// @param tokenOut The token being swapped out\\r\\n  /// @param fee The fee of the token pool to consider for the pair\\r\\n  /// @param amountIn The desired input amount\\r\\n  /// @param sqrtPriceLimitX96 The price limit of the pool that cannot be exceeded by the swap\\r\\n  /// @return amountOut The amount of `tokenOut` that would be received\\r\\n  function quoteExactInputSingle(\\r\\n    address tokenIn,\\r\\n    address tokenOut,\\r\\n    uint24 fee,\\r\\n    uint256 amountIn,\\r\\n    uint160 sqrtPriceLimitX96\\r\\n  ) external returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x3a459293365e4b7d5dddb38eda3c68d742ee035c133b2ef0c4e3b3e52d3a469a\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/ISwapRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\ninterface ISwapRouter {\\r\\n  struct ExactInputSingleParams {\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n    uint24 fee;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n    uint160 sqrtPriceLimitX96;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another token\\r\\n  /// @param params The parameters necessary for the swap, encoded as `ExactInputSingleParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInputSingle(ISwapRouter.ExactInputSingleParams memory params)\\r\\n    external\\r\\n    returns (uint256 amountOut);\\r\\n\\r\\n  struct ExactInputParams {\\r\\n    bytes path;\\r\\n    address recipient;\\r\\n    uint256 deadline;\\r\\n    uint256 amountIn;\\r\\n    uint256 amountOutMinimum;\\r\\n  }\\r\\n\\r\\n  /// @notice Swaps `amountIn` of one token for as much as possible of another along the specified path\\r\\n  /// @param params The parameters necessary for the multi-hop swap, encoded as `ExactInputParams` in calldata\\r\\n  /// @return amountOut The amount of the received token\\r\\n  function exactInput(ExactInputParams calldata params)\\r\\n    external\\r\\n    payable\\r\\n    returns (uint256 amountOut);\\r\\n}\\r\\n\",\"keccak256\":\"0x22353db7855673a12308ba8fcffadd2b21cd900d5ce58b749bf878e8c905ff22\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\n/// @title Interface for WETH9\\r\\ninterface IWETH9 is IERC20 {\\r\\n  /// @notice Deposit ether to get wrapped ether\\r\\n  function deposit() external payable;\\r\\n\\r\\n  /// @notice Withdraw wrapped ether to get ether\\r\\n  function withdraw(uint256) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xf4b5008d0c423bd867b814efe0bc6c41368ba93dcaea832a62984a649c40c6a8\",\"license\":\"MIT\"},\"contracts/Interfaces/IController.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IController {\\n  struct ProtocolInfoS {\\n    address LPToken;\\n    address provider;\\n    address underlying;\\n  }\\n\\n  struct UniswapParams {\\n    address router;\\n    address quoter;\\n    uint24 poolFee;\\n  }\\n\\n  function claim(uint256 _ETFnumber, uint256 protocolNumber) external returns (bool);\\n\\n  function addProtocol(\\n    string calldata name,\\n    uint256 _ETFnumber,\\n    address provider,\\n    address protocolLPToken,\\n    address underlying,\\n    address govToken\\n  ) external returns (uint256);\\n\\n  function getProtocolInfo(\\n    uint256 _ETFnumber,\\n    uint256 protocolNumber\\n  ) external view returns (ProtocolInfoS memory);\\n\\n  function getUniswapParams() external view returns (UniswapParams memory);\\n\\n  function latestProtocolId(uint256 _ETFnumber) external view returns (uint256);\\n\\n  function setVaultWhitelistStatus(address _vault, bool _status) external;\\n\\n  function setUniswapRouter(address _uniswapRouter) external;\\n\\n  function setUniswapQuoter(address _uniswapQuoter) external;\\n\\n  function setUniswapPoolFee(uint24 _poolFee) external;\\n\\n  function getUniswapPoolFee() external view returns (uint24);\\n\\n  function getUniswapQuoter() external view returns (address);\\n\\n  function getProtocolBlacklist(\\n    uint256 _ETFnumber,\\n    uint256 _protocolNum\\n  ) external view returns (bool);\\n\\n  function setProtocolBlacklist(uint256 _ETFnumber, uint256 _protocolNum) external;\\n\\n  function getGovToken(uint256 _vaultNumber, uint256 _protocolNum) external view returns (address);\\n\\n  function getDao() external view returns (address);\\n}\\n\",\"keccak256\":\"0x25c788da89b1d3ee6d795545b5fb8838d7bfe5d555ee0b93266038088ce37b45\",\"license\":\"MIT\"},\"contracts/Interfaces/IProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IProvider {\\n  function deposit(\\n    uint256 _amount,\\n    address _uToken,\\n    address _protocolLPToken\\n  ) external returns (uint256);\\n\\n  function withdraw(\\n    uint256 _amount,\\n    address _uToken,\\n    address _protocolLPToken\\n  ) external returns (uint256);\\n\\n  function exchangeRate(address _protocolLPToken) external view returns (uint256);\\n\\n  function balanceUnderlying(address _address, address _protocolLPToken)\\n    external\\n    view\\n    returns (uint256);\\n\\n  function calcShares(uint256 _amount, address _protocolLPToken) external view returns (uint256);\\n\\n  function balance(address _address, address _protocolLPToken) external view returns (uint256);\\n\\n  function claim(address _protocolLPToken, address _claimer) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9708d9f69e636e5ababc9e173b2b4e267bfb3b056118443c011ef73a640f4a70\",\"license\":\"MIT\"},\"contracts/Interfaces/IXProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IXProvider {\\n  function xReceive(uint256 _value) external; // receiving a (permissioned) value crosschain.\\n\\n  function pushProtocolAllocationsToVault(\\n    uint32 _chainId,\\n    address _vault,\\n    int256[] memory _deltas\\n  ) external payable;\\n\\n  function pushRewardsToVault(\\n    uint32 _chainId,\\n    address _vault,\\n    address _user,\\n    uint256 _value\\n  ) external payable;\\n\\n  function pushRewardsToGame(\\n    uint256 _vaultNumber,\\n    uint32 _chainId,\\n    int256[] memory _rewards\\n  ) external payable;\\n\\n  function calculateEstimatedAmount(uint256 _amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x44c271a0cb3625f0c76a5ed54bb9ea5705289115046cb6d38dfd10a8293b53fd\",\"license\":\"MIT\"},\"contracts/Vault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\n\\nimport \\\"./Interfaces/IController.sol\\\";\\nimport \\\"./Interfaces/IProvider.sol\\\";\\nimport \\\"./Interfaces/IXProvider.sol\\\";\\n\\nimport \\\"./VaultToken.sol\\\";\\nimport \\\"./libraries/Swap.sol\\\";\\n\\nimport \\\"hardhat/console.sol\\\";\\n\\ncontract Vault is ReentrancyGuard, VaultToken {\\n  using SafeERC20 for IERC20Metadata;\\n\\n  struct UserInfo {\\n    // amount in vaultCurrency the vault owes to the user\\n    uint256 withdrawalAllowance;\\n    // rebalancing period the withdrawal request is made\\n    uint256 withdrawalRequestPeriod;\\n    // amount in vaultCurrency the vault owes to the user\\n    uint256 rewardAllowance;\\n    // rebalancing period the reward request is made\\n    uint256 rewardRequestPeriod;\\n    // amount in vaultCurrency for the deposit request of the user\\n    uint256 depositRequest;\\n    // rebalancing period the deposit request is made\\n    uint256 depositRequestPeriod;\\n  }\\n\\n  IERC20Metadata internal vaultCurrency;\\n  IController internal controller;\\n\\n  bool public deltaAllocationsReceived;\\n\\n  address public immutable nativeToken; // WETH\\n  address private dao;\\n  address private guardian;\\n\\n  uint256 public vaultNumber;\\n  uint256 public liquidityPerc;\\n  uint256 public performanceFee; // percentage\\n  uint256 public rebalancingPeriod;\\n  int256 public marginScale;\\n  uint256 public exchangeRate; // always expressed in #decimals equal to the #decimals from the vaultCurrency\\n\\n  // used in storePriceAndRewards, must be equal to DerbyToken.decimals()\\n  uint256 public BASE_SCALE = 1e18;\\n\\n  // UNIX timestamp\\n  uint256 public rebalanceInterval;\\n  uint256 public lastTimeStamp;\\n\\n  // total underlying of all protocols in vault, excluding vault balance\\n  uint256 public savedTotalUnderlying;\\n\\n  // total amount of funds the vault reserved for users that made a withdrawalRequest\\n  uint256 internal totalWithdrawalRequests;\\n  uint256 internal totalDepositRequests;\\n\\n  // total number of allocated Derby tokens currently (in derbytoken.decimals())\\n  uint256 public totalAllocatedTokens;\\n  // delta of the total number of Derby tokens allocated on next rebalancing\\n  int256 private deltaAllocatedTokens;\\n\\n  address public derbyToken;\\n  address public game;\\n  address public xProvider;\\n\\n  bool public vaultOff;\\n\\n  uint32 public homeChain;\\n  uint256 public governanceFee; // Basis points\\n  uint256 public minScale; // before decimals!\\n  uint256 public minimumDeposit;\\n  uint256 public lastRewardPeriod;\\n\\n  string internal allowanceError = \\\"!Allowance\\\";\\n  string internal noFundsError = \\\"No funds\\\";\\n\\n  // training\\n  bool private training;\\n  uint256 private maxTrainingDeposit;\\n  mapping(address => bool) private whitelist;\\n\\n  // (protocolNumber => currentAllocation): current allocations over the protocols\\n  mapping(uint256 => uint256) internal currentAllocations;\\n\\n  // (protocolNumber => deltaAllocation): delta of the portfolio on next rebalancing\\n  mapping(uint256 => int256) internal deltaAllocations;\\n\\n  // historical reward per protocol per token, formula: TVL * yield * perfFee / totalLockedTokens\\n  // (rebalancingPeriod => protocolId => rewardPerLockedToken)\\n  mapping(uint256 => mapping(uint256 => int256)) public rewardPerLockedToken; // in BASE_SCALE * vaultCurrency.decimals() nr of decimals\\n\\n  // (protocolNumber => lastPrice): last price of underlying protocol vault\\n  mapping(uint256 => uint256) public lastPrices; // in protocol.LPToken.decimals()\\n\\n  // (userAddress => userInfo struct)\\n  mapping(address => UserInfo) internal userInfo;\\n\\n  modifier onlyDao() {\\n    require(msg.sender == dao, \\\"Vault: only DAO\\\");\\n    _;\\n  }\\n\\n  modifier onlyGuardian() {\\n    require(msg.sender == guardian, \\\"only Guardian\\\");\\n    _;\\n  }\\n\\n  modifier onlyXProvider() {\\n    require(msg.sender == xProvider, \\\"only xProvider\\\");\\n    _;\\n  }\\n\\n  event DepositInProtocol(uint256 protocolNum, uint256 amount);\\n  event WithdrawFromProtocol(uint256 protocolNum, uint256 amount);\\n  event LastPrices(uint256 protocolNum, uint256 rebalancingPeriod, uint256 price);\\n  event PushedRewardsToGame(uint256 vaultNumber, uint32 chain, int256[] rewards);\\n  event Deposit(address user, uint256 amount, uint256 shares);\\n  event Withdraw(address user, uint256 amount, uint256 value);\\n  event Rebalance(uint256 vaultNumber, uint256 rebalancingPeriod);\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals,\\n    uint256 _vaultNumber,\\n    address _dao,\\n    address _controller,\\n    address _vaultCurrency,\\n    address _nativeToken,\\n    uint256 _minScale\\n  ) VaultToken(_name, _symbol, _decimals) {\\n    controller = IController(_controller);\\n    vaultCurrency = IERC20Metadata(_vaultCurrency);\\n\\n    vaultNumber = _vaultNumber;\\n    dao = _dao;\\n    lastTimeStamp = block.timestamp;\\n    nativeToken = _nativeToken;\\n\\n    exchangeRate = 10 ** vaultCurrency.decimals();\\n    governanceFee = 0;\\n    minScale = _minScale;\\n    minimumDeposit = 100 * 10 ** (vaultCurrency.decimals() - minScale);\\n  }\\n\\n  /// @notice Vaults rebalance\\n  /// @notice Rebalances i.e deposit or withdraw from all underlying protocols\\n  /// @dev amountToProtocol = totalAmount * currentAllocation / totalAllocatedTokens\\n  /// @dev amountToDeposit = amountToProtocol - currentBalanceProtocol\\n  /// @dev if amountToDeposit < 0 => withdraw\\n  /// @dev Execute all withdrawals before deposits\\n  function rebalance() external nonReentrant {\\n    require(rebalanceNeeded(), \\\"No rebalance needed\\\");\\n    require(deltaAllocationsReceived, \\\"!Delta allocations\\\");\\n    rebalancingPeriod++;\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n\\n    storePriceAndRewardsLoop(latestID); // based on allocations and underlying of last period and the price increases between last and current period\\n\\n    setTotalUnderlying();\\n    uint256 underlyingIncBalance = calcUnderlyingIncBalance();\\n\\n    settleDeltaAllocation();\\n    uint256[] memory protocolToDeposit = rebalanceCheckProtocols(latestID, underlyingIncBalance);\\n\\n    executeDeposits(protocolToDeposit);\\n\\n    savedTotalUnderlying = underlyingIncBalance;\\n    uint256 oldExchangeRate = exchangeRate;\\n\\n    exchangeRate = calculateExchangeRate(savedTotalUnderlying);\\n\\n    if (exchangeRate > oldExchangeRate)\\n      exchangeRate = includePerformanceFee(exchangeRate, oldExchangeRate);\\n\\n    lastTimeStamp = block.timestamp;\\n    emit Rebalance(vaultNumber, rebalancingPeriod);\\n  }\\n\\n  /// @notice Function to include the performanceFee in the exchangeRate\\n  /// @dev Calculated by first evaluating the performance by determining the increase in exchangeRate\\n  /// @dev Next the performanceFee is calculated by multiplying the performance with the percentage after substracting the performanceFee\\n  /// @param _exchangeRate The exchangeRate before the performanceFee is added\\n  /// @param _oldExchangeRate The exchangeRate before the rebalance\\n  /// @return uint256 The new exchangeRate including the performanceFee\\n  function includePerformanceFee(\\n    uint256 _exchangeRate,\\n    uint256 _oldExchangeRate\\n  ) internal view returns (uint256) {\\n    uint256 nominator = (_exchangeRate - _oldExchangeRate) *\\n      _oldExchangeRate *\\n      (100 - performanceFee);\\n    uint256 denominator = 100 * _oldExchangeRate;\\n    return nominator / denominator + _oldExchangeRate;\\n  }\\n\\n  /// @notice Helper to return underlying balance plus totalUnderlying - liquidty for the vault\\n  /// @return underlying totalUnderlying - liquidityVault\\n  function calcUnderlyingIncBalance() internal view returns (uint256) {\\n    uint256 totalUnderlyingInclVaultBalance = savedTotalUnderlying +\\n      getVaultBalance() -\\n      totalWithdrawalRequests;\\n    uint256 liquidityVault = (totalUnderlyingInclVaultBalance * liquidityPerc) / 100;\\n    return totalUnderlyingInclVaultBalance - liquidityVault;\\n  }\\n\\n  /// @notice Adds deltaAllocatedTokens to totalAllocatedTokens\\n  function settleDeltaAllocation() internal {\\n    int256 newTotalAllocatedTokens = int(totalAllocatedTokens) + deltaAllocatedTokens;\\n    require(newTotalAllocatedTokens >= 0);\\n\\n    totalAllocatedTokens = uint(newTotalAllocatedTokens);\\n    deltaAllocatedTokens = 0;\\n    deltaAllocationsReceived = false;\\n  }\\n\\n  /// @notice Rebalances i.e deposit or withdraw from all underlying protocols\\n  /// @dev Loops over all protocols in ETF, calculate new currentAllocation based on deltaAllocation\\n  /// @dev Also calculate the performance fee here. This is an amount, based on the current TVL (before the rebalance),\\n  /// @dev the performanceFee and difference between the current exchangeRate and the exchangeRate of the last rebalance of the vault.\\n  /// @param _newTotalUnderlying this will be the new total underlying: Totalunderlying = TotalUnderlyingInProtocols - BalanceVault (in vaultCurrency.decimals())\\n  /// @return uint256[] with amounts to deposit in protocols, the index being the protocol number.\\n  function rebalanceCheckProtocols(\\n    uint256 _latestId,\\n    uint256 _newTotalUnderlying\\n  ) internal returns (uint256[] memory) {\\n    uint256[] memory protocolToDeposit = new uint[](controller.latestProtocolId(vaultNumber));\\n\\n    for (uint i = 0; i < _latestId; i++) {\\n      bool isBlacklisted = controller.getProtocolBlacklist(vaultNumber, i);\\n\\n      if (isBlacklisted) continue;\\n      setAllocation(i);\\n\\n      uint256 amountToProtocol = calcAmountToProtocol(_newTotalUnderlying, i);\\n      uint256 currentBalance = balanceUnderlying(i);\\n\\n      int256 amountToDeposit = int(amountToProtocol) - int(currentBalance);\\n      uint256 amountToWithdraw = amountToDeposit < 0 ? currentBalance - amountToProtocol : 0;\\n\\n      if (amountToDeposit > marginScale) {\\n        protocolToDeposit[i] = uint256(amountToDeposit);\\n      }\\n      if (amountToWithdraw > uint(marginScale) || currentAllocations[i] == 0) {\\n        withdrawFromProtocol(i, amountToWithdraw);\\n      }\\n    }\\n\\n    return protocolToDeposit;\\n  }\\n\\n  /// @notice Calculates the amount to deposit or withdraw to protocol during a vault rebalance\\n  /// @param _totalAmount TotalAmount = TotalAmountInProtocols - BalanceVault\\n  /// @param _protocol Protocol id number\\n  /// @return amountToProtocol amount to deposit or withdraw to protocol (in vaultCurency.decimals())\\n  function calcAmountToProtocol(\\n    uint256 _totalAmount,\\n    uint256 _protocol\\n  ) internal view returns (uint256 amountToProtocol) {\\n    if (totalAllocatedTokens == 0) amountToProtocol = 0;\\n    else amountToProtocol = (_totalAmount * currentAllocations[_protocol]) / totalAllocatedTokens;\\n  }\\n\\n  /// @notice Harvest extra tokens from underlying protocols\\n  /// @dev Loops over protocols in ETF and check if they are claimable in controller contract\\n  function storePriceAndRewardsLoop(uint256 _latestId) internal {\\n    for (uint i = 0; i < _latestId; i++) {\\n      storePriceAndRewards(i);\\n    }\\n  }\\n\\n  /// @notice Stores the historical price and the reward per rounded locked token, ignoring decimals.\\n  /// @dev formula yield protocol i at time t: y(it) = (P(it) - P(it-1)) / P(it-1).\\n  /// @dev formula rewardPerLockedToken for protocol i at time t: r(it) = y(it) * TVL(t) * perfFee(t) / totalLockedTokens(t)\\n  /// @dev later, when the total rewards are calculated for a game player we multiply this (r(it)) by the locked tokens on protocol i at time t\\n  /// @param _protocolId Protocol id number.\\n  function storePriceAndRewards(uint256 _protocolId) internal {\\n    uint period = rebalancingPeriod;\\n    uint256 currentPrice = price(_protocolId); // in protocol.LPToken.decimals()\\n    if (controller.getProtocolBlacklist(vaultNumber, _protocolId)) {\\n      rewardPerLockedToken[period][_protocolId] = -1;\\n      lastPrices[_protocolId] = currentPrice;\\n      return;\\n    }\\n\\n    if (lastPrices[_protocolId] == 0) {\\n      lastPrices[_protocolId] = currentPrice;\\n      return;\\n    }\\n\\n    int256 priceDiff = int256(currentPrice) - int256(lastPrices[_protocolId]);\\n    int256 nominator = (int256(savedTotalUnderlying * performanceFee * BASE_SCALE) * priceDiff);\\n    int256 totalAllocatedTokensRounded = int256(totalAllocatedTokens) / int(BASE_SCALE);\\n    int256 denominator = totalAllocatedTokensRounded * int256(lastPrices[_protocolId]) * 100; // * 100 cause perfFee is in percentages\\n\\n    if (totalAllocatedTokensRounded == 0) {\\n      rewardPerLockedToken[period][_protocolId] = 0;\\n    } else {\\n      rewardPerLockedToken[period][_protocolId] = nominator / denominator;\\n    }\\n\\n    lastPrices[_protocolId] = currentPrice;\\n    emit LastPrices(_protocolId, rebalancingPeriod, currentPrice);\\n  }\\n\\n  /// @notice Creates array out of the rewardsPerLockedToken mapping to send to the game\\n  /// @return rewards Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\\n  function rewardsToArray() internal view returns (int256[] memory rewards) {\\n    uint256 latestId = controller.latestProtocolId(vaultNumber);\\n\\n    rewards = new int[](latestId);\\n    for (uint256 i = 0; i < latestId; i++) {\\n      rewards[i] = rewardPerLockedToken[rebalancingPeriod][i];\\n    }\\n  }\\n\\n  /// @notice Helper function to set allocations\\n  /// @param _i Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  function setAllocation(uint256 _i) internal {\\n    int256 newCurrentAllocation = int(currentAllocations[_i]) + deltaAllocations[_i];\\n    require(newCurrentAllocation >= 0);\\n\\n    currentAllocations[_i] = uint(newCurrentAllocation);\\n    deltaAllocations[_i] = 0;\\n  }\\n\\n  /// @notice Helper function so the rebalance will execute all withdrawals first\\n  /// @dev Executes and resets all deposits set in mapping(protocolToDeposit) by rebalanceETF\\n  /// @param protocolToDeposit array with amounts to deposit in protocols, the index being the protocol number.\\n  function executeDeposits(uint256[] memory protocolToDeposit) internal {\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    for (uint i = 0; i < latestID; i++) {\\n      uint256 amount = protocolToDeposit[i];\\n      if (amount == 0) continue;\\n      depositInProtocol(i, amount);\\n    }\\n  }\\n\\n  /// @notice Deposit amount to underlying protocol\\n  /// @dev Deposits VaultCurrency in Protocol e.g USDC\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @param _amount in VaultCurrency to deposit\\n  function depositInProtocol(uint256 _protocolNum, uint256 _amount) internal {\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n\\n    if (getVaultBalance() < _amount) _amount = getVaultBalance();\\n\\n    IERC20Metadata(protocol.underlying).safeIncreaseAllowance(protocol.provider, _amount);\\n    IProvider(protocol.provider).deposit(_amount, protocol.LPToken, protocol.underlying);\\n    emit DepositInProtocol(_protocolNum, _amount);\\n  }\\n\\n  /// @notice Withdraw amount from underlying protocol\\n  /// @dev shares = amount / PricePerShare\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @param _amount in VaultCurrency to withdraw\\n  function withdrawFromProtocol(\\n    uint256 _protocolNum,\\n    uint256 _amount\\n  ) internal returns (uint256 amountReceived) {\\n    if (_amount <= 0) return 0;\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n    require(protocol.underlying == address(vaultCurrency), \\\"Provider underlying mismatch\\\");\\n\\n    uint256 shares = IProvider(protocol.provider).calcShares(_amount, protocol.LPToken);\\n    uint256 balance = IProvider(protocol.provider).balance(address(this), protocol.LPToken);\\n\\n    if (shares == 0) return 0;\\n    if (balance < shares) shares = balance;\\n\\n    IERC20Metadata(protocol.LPToken).safeIncreaseAllowance(protocol.provider, shares);\\n    amountReceived = IProvider(protocol.provider).withdraw(\\n      shares,\\n      protocol.LPToken,\\n      protocol.underlying\\n    );\\n    emit WithdrawFromProtocol(_protocolNum, amountReceived);\\n  }\\n\\n  /// @notice Set total balance in VaultCurrency in all underlying protocols\\n  function setTotalUnderlying() public {\\n    uint totalUnderlying;\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    for (uint i = 0; i < latestID; i++) {\\n      if (currentAllocations[i] == 0) continue;\\n      totalUnderlying += balanceUnderlying(i);\\n    }\\n    savedTotalUnderlying = totalUnderlying;\\n  }\\n\\n  /// @notice Get balance in VaultCurrency in underlying protocol\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @return Balance in VaultCurrency e.g USDC\\n  function balanceUnderlying(uint256 _protocolNum) public view returns (uint256) {\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n    uint256 underlyingBalance = IProvider(protocol.provider).balanceUnderlying(\\n      address(this),\\n      protocol.LPToken\\n    );\\n    return underlyingBalance;\\n  }\\n\\n  /// @notice Calculates how many shares are equal to the amount in vault currency\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @param _amount Amount in underyling token e.g USDC\\n  /// @return number of shares i.e LP tokens\\n  function calcShares(uint256 _protocolNum, uint256 _amount) public view returns (uint256) {\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n    uint256 shares = IProvider(protocol.provider).calcShares(_amount, protocol.LPToken);\\n\\n    return shares;\\n  }\\n\\n  /// @notice Get price for underlying protocol\\n  /// @param _protocolNum Protocol number linked to an underlying protocol e.g compound_usdc_01\\n  /// @return protocolPrice Price per lp token\\n  function price(uint256 _protocolNum) public view returns (uint256) {\\n    IController.ProtocolInfoS memory protocol = controller.getProtocolInfo(\\n      vaultNumber,\\n      _protocolNum\\n    );\\n    return IProvider(protocol.provider).exchangeRate(protocol.LPToken);\\n  }\\n\\n  /// @notice Set the delta allocated tokens by game contract\\n  /// @dev Allocation can be negative\\n  /// @param _protocolNum Protocol number linked to an underlying vault e.g compound_usdc_01\\n  /// @param _allocation Delta allocation in tokens\\n  function setDeltaAllocationsInt(uint256 _protocolNum, int256 _allocation) internal {\\n    require(!controller.getProtocolBlacklist(vaultNumber, _protocolNum), \\\"Protocol on blacklist\\\");\\n    deltaAllocations[_protocolNum] += _allocation;\\n    deltaAllocatedTokens += _allocation;\\n  }\\n\\n  /// @notice Claims and swaps tokens from the underlying protocol\\n  /// @dev Claims governance tokens from the underlying protocol if claimable, and swaps them to the vault's underlying token\\n  /// @param _protocolNum The protocol ID for which to claim and swap tokens\\n  function claimAndSwapTokens(\\n    uint256 _protocolNum,\\n    uint256 _minAmount,\\n    uint256 _deadline\\n  ) public onlyGuardian {\\n    bool claim = controller.claim(vaultNumber, _protocolNum);\\n    if (claim) {\\n      address govToken = controller.getGovToken(vaultNumber, _protocolNum);\\n      uint256 tokenBalance = IERC20Metadata(govToken).balanceOf(address(this));\\n      Swap.swapTokensMulti(\\n        Swap.SwapInOut(\\n          tokenBalance,\\n          _deadline,\\n          _minAmount,\\n          nativeToken,\\n          govToken,\\n          address(vaultCurrency)\\n        ),\\n        controller.getUniswapParams(),\\n        false\\n      );\\n    }\\n  }\\n\\n  function getVaultBalance() public view returns (uint256) {\\n    return vaultCurrency.balanceOf(address(this));\\n  }\\n\\n  /// @notice Checks if a rebalance is needed based on the set interval\\n  /// @return bool True of rebalance is needed, false if not\\n  function rebalanceNeeded() public view returns (bool) {\\n    return (block.timestamp - lastTimeStamp) > rebalanceInterval || msg.sender == guardian;\\n  }\\n\\n  /// @notice Getter for dao address\\n  function getDao() public view returns (address) {\\n    return dao;\\n  }\\n\\n  /// @notice Getter for guardian address\\n  function getGuardian() public view returns (address) {\\n    return guardian;\\n  }\\n\\n  /// @notice Function to calculate the exchangeRate (decimals = vaultCurrency decimals)\\n  /// @param totalUnderlying Total underlying in vaultCurrency\\n  /// @return price Exchange rate\\n  function calculateExchangeRate(uint256 totalUnderlying) public view returns (uint256) {\\n    uint256 price;\\n    price = totalSupply() == 0\\n      ? 10 ** vaultCurrency.decimals()\\n      : (totalUnderlying * (10 ** decimals())) / totalSupply();\\n    return price;\\n  }\\n\\n  /// @notice function that enables direct deposits into the vault\\n  /// @dev this can only be done if the funds from the user will be deposited directly into the underlying protocols. Hence, this is very gas intensive\\n  /// @param _amount Amount to deposit in vaultCurrency\\n  /// @return shares Amount of shares minted in LPtoken.decimals()\\n  function deposit(uint256 _amount) public returns (uint256) {\\n    require(_amount >= minimumDeposit, \\\"Minimum deposit\\\");\\n\\n    if (training) {\\n      require(whitelist[msg.sender]);\\n    }\\n\\n    uint256 balanceBefore = getVaultBalance();\\n    vaultCurrency.safeTransferFrom(msg.sender, address(this), _amount);\\n    uint256 balanceAfter = getVaultBalance();\\n    uint256 amount = balanceAfter - balanceBefore;\\n\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    uint256 totalUnderlying = 0;\\n    for (uint i = 0; i < latestID; i++) {\\n      bool isBlacklisted = controller.getProtocolBlacklist(vaultNumber, i);\\n\\n      if (isBlacklisted) continue;\\n\\n      uint256 amountToProtocol = calcAmountToProtocol(amount, i);\\n      totalUnderlying += balanceUnderlying(i);\\n      depositInProtocol(i, amountToProtocol);\\n    }\\n\\n    exchangeRate = calculateExchangeRate(totalUnderlying);\\n\\n    uint256 shares = (amount * (10 ** decimals())) / exchangeRate;\\n    _mint(msg.sender, shares);\\n    emit Deposit(msg.sender, amount, shares);\\n    return shares;\\n  }\\n\\n  /// @notice Enables a user to make a deposit into the Vault.\\n  /// @dev This function allows a user to deposit an amount greater than or equal to the minimum deposit,\\n  /// transfers the deposited amount from the user to the Vault, and records the deposit request.\\n  /// If the training mode is active, the function checks if the user is whitelisted and the deposit doesn't exceed the max training deposit.\\n  /// @param _amount The amount that the user wants to deposit in vaultCurrency.\\n  function depositRequest(uint256 _amount) external nonReentrant {\\n    UserInfo storage user = userInfo[msg.sender];\\n    require(_amount >= minimumDeposit, \\\"Minimum deposit\\\");\\n\\n    if (training) {\\n      require(whitelist[msg.sender]);\\n      require(user.depositRequest + _amount <= maxTrainingDeposit);\\n    }\\n\\n    uint256 balanceBefore = getVaultBalance();\\n    vaultCurrency.safeTransferFrom(msg.sender, address(this), _amount);\\n    uint256 balanceAfter = getVaultBalance();\\n\\n    uint256 amount = balanceAfter - balanceBefore;\\n    user.depositRequest += amount;\\n    user.depositRequestPeriod = rebalancingPeriod;\\n    totalDepositRequests += amount;\\n  }\\n\\n  /// @notice Redeems the pending deposit requests for the calling user.\\n  /// @dev This function allows a user to redeem their deposit requests and receive shares.\\n  /// This can only be done if a deposit request has been made and the current rebalancing period is greater than\\n  /// the period in which the deposit request was made.\\n  /// The function will mint new shares in exchange for the deposit and update the user's deposit request status.\\n  /// @return shares The number of shares minted in exchange for the deposit.\\n  function redeemDeposit() external nonReentrant returns (uint256 shares) {\\n    UserInfo storage user = userInfo[msg.sender];\\n    uint256 depositRequest = user.depositRequest;\\n\\n    require(rebalancingPeriod > user.depositRequestPeriod, noFundsError);\\n    shares = (depositRequest * (10 ** decimals())) / exchangeRate;\\n\\n    deleteDepositRequest(user);\\n\\n    _mint(msg.sender, shares);\\n    emit Deposit(msg.sender, depositRequest, shares);\\n  }\\n\\n  /// @notice Cancel the deposit request for the caller.\\n  function cancelDepositRequest() external nonReentrant {\\n    UserInfo storage user = userInfo[msg.sender];\\n    uint256 depositRequest = user.depositRequest;\\n    deleteDepositRequest(user);\\n    vaultCurrency.safeTransfer(msg.sender, depositRequest);\\n  }\\n\\n  /// @dev Deletes the user's deposit request and updates the total deposit requests.\\n  /// @param user The user whose deposit request is being deleted.\\n  function deleteDepositRequest(UserInfo storage user) internal {\\n    require(user.depositRequest > 0, allowanceError);\\n    totalDepositRequests -= user.depositRequest;\\n    delete user.depositRequest;\\n    delete user.depositRequestPeriod;\\n  }\\n\\n  /// @notice function that enables direct withdrawals from the vault\\n  /// @dev this can only be done if the funds from the user will be withdrawed directly from the underlying protocols. Hence, this is very gas intensive\\n  /// @param _amount Amount to withdraw in vaultCurrency\\n  /// @return shares Amount of shares the user needs to supply in LPtoken decimals()\\n  function withdraw(uint256 _amount) public returns (uint256) {\\n    uint256 latestID = controller.latestProtocolId(vaultNumber);\\n    uint256 totalUnderlying = 0;\\n    uint256 vaultBalance = getVaultBalance();\\n    uint256 amountFromProtocol;\\n    uint256 totalWithdrawal;\\n    for (uint i = 0; i < latestID; i++) {\\n      bool isBlacklisted = controller.getProtocolBlacklist(vaultNumber, i);\\n\\n      if (isBlacklisted) continue;\\n\\n      totalUnderlying += balanceUnderlying(i);\\n\\n      if (vaultBalance < _amount) {\\n        amountFromProtocol = calcAmountToProtocol(_amount - vaultBalance, i);\\n        totalWithdrawal += withdrawFromProtocol(i, amountFromProtocol);\\n      } else {\\n        totalWithdrawal = _amount;\\n      }\\n    }\\n\\n    exchangeRate = calculateExchangeRate(totalUnderlying);\\n\\n    uint256 shares = (_amount * (10 ** decimals())) / exchangeRate;\\n    uint256 balance = balanceOf(msg.sender);\\n    shares = checkForBalance(shares, balance, decimals());\\n    _burn(msg.sender, shares);\\n\\n    transferFunds(msg.sender, totalWithdrawal);\\n    emit Withdraw(msg.sender, totalWithdrawal, shares);\\n    return shares;\\n  }\\n\\n  /// @notice Withdrawal request for when the vault doesnt have enough funds available\\n  /// @dev Will give the user allowance for his funds and pulls the extra funds at the next rebalance\\n  /// @param _amount Amount to withdraw in vaultCurrency\\n  /// @return shares Amount of shares the user needs to supply in LPtoken decimals()\\n  function withdrawalRequest(uint256 _amount) external nonReentrant returns (uint256 shares) {\\n    UserInfo storage user = userInfo[msg.sender];\\n    require(rebalancingPeriod != 0 && user.withdrawalRequestPeriod == 0, \\\"Already a request\\\");\\n\\n    shares = (_amount * (10 ** decimals())) / exchangeRate;\\n    uint256 balance = balanceOf(msg.sender);\\n    shares = checkForBalance(shares, balance, decimals());\\n    _burn(msg.sender, shares);\\n\\n    user.withdrawalAllowance = _amount;\\n    user.withdrawalRequestPeriod = rebalancingPeriod;\\n    totalWithdrawalRequests += _amount;\\n    emit Withdraw(msg.sender, _amount, shares);\\n  }\\n\\n  /// @notice Withdraw the allowance the user requested on the last rebalancing period\\n  /// @dev Will send the user funds and reset the allowance\\n  /// @return value Amount received by seller in vaultCurrency, in vaultcurrency.decimals()\\n  function withdrawAllowance() external nonReentrant returns (uint256 value) {\\n    UserInfo storage user = userInfo[msg.sender];\\n    require(user.withdrawalAllowance > 0, allowanceError);\\n    require(rebalancingPeriod > user.withdrawalRequestPeriod, noFundsError);\\n\\n    value = user.withdrawalAllowance;\\n    value = IXProvider(xProvider).calculateEstimatedAmount(value);\\n\\n    totalWithdrawalRequests -= user.withdrawalAllowance;\\n    delete user.withdrawalAllowance;\\n    delete user.withdrawalRequestPeriod;\\n\\n    transferFunds(msg.sender, value);\\n  }\\n\\n  /// @notice Substract governance fee from value\\n  /// @param _receiver Receiving adress for the vaultcurrency\\n  /// @param _value Amount received by seller in vaultCurrency\\n  function transferFunds(address _receiver, uint256 _value) internal {\\n    uint256 govFee = (_value * governanceFee) / 10_000;\\n\\n    vaultCurrency.safeTransfer(getDao(), govFee);\\n    vaultCurrency.safeTransfer(_receiver, _value - govFee);\\n  }\\n\\n  /// @notice Function for the game to set a withdrawalRequest for the rewards of the game user\\n  /// @param _value Amount to set a request in vaultCurrency\\n  /// @param _user Address of the user\\n  function redeemRewardsGame(uint256 _value, address _user) external onlyXProvider nonReentrant {\\n    UserInfo storage user = userInfo[_user];\\n    require(user.rewardAllowance == 0, allowanceError);\\n\\n    user.rewardAllowance = _value;\\n    user.rewardRequestPeriod = rebalancingPeriod;\\n    totalWithdrawalRequests += _value;\\n  }\\n\\n  /// @notice Withdraw the reward allowance set by the game using the redeemRewardsGame function\\n  /// @dev Swaps vaultCurrency to Derby tokens, sends the funds to the user, and resets the allowance\\n  /// @return value The amount of reward withdrawn by the user\\n  function withdrawRewards() external nonReentrant returns (uint256 value) {\\n    UserInfo storage user = userInfo[msg.sender];\\n    require(user.rewardAllowance > 0, allowanceError);\\n    require(rebalancingPeriod > user.rewardRequestPeriod, noFundsError);\\n\\n    value = user.rewardAllowance;\\n    totalWithdrawalRequests -= user.rewardAllowance;\\n\\n    delete user.rewardAllowance;\\n    delete user.rewardRequestPeriod;\\n\\n    vaultCurrency.safeTransfer(msg.sender, value);\\n  }\\n\\n  /// @notice Sometimes the balance of a coin is a fraction less then expected due to rounding errors\\n  /// @notice This is to make sure the vault doesnt get stuck\\n  /// @notice Value will be set to the balance\\n  /// @notice When divergence is greater then minScale it will revert\\n  /// @param _value Value the user wants\\n  /// @param _balance Balance of the coin\\n  /// @param _decimals Decimals of the coin and balance\\n  /// @return value Value - divergence\\n  function checkForBalance(\\n    uint256 _value,\\n    uint256 _balance,\\n    uint256 _decimals\\n  ) internal view returns (uint256) {\\n    if (_value > _balance) {\\n      uint256 oldValue = _value;\\n      _value = _balance;\\n      require(oldValue - _value <= (10 ** (_decimals - minScale)), \\\"Max divergence\\\");\\n    }\\n    return _value;\\n  }\\n\\n  /// @notice See receiveProtocolAllocations below\\n  function receiveProtocolAllocations(int256[] memory _deltas) external onlyXProvider {\\n    receiveProtocolAllocationsInt(_deltas);\\n  }\\n\\n  /// @notice Game pushes deltaAllocations to vaults\\n  /// @notice Receives protocol allocation array from the game and settles the allocations\\n  /// @param _deltas Array with delta allocations where the index matches the protocolId\\n  function receiveProtocolAllocationsInt(int256[] memory _deltas) internal {\\n    for (uint i = 0; i < _deltas.length; i++) {\\n      int256 allocation = _deltas[i];\\n      if (allocation == 0) continue;\\n      setDeltaAllocationsInt(i, allocation);\\n    }\\n\\n    deltaAllocationsReceived = true;\\n  }\\n\\n  /// @notice Vaults push rewardsPerLockedToken to game\\n  function sendRewardsToGame() external payable {\\n    require(lastRewardPeriod < rebalancingPeriod, \\\"rewards already sent\\\");\\n\\n    int256[] memory rewards = rewardsToArray();\\n    IXProvider(xProvider).pushRewardsToGame{value: msg.value}(vaultNumber, homeChain, rewards);\\n\\n    lastRewardPeriod = rebalancingPeriod;\\n\\n    emit PushedRewardsToGame(vaultNumber, homeChain, rewards);\\n  }\\n\\n  /// @notice Returns the amount in vaultCurrency the user is able to withdraw\\n  function getWithdrawalAllowance() external view returns (uint256) {\\n    return userInfo[msg.sender].withdrawalAllowance;\\n  }\\n\\n  /// @notice Returns the rewards the user is able to withdraw\\n  function getRewardAllowance() external view returns (uint256) {\\n    return userInfo[msg.sender].rewardAllowance;\\n  }\\n\\n  /// @notice Get the deposit request for a specific user.\\n  /// @return The deposit request of the user in vaultCurrency.\\n  function getDepositRequest() external view returns (uint256) {\\n    return userInfo[msg.sender].depositRequest;\\n  }\\n\\n  /*\\n  Only Dao functions\\n  */\\n\\n  /// @notice Set the performanceFee, the percentage of the yield that goes to the game players.\\n  /// @dev The actual performanceFee could be a bit more or a bit less than the performanceFee set here due to approximations in the game.\\n  /// @param _performanceFee Value at which to set the performanceFee.\\n  function setPerformanceFee(uint256 _performanceFee) external onlyDao {\\n    require(_performanceFee <= 100);\\n    performanceFee = _performanceFee;\\n  }\\n\\n  /// @notice Set the governance address\\n  /// @param _dao New address of the governance / DAO\\n  function setDao(address _dao) external onlyDao {\\n    dao = _dao;\\n  }\\n\\n  /// @notice Setter for guardian address\\n  /// @param _guardian new address of the guardian\\n  function setGuardian(address _guardian) external onlyDao {\\n    guardian = _guardian;\\n  }\\n\\n  /// @notice Setter for controller address\\n  function setController(address _controller) external onlyDao {\\n    controller = IController(_controller);\\n  }\\n\\n  /// @notice Setter for xProvider address\\n  /// @param _xProvider new address of xProvider on this chain\\n  function setHomeXProvider(address _xProvider) external onlyDao {\\n    xProvider = _xProvider;\\n  }\\n\\n  /// @notice Setter for derby token address\\n  /// @param _token New address of the derby token\\n  function setDaoToken(address _token) external onlyDao {\\n    derbyToken = _token;\\n  }\\n\\n  /// @notice Setter for maximum divergence a user can get during a withdraw\\n  /// @param _minScale New maximum divergence in vaultCurrency\\n  function setminScale(uint256 _minScale) external onlyDao {\\n    minScale = _minScale;\\n  }\\n\\n  /*\\n  Only Guardian functions\\n  */\\n\\n  /// @notice Set minimum interval for the rebalance function\\n  /// @param _timestampInternal UNIX timestamp\\n  function setRebalanceInterval(uint256 _timestampInternal) external onlyGuardian {\\n    rebalanceInterval = _timestampInternal;\\n  }\\n\\n  /// @notice The DAO should be able to blacklist protocols, the funds should be sent to the vault.\\n  /// @param _protocolNum Protocol number linked to an underlying vault e.g compound_usdc_01\\n  function blacklistProtocol(uint256 _protocolNum) external onlyGuardian {\\n    totalAllocatedTokens -= currentAllocations[_protocolNum];\\n    currentAllocations[_protocolNum] = 0;\\n\\n    controller.setProtocolBlacklist(vaultNumber, _protocolNum);\\n  }\\n\\n  /// @notice Withdraws the funds from a blacklisted protocol and updates the savedTotalUnderlying.\\n  /// @dev This function should only be called after a protocol has been blacklisted.\\n  /// @param _protocolNum The protocol number from which to withdraw the funds.\\n  function withdrawFromBlacklistedProtocol(\\n    uint256 _protocolNum,\\n    uint256 _minAmount,\\n    uint256 _deadline\\n  ) external onlyGuardian {\\n    bool isBlacklisted = controller.getProtocolBlacklist(vaultNumber, _protocolNum);\\n    require(isBlacklisted, \\\"!Blacklisted\\\");\\n\\n    claimAndSwapTokens(_protocolNum, _minAmount, _deadline);\\n\\n    uint256 balanceBefore = balanceUnderlying(_protocolNum);\\n    withdrawFromProtocol(_protocolNum, balanceBefore);\\n    uint256 balanceAfter = balanceUnderlying(_protocolNum);\\n    uint256 balanceReceived = balanceBefore - balanceAfter;\\n\\n    savedTotalUnderlying = savedTotalUnderlying >= balanceReceived\\n      ? savedTotalUnderlying - balanceReceived\\n      : 0;\\n  }\\n\\n  /// @notice Set the marginScale, the threshold used for deposits and withdrawals.\\n  /// @notice If the threshold is not met the deposit/ withdrawal is not executed.\\n  /// @dev Take into account the scale of the underlying.\\n  /// @param _marginScale Value at which to set the marginScale.\\n  function setMarginScale(int256 _marginScale) external onlyGuardian {\\n    marginScale = _marginScale;\\n  }\\n\\n  /// @notice Set the liquidityPerc, the amount of liquidity which should be held in the vault after rebalancing.\\n  /// @dev The actual liquidityPerc could be a bit more or a bit less than the liquidityPerc set here.\\n  /// @dev This is because some deposits or withdrawals might not execute because they don't meet the marginScale.\\n  /// @param _liquidityPerc Value at which to set the liquidityPerc.\\n  function setLiquidityPerc(uint256 _liquidityPerc) external onlyGuardian {\\n    require(_liquidityPerc <= 100);\\n    liquidityPerc = _liquidityPerc;\\n  }\\n\\n  /// @notice Guardian function\\n  function receiveProtocolAllocationsGuard(int256[] memory _deltas) external onlyGuardian {\\n    receiveProtocolAllocationsInt(_deltas);\\n  }\\n\\n  /// @notice Setter for new homeChain Id\\n  function setHomeChain(uint32 _homeChain) external onlyGuardian {\\n    homeChain = _homeChain;\\n  }\\n\\n  /// @notice Setter for governance fee\\n  /// @param _fee Fee in basis points\\n  function setGovernanceFee(uint16 _fee) external onlyGuardian {\\n    governanceFee = _fee;\\n  }\\n\\n  /// @notice Setter to control the training state in de deposit function\\n  function setTraining(bool _state) external onlyGuardian {\\n    training = _state;\\n  }\\n\\n  /// @notice Setter for maximum amount to be able to deposit in training state\\n  function setTrainingDeposit(uint256 _maxDeposit) external onlyGuardian {\\n    maxTrainingDeposit = _maxDeposit;\\n  }\\n\\n  /// @notice Setter to add an address to the whitelist\\n  function addToWhitelist(address _address) external onlyGuardian {\\n    whitelist[_address] = true;\\n  }\\n\\n  /// @dev Sets the minimum deposit amount allowed.\\n  /// @param _newMinimumDeposit The new minimum deposit amount to be set.\\n  function setMinimumDeposit(uint256 _newMinimumDeposit) external onlyGuardian {\\n    minimumDeposit = _newMinimumDeposit;\\n  }\\n\\n  /// @notice callback to receive Ether from unwrapping WETH\\n  receive() external payable {\\n    require(msg.sender == nativeToken, \\\"Not WETH\\\");\\n  }\\n}\\n\",\"keccak256\":\"0xfcfe8ce1aa5ce22b9c9badfb54dd80c67f479043b53adb6b1f76abe10e18ef34\",\"license\":\"MIT\"},\"contracts/VaultToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/ERC20.sol\\\";\\n\\ncontract VaultToken is ERC20 {\\n  uint8 private decimals_;\\n\\n  constructor(\\n    string memory _name,\\n    string memory _symbol,\\n    uint8 _decimals\\n  ) ERC20(_name, _symbol) {\\n    decimals_ = _decimals;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    return decimals_;\\n  }\\n}\\n\",\"keccak256\":\"0xa6f5cd7e4989e080d4fc5e68761e42174e17bf9cc18119af5dfdf3ac2a97985b\",\"license\":\"MIT\"},\"contracts/libraries/Swap.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\r\\n// Derby Finance - 2022\\r\\npragma solidity ^0.8.11;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/IController.sol\\\";\\r\\n\\r\\nimport \\\"../Interfaces/ExternalInterfaces/ISwapRouter.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IWETH.sol\\\";\\r\\nimport \\\"../Interfaces/ExternalInterfaces/IQuoter.sol\\\";\\r\\n\\r\\nlibrary Swap {\\r\\n  using SafeERC20 for IERC20;\\r\\n\\r\\n  struct SwapInOut {\\r\\n    uint256 amount;\\r\\n    uint256 deadline;\\r\\n    uint256 amountOutMin;\\r\\n    address nativeToken;\\r\\n    address tokenIn;\\r\\n    address tokenOut;\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswap Address of uniswapRouter, uniswapQuoter and poolfee\\r\\n  /// @return Amountout Number of tokens received\\r\\n  function swapTokensMulti(\\r\\n    SwapInOut memory _swap,\\r\\n    IController.UniswapParams memory _uniswap,\\r\\n    bool _rewardSwap\\r\\n  ) public returns (uint256) {\\r\\n    IERC20(_swap.tokenIn).safeIncreaseAllowance(_uniswap.router, _swap.amount);\\r\\n\\r\\n    uint256 amountOutMinimum = IQuoter(_uniswap.quoter).quoteExactInput(\\r\\n      abi.encodePacked(\\r\\n        _swap.tokenIn,\\r\\n        _uniswap.poolFee,\\r\\n        _swap.nativeToken,\\r\\n        _uniswap.poolFee,\\r\\n        _swap.tokenOut\\r\\n      ),\\r\\n      _swap.amount\\r\\n    );\\r\\n\\r\\n    uint256 balanceBefore = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n    if (_rewardSwap && balanceBefore >= amountOutMinimum && amountOutMinimum >= _swap.amountOutMin)\\r\\n      return amountOutMinimum;\\r\\n\\r\\n    ISwapRouter.ExactInputParams memory params = ISwapRouter.ExactInputParams({\\r\\n      path: abi.encodePacked(\\r\\n        _swap.tokenIn,\\r\\n        _uniswap.poolFee,\\r\\n        _swap.nativeToken,\\r\\n        _uniswap.poolFee,\\r\\n        _swap.tokenOut\\r\\n      ),\\r\\n      recipient: address(this),\\r\\n      deadline: _swap.deadline,\\r\\n      amountIn: _swap.amount,\\r\\n      amountOutMinimum: _swap.amountOutMin\\r\\n    });\\r\\n\\r\\n    ISwapRouter(_uniswap.router).exactInput(params);\\r\\n    uint256 balanceAfter = IERC20(_swap.tokenOut).balanceOf(address(this));\\r\\n    require(balanceAfter - balanceBefore >= _swap.amountOutMin, \\\"Over/underflow\\\");\\r\\n\\r\\n    return balanceAfter - balanceBefore;\\r\\n  }\\r\\n\\r\\n  /// @notice Swap tokens on Uniswap Multi route\\r\\n  /// @param _swap Number of tokens to sell, token to sell, token to receive\\r\\n  /// @param _uniswapQuoter Address of uniswapQuoter\\r\\n  /// @param _poolFee Current uniswap pool fee set in router e.g 3000\\r\\n  /// @return amountOutMin minimum amount out of tokens to receive when executing swap\\r\\n  function amountOutMultiSwap(\\r\\n    SwapInOut memory _swap,\\r\\n    address _uniswapQuoter,\\r\\n    uint24 _poolFee\\r\\n  ) public returns (uint256) {\\r\\n    return\\r\\n      IQuoter(_uniswapQuoter).quoteExactInput(\\r\\n        abi.encodePacked(_swap.tokenIn, _poolFee, _swap.nativeToken, _poolFee, _swap.tokenOut),\\r\\n        _swap.amount\\r\\n      );\\r\\n  }\\r\\n}\\r\\n\",\"keccak256\":\"0x1359a63bdc3971b9304b5350a1afa04c33558a8fab9c446347b311e1087207a0\",\"license\":\"MIT\"},\"hardhat/console.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >= 0.4.22 <0.9.0;\\n\\nlibrary console {\\n\\taddress constant CONSOLE_ADDRESS = address(0x000000000000000000636F6e736F6c652e6c6f67);\\n\\n\\tfunction _sendLogPayload(bytes memory payload) private view {\\n\\t\\tuint256 payloadLength = payload.length;\\n\\t\\taddress consoleAddress = CONSOLE_ADDRESS;\\n\\t\\tassembly {\\n\\t\\t\\tlet payloadStart := add(payload, 32)\\n\\t\\t\\tlet r := staticcall(gas(), consoleAddress, payloadStart, payloadLength, 0, 0)\\n\\t\\t}\\n\\t}\\n\\n\\tfunction log() internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log()\\\"));\\n\\t}\\n\\n\\tfunction logInt(int256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(int256)\\\", p0));\\n\\t}\\n\\n\\tfunction logUint(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction logString(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction logBool(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction logAddress(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes(bytes memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes1(bytes1 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes1)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes2(bytes2 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes2)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes3(bytes3 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes3)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes4(bytes4 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes4)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes5(bytes5 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes5)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes6(bytes6 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes6)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes7(bytes7 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes7)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes8(bytes8 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes8)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes9(bytes9 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes9)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes10(bytes10 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes10)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes11(bytes11 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes11)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes12(bytes12 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes12)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes13(bytes13 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes13)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes14(bytes14 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes14)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes15(bytes15 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes15)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes16(bytes16 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes16)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes17(bytes17 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes17)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes18(bytes18 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes18)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes19(bytes19 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes19)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes20(bytes20 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes20)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes21(bytes21 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes21)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes22(bytes22 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes22)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes23(bytes23 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes23)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes24(bytes24 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes24)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes25(bytes25 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes25)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes26(bytes26 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes26)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes27(bytes27 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes27)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes28(bytes28 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes28)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes29(bytes29 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes29)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes30(bytes30 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes30)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes31(bytes31 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes31)\\\", p0));\\n\\t}\\n\\n\\tfunction logBytes32(bytes32 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bytes32)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256)\\\", p0));\\n\\t}\\n\\n\\tfunction log(string memory p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string)\\\", p0));\\n\\t}\\n\\n\\tfunction log(bool p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool)\\\", p0));\\n\\t}\\n\\n\\tfunction log(address p0) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address)\\\", p0));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(address p0, address p1) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address)\\\", p0, p1));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address)\\\", p0, p1, p2));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(uint256 p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(uint256,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(string memory p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(string,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(bool p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(bool,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, uint256 p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,uint256,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, string memory p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,string,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, bool p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,bool,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, uint256 p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,uint256,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, string memory p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,string,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, bool p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,bool,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, uint256 p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,uint256)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, string memory p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,string)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, bool p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,bool)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n\\tfunction log(address p0, address p1, address p2, address p3) internal view {\\n\\t\\t_sendLogPayload(abi.encodeWithSignature(\\\"log(address,address,address,address)\\\", p0, p1, p2, p3));\\n\\t}\\n\\n}\\n\",\"keccak256\":\"0x60b0215121bf25612a6739fb2f1ec35f31ee82e4a8216c032c8243d904ab3aa9\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x60806040526004361061037c5760003560e01c806306fdde03146103f0578063095ea7b31461041b5780630c195d991461044b5780630ccb7d5b1461046f5780630e08891a1461049c5780630ea90a12146104b25780630ee1265f146104c85780630f310a6a146104e857806311e8c2291461050a57806316d1d9161461052a57806318160ddd146105405780631a946732146105555780631f986445146105755780632189651f1461058b57806321ae838e146105ab57806323b872dd146105b357806324b67970146105d357806326a49e37146105f35780632d84010f146106135780632e1a7d4d146106295780632e956470146106495780632faf3a731461065e578063303ac0f114610674578063313ce567146106945780633245dea5146106b657806339509351146106e35780633ba0b9a9146107035780633f3b3b271461071957806343ab90a81461072f5780635209cb9814610744578063533b03bb14610764578063570f1f9d146107855780635afbf5ba146107a55780635b7dcaed146107c55780635e39d91f146107e557806362ae07651461081d578063636bfbab1461083d5780636610e08e146108535780636637b8821461086857806370897b231461088857806370a08231146108a85780637468a52b146108c8578063799a3f88146109015780637d7c2a1c146109175780638645d5821461092c578063877887821461094d57806389cc88db146109635780638a0dac4a146109795780638a5ff078146109995780638b537ef7146109af5780638e9bf9d2146109cf57806392eefe9b146109ef57806395d89b4114610a0f5780639c7ec7a614610a24578063a104b99514610a44578063a457c2d714610a64578063a75b87d214610a84578063a9059cbb14610aa2578063b6b55f2514610ac2578063b70811bc14610ae2578063c0ee01bc14610af7578063c3fe3e2814610b0c578063c7b8981c14610b2c578063ce64aabb14610b41578063d0284b9914610b57578063d19e8d2514610b77578063d97bb59414610b97578063dd62ed3e14610bb7578063e1758bd814610bd7578063e43252d714610c0b578063e53ae15614610c2b578063e672025414610c50578063e706790914610c65578063e78ec42e14610c85578063eaf22ccb14610ca5578063ed12e8ef14610cc5578063f0b58bfd14610cda578063fb0a8cd014610cff578063fdba466e14610d1f57600080fd5b366103eb57336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103e95760405162461bcd60e51b815260206004820152600860248201526709cdee840ae8aa8960c31b60448201526064015b60405180910390fd5b005b600080fd5b3480156103fc57600080fd5b50610405610d3f565b60405161041291906142f7565b60405180910390f35b34801561042757600080fd5b5061043b61043636600461433f565b610dd1565b6040519015158152602001610412565b34801561045757600080fd5b5061046160165481565b604051908152602001610412565b34801561047b57600080fd5b5060185461048f906001600160a01b031681565b604051610412919061436b565b3480156104a857600080fd5b50610461600e5481565b3480156104be57600080fd5b50610461601b5481565b3480156104d457600080fd5b506104616104e336600461437f565b610deb565b3480156104f457600080fd5b5033600090815260286020526040902054610461565b34801561051657600080fd5b506103e961052536600461437f565b610eb2565b34801561053657600080fd5b5061046160115481565b34801561054c57600080fd5b50600354610461565b34801561056157600080fd5b506103e961057036600461437f565b610f7e565b34801561058157600080fd5b5061046160105481565b34801561059757600080fd5b506103e96105a6366004614406565b610fad565b6103e9610fe3565b3480156105bf57600080fd5b5061043b6105ce3660046144ab565b611106565b3480156105df57600080fd5b506103e96105ee3660046144ec565b61112a565b3480156105ff57600080fd5b5061046161060e36600461437f565b611176565b34801561061f57600080fd5b50610461600d5481565b34801561063557600080fd5b5061046161064436600461437f565b611265565b34801561065557600080fd5b5061043b611496565b34801561066a57600080fd5b50610461601c5481565b34801561068057600080fd5b506103e961068f366004614509565b6114c4565b3480156106a057600080fd5b5060065460405160ff9091168152602001610412565b3480156106c257600080fd5b506104616106d136600461437f565b60276020526000908152604090205481565b3480156106ef57600080fd5b5061043b6106fe36600461433f565b6117d0565b34801561070f57600080fd5b50610461600f5481565b34801561072557600080fd5b5061046160125481565b34801561073b57600080fd5b506103e96117f2565b34801561075057600080fd5b5061046161075f36600461437f565b6118c1565b34801561077057600080fd5b50601a5461043b90600160a01b900460ff1681565b34801561079157600080fd5b506103e96107a036600461437f565b6119fb565b3480156107b157600080fd5b506103e96107c0366004614535565b611a2a565b3480156107d157600080fd5b506103e96107e036600461437f565b611a7a565b3480156107f157600080fd5b5061046161080036600461455b565b602660209081526000928352604080842090915290825290205481565b34801561082957600080fd5b5061046161083836600461437f565b611aa9565b34801561084957600080fd5b50610461601d5481565b34801561085f57600080fd5b50610461611ba5565b34801561087457600080fd5b506103e96108833660046144ec565b611c80565b34801561089457600080fd5b506103e96108a336600461437f565b611ccc565b3480156108b457600080fd5b506104616108c33660046144ec565b611d09565b3480156108d457600080fd5b50601a546108ec90600160a81b900463ffffffff1681565b60405163ffffffff9091168152602001610412565b34801561090d57600080fd5b50610461600a5481565b34801561092357600080fd5b506103e9611d24565b34801561093857600080fd5b5060075461043b90600160a01b900460ff1681565b34801561095957600080fd5b50610461600c5481565b34801561096f57600080fd5b5061046160135481565b34801561098557600080fd5b506103e96109943660046144ec565b611f23565b3480156109a557600080fd5b50610461601e5481565b3480156109bb57600080fd5b506103e96109ca366004614509565b611f6f565b3480156109db57600080fd5b506103e96109ea36600461437f565b6120b6565b3480156109fb57600080fd5b506103e9610a0a3660046144ec565b6121de565b348015610a1b57600080fd5b5061040561222a565b348015610a3057600080fd5b506103e9610a3f36600461437f565b612239565b348015610a5057600080fd5b506103e9610a5f36600461437f565b612276565b348015610a7057600080fd5b5061043b610a7f36600461433f565b6122a5565b348015610a9057600080fd5b506009546001600160a01b031661048f565b348015610aae57600080fd5b5061043b610abd36600461433f565b612320565b348015610ace57600080fd5b50610461610add36600461437f565b61232e565b348015610aee57600080fd5b5061048f612588565b348015610b0357600080fd5b50610461612597565b348015610b1857600080fd5b5060195461048f906001600160a01b031681565b348015610b3857600080fd5b506104616126c8565b348015610b4d57600080fd5b50610461600b5481565b348015610b6357600080fd5b506103e9610b7236600461458b565b61279b565b348015610b8357600080fd5b50610461610b9236600461455b565b6127d8565b348015610ba357600080fd5b506103e9610bb23660046145a8565b6128d5565b348015610bc357600080fd5b50610461610bd23660046145d8565b612997565b348015610be357600080fd5b5061048f7f000000000000000000000000000000000000000000000000000000000000000081565b348015610c1757600080fd5b506103e9610c263660046144ec565b6129c2565b348015610c3757600080fd5b5033600090815260286020526040902060040154610461565b348015610c5c57600080fd5b506103e9612a10565b348015610c7157600080fd5b506103e9610c80366004614406565b612a79565b348015610c9157600080fd5b506103e9610ca036600461437f565b612aa3565b348015610cb157600080fd5b506103e9610cc0366004614606565b612ad2565b348015610cd157600080fd5b50610461612b05565b348015610ce657600080fd5b5033600090815260286020526040902060020154610461565b348015610d0b57600080fd5b506103e9610d1a3660046144ec565b612b7c565b348015610d2b57600080fd5b50601a5461048f906001600160a01b031681565b606060048054610d4e9061462a565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7a9061462a565b8015610dc75780601f10610d9c57610100808354040283529160200191610dc7565b820191906000526020600020905b815481529060010190602001808311610daa57829003601f168201915b5050505050905090565b600033610ddf818585612bc8565b60019150505b92915050565b600080610df760035490565b15610e295760035460065460ff16610e1090600a61475f565b610e1a908561476e565b610e2491906147a3565b610eab565b600660019054906101000a90046001600160a01b03166001600160a01b031663313ce5676040518163ffffffff1660e01b8152600401602060405180830381865afa158015610e7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea091906147b7565b610eab90600a61475f565b9392505050565b6009546001600160a01b03163314610edc5760405162461bcd60e51b81526004016103e0906147da565b6000818152602460205260408120546016805491929091610efe908490614801565b909155505060008181526024602052604080822091909155600754600a54915163ca68c24b60e01b81526001600160a01b039091169163ca68c24b91610f4991908590600401614818565b600060405180830381600087803b158015610f6357600080fd5b505af1158015610f77573d6000803e3d6000fd5b5050505050565b6009546001600160a01b03163314610fa85760405162461bcd60e51b81526004016103e0906147da565b602255565b601a546001600160a01b03163314610fd75760405162461bcd60e51b81526004016103e090614826565b610fe081612ced565b50565b600d54601e541061102d5760405162461bcd60e51b81526020600482015260146024820152731c995dd85c991cc8185b1c9958591e481cd95b9d60621b60448201526064016103e0565b6000611037612d5b565b601a54600a54604051632a41830f60e21b81529293506001600160a01b0382169263a9060c3c92349261107e929091600160a81b900463ffffffff1690879060040161484e565b6000604051808303818588803b15801561109757600080fd5b505af11580156110ab573d6000803e3d6000fd5b5050600d54601e555050600a54601a546040517f4e95ed35a6c5dc45a9dd338e0545f8b4f8b335947327934b651398cf8e88b0a193506110fb9291600160a81b900463ffffffff1690859061484e565b60405180910390a150565b600033611114858285612e7b565b61111f858585612eef565b506001949350505050565b6008546001600160a01b031633146111545760405162461bcd60e51b81526004016103e0906148a9565b601a80546001600160a01b0319166001600160a01b0392909216919091179055565b600754600a54604051632830092960e21b815260009283926001600160a01b039091169163a0c024a4916111ae918790600401614818565b606060405180830381865afa1580156111cb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111ef91906148d2565b6020810151815160405163dc3b7c8b60e01b81529293506001600160a01b039091169163dc3b7c8b916112249160040161436b565b602060405180830381865afa158015611241573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610eab9190614926565b600754600a54604051632917823b60e21b815260009283926001600160a01b039091169163a45e08ec9161129f9160040190815260200190565b602060405180830381865afa1580156112bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112e09190614926565b90506000806112ed612b05565b905060008060005b858110156113e657600754600a5460405163d900d1f760e01b81526000926001600160a01b03169163d900d1f79161133291908690600401614818565b602060405180830381865afa15801561134f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611373919061493f565b9050801561138157506113d4565b61138a82611aa9565b611394908761495c565b9550888510156113ce576113b16113ab868b614801565b836130ab565b93506113bd82856130e6565b6113c7908461495c565b92506113d2565b8892505b505b806113de81614974565b9150506112f5565b506113f084610deb565b600f81905560009061140460065460ff1690565b61140f90600a61475f565b611419908a61476e565b61142391906147a3565b9050600061143033611d09565b905061144b828261144360065460ff1690565b60ff166133d5565b9150611457338361344e565b6114613384613587565b600080516020614dbe8339815191523384846040516114829392919061498f565b60405180910390a150979650505050505050565b6000601154601254426114a99190614801565b11806114bf57506009546001600160a01b031633145b905090565b6009546001600160a01b031633146114ee5760405162461bcd60e51b81526004016103e0906147da565b600754600a5460405163c349026360e01b81526000926001600160a01b03169163c34902639161152391908890600401614818565b6020604051808303816000875af1158015611542573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611566919061493f565b905080156117ca57600754600a5460405163054c5b0360e01b81526000926001600160a01b03169163054c5b03916115a391908990600401614818565b602060405180830381865afa1580156115c0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115e491906149b0565b90506000816001600160a01b03166370a08231306040518263ffffffff1660e01b8152600401611614919061436b565b602060405180830381865afa158015611631573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906116559190614926565b905073__$03022e2b4c61b304d810038eacea4b6c0c$__6353d7d4cd6040518060c001604052808481526020018781526020018881526020017f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03168152602001856001600160a01b03168152602001600660019054906101000a90046001600160a01b03166001600160a01b0316815250600760009054906101000a90046001600160a01b03166001600160a01b03166367b4e0676040518163ffffffff1660e01b8152600401606060405180830381865afa158015611741573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176591906149cd565b60006040518463ffffffff1660e01b815260040161178593929190614a1d565b602060405180830381865af41580156117a2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117c69190614926565b5050505b50505050565b600033610ddf8185856117e38383612997565b6117ed919061495c565b612bc8565b600754600a54604051632917823b60e21b815260009283926001600160a01b039091169163a45e08ec9161182c9160040190815260200190565b602060405180830381865afa158015611849573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061186d9190614926565b905060005b818110156118ba57600081815260246020526040902054611892576118a8565b61189b81611aa9565b6118a5908461495c565b92505b806118b281614974565b915050611872565b5050601355565b6000600260005414156118e65760405162461bcd60e51b81526004016103e090614a9b565b60026000908155338152602860205260409020600d541580159061190c57506001810154155b61194c5760405162461bcd60e51b8152602060048201526011602482015270105b1c9958591e4818481c995c5d595cdd607a1b60448201526064016103e0565b600f5460065460ff1661196090600a61475f565b61196a908561476e565b61197491906147a3565b9150600061198133611d09565b9050611994838261144360065460ff1690565b92506119a0338461344e565b838255600d546001830155601480548591906000906119c090849061495c565b9091555050604051600080516020614dbe833981519152906119e79033908790879061498f565b60405180910390a150506001600055919050565b6008546001600160a01b03163314611a255760405162461bcd60e51b81526004016103e0906148a9565b601c55565b6009546001600160a01b03163314611a545760405162461bcd60e51b81526004016103e0906147da565b601a805463ffffffff909216600160a81b0263ffffffff60a81b19909216919091179055565b6009546001600160a01b03163314611aa45760405162461bcd60e51b81526004016103e0906147da565b601155565b600754600a54604051632830092960e21b815260009283926001600160a01b039091169163a0c024a491611ae1918790600401614818565b606060405180830381865afa158015611afe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b2291906148d2565b9050600081602001516001600160a01b0316635cbc09d13084600001516040518363ffffffff1660e01b8152600401611b5c929190614ad2565b602060405180830381865afa158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d9190614926565b949350505050565b600060026000541415611bca5760405162461bcd60e51b81526004016103e090614a9b565b6002600090815533815260286020908152604090912060048101546005820154600d549293919211611c0f5760405162461bcd60e51b81526004016103e09190614aec565b50600f5460065460ff16611c2490600a61475f565b611c2e908361476e565b611c3891906147a3565b9250611c43826135ef565b611c4d3384613644565b600080516020614d7e833981519152338285604051611c6e9392919061498f565b60405180910390a15050600160005590565b6008546001600160a01b03163314611caa5760405162461bcd60e51b81526004016103e0906148a9565b600880546001600160a01b0319166001600160a01b0392909216919091179055565b6008546001600160a01b03163314611cf65760405162461bcd60e51b81526004016103e0906148a9565b6064811115611d0457600080fd5b600c55565b6001600160a01b031660009081526001602052604090205490565b60026000541415611d475760405162461bcd60e51b81526004016103e090614a9b565b6002600055611d54611496565b611d965760405162461bcd60e51b8152602060048201526013602482015272139bc81c9958985b185b98d9481b9959591959606a1b60448201526064016103e0565b600754600160a01b900460ff16611de45760405162461bcd60e51b81526020600482015260126024820152712144656c746120616c6c6f636174696f6e7360701b60448201526064016103e0565b600d8054906000611df483614974565b9091555050600754600a54604051632917823b60e21b815260048101919091526000916001600160a01b03169063a45e08ec90602401602060405180830381865afa158015611e47573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e6b9190614926565b9050611e7681613712565b611e7e6117f2565b6000611e88613738565b9050611e9261378e565b6000611e9e83836137c7565b9050611ea9816139da565b6013829055600f54611eba83610deb565b600f819055811015611ed657611ed2600f5482613aa4565b600f555b42601255600a54600d546040517f0b33d39bbef101ecc4f5ef04e6d3a125c9fb745a418dac380e2a9460f8200dc892611f10929091614818565b60405180910390a1505060016000555050565b6008546001600160a01b03163314611f4d5760405162461bcd60e51b81526004016103e0906148a9565b600980546001600160a01b0319166001600160a01b0392909216919091179055565b6009546001600160a01b03163314611f995760405162461bcd60e51b81526004016103e0906147da565b600754600a5460405163d900d1f760e01b81526000926001600160a01b03169163d900d1f791611fce91908890600401614818565b602060405180830381865afa158015611feb573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200f919061493f565b90508061204d5760405162461bcd60e51b815260206004820152600c60248201526b08509b1858dadb1a5cdd195960a21b60448201526064016103e0565b6120588484846114c4565b600061206385611aa9565b905061206f85826130e6565b50600061207b86611aa9565b905060006120898284614801565b905080601354101561209c5760006120aa565b806013546120aa9190614801565b60135550505050505050565b600260005414156120d95760405162461bcd60e51b81526004016103e090614a9b565b60026000908155338152602860205260409020601d5482101561210e5760405162461bcd60e51b81526004016103e090614b94565b60215460ff1615612153573360009081526023602052604090205460ff1661213557600080fd5b602254828260040154612148919061495c565b111561215357600080fd5b600061215d612b05565b60065490915061217d9061010090046001600160a01b0316333086613afb565b6000612187612b05565b905060006121958383614801565b9050808460040160008282546121ab919061495c565b9091555050600d546005850155601580548291906000906121cd90849061495c565b909155505060016000555050505050565b6008546001600160a01b031633146122085760405162461bcd60e51b81526004016103e0906148a9565b600780546001600160a01b0319166001600160a01b0392909216919091179055565b606060058054610d4e9061462a565b6009546001600160a01b031633146122635760405162461bcd60e51b81526004016103e0906147da565b606481111561227157600080fd5b600b55565b6009546001600160a01b031633146122a05760405162461bcd60e51b81526004016103e0906147da565b600e55565b600033816122b38286612997565b9050838110156123135760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f77604482015264207a65726f60d81b60648201526084016103e0565b61111f8286868403612bc8565b600033610ddf818585612eef565b6000601d548210156123525760405162461bcd60e51b81526004016103e090614b94565b60215460ff1615612379573360009081526023602052604090205460ff1661237957600080fd5b6000612383612b05565b6006549091506123a39061010090046001600160a01b0316333086613afb565b60006123ad612b05565b905060006123bb8383614801565b600754600a54604051632917823b60e21b81529293506000926001600160a01b039092169163a45e08ec916123f69160040190815260200190565b602060405180830381865afa158015612413573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124379190614926565b90506000805b8281101561250b57600754600a5460405163d900d1f760e01b81526000926001600160a01b03169163d900d1f79161247a91908690600401614818565b602060405180830381865afa158015612497573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124bb919061493f565b905080156124c957506124f9565b60006124d586846130ab565b90506124e083611aa9565b6124ea908561495c565b93506124f68382613b66565b50505b8061250381614974565b91505061243d565b5061251581610deb565b600f81905560009061252960065460ff1690565b61253490600a61475f565b61253e908661476e565b61254891906147a3565b90506125543382613644565b600080516020614d7e8339815191523385836040516125759392919061498f565b60405180910390a1979650505050505050565b6008546001600160a01b031690565b6000600260005414156125bc5760405162461bcd60e51b81526004016103e090614a9b565b600260009081553381526028602052604090208054601f906125f15760405162461bcd60e51b81526004016103e09190614aec565b508060010154600d541160209061261b5760405162461bcd60e51b81526004016103e09190614aec565b508054601a5460405163d33465cd60e01b8152600481018390529193506001600160a01b03169063d33465cd906024016020604051808303816000875af115801561266a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061268e9190614926565b91508060000154601460008282546126a69190614801565b9091555050600080825560018201556126bf3383613587565b50600160005590565b6000600260005414156126ed5760405162461bcd60e51b81526004016103e090614a9b565b6002600081815533815260286020526040902090810154601f906127245760405162461bcd60e51b81526004016103e09190614aec565b508060030154600d541160209061274e5760405162461bcd60e51b81526004016103e09190614aec565b508060020154915080600201546014600082825461276c9190614801565b909155505060006002820181905560038201556006546126bf9061010090046001600160a01b03163384613cd9565b6009546001600160a01b031633146127c55760405162461bcd60e51b81526004016103e0906147da565b6021805460ff1916911515919091179055565b600754600a54604051632830092960e21b815260009283926001600160a01b039091169163a0c024a491612810918890600401614818565b606060405180830381865afa15801561282d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061285191906148d2565b9050600081602001516001600160a01b031663e71325998584600001516040518363ffffffff1660e01b815260040161288b929190614bbd565b602060405180830381865afa1580156128a8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906128cc9190614926565b95945050505050565b601a546001600160a01b031633146128ff5760405162461bcd60e51b81526004016103e090614826565b600260005414156129225760405162461bcd60e51b81526004016103e090614a9b565b600260008181556001600160a01b038316815260286020526040902090810154601f90156129635760405162461bcd60e51b81526004016103e09190614aec565b5060028101839055600d5460038201556014805484919060009061298890849061495c565b90915550506001600055505050565b6001600160a01b03918216600090815260026020908152604080832093909416825291909152205490565b6009546001600160a01b031633146129ec5760405162461bcd60e51b81526004016103e0906147da565b6001600160a01b03166000908152602360205260409020805460ff19166001179055565b60026000541415612a335760405162461bcd60e51b81526004016103e090614a9b565b600260009081553381526028602052604090206004810154612a54826135ef565b600654612a709061010090046001600160a01b03163383613cd9565b50506001600055565b6009546001600160a01b03163314610fd75760405162461bcd60e51b81526004016103e0906147da565b6009546001600160a01b03163314612acd5760405162461bcd60e51b81526004016103e0906147da565b601d55565b6009546001600160a01b03163314612afc5760405162461bcd60e51b81526004016103e0906147da565b61ffff16601b55565b6006546040516370a0823160e01b815260009161010090046001600160a01b0316906370a0823190612b3b90309060040161436b565b602060405180830381865afa158015612b58573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114bf9190614926565b6008546001600160a01b03163314612ba65760405162461bcd60e51b81526004016103e0906148a9565b601880546001600160a01b0319166001600160a01b0392909216919091179055565b6001600160a01b038316612c2a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103e0565b6001600160a01b038216612c8b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103e0565b6001600160a01b0383811660008181526002602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591015b60405180910390a3505050565b60005b8151811015612d44576000828281518110612d0d57612d0d614bd4565b602002602001015190508060001415612d265750612d32565b612d308282613cf8565b505b80612d3c81614974565b915050612cf0565b50506007805460ff60a01b1916600160a01b179055565b600754600a54604051632917823b60e21b81526060926000926001600160a01b039091169163a45e08ec91612d969160040190815260200190565b602060405180830381865afa158015612db3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612dd79190614926565b9050806001600160401b03811115612df157612df1614398565b604051908082528060200260200182016040528015612e1a578160200160208202803683370190505b50915060005b81811015612e7657600d5460009081526026602090815260408083208484529091529020548351849083908110612e5957612e59614bd4565b602090810291909101015280612e6e81614974565b915050612e20565b505090565b6000612e878484612997565b905060001981146117ca5781811015612ee25760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103e0565b6117ca8484848403612bc8565b6001600160a01b038316612f535760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f206164604482015264647265737360d81b60648201526084016103e0565b6001600160a01b038216612fb55760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103e0565b6001600160a01b0383166000908152600160205260409020548181101561302d5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e7420657863656564732062604482015265616c616e636560d01b60648201526084016103e0565b6001600160a01b0380851660009081526001602052604080822085850390559185168152908120805484929061306490849061495c565b92505081905550826001600160a01b0316846001600160a01b0316600080516020614d9e8339815191528460405161309e91815260200190565b60405180910390a36117ca565b6000601654600014156130c057506000610de5565b6016546000838152602460205260409020546130dc908561476e565b610eab91906147a3565b60008082116130f757506000610de5565b600754600a54604051632830092960e21b81526000926001600160a01b03169163a0c024a49161312c91908890600401614818565b606060405180830381865afa158015613149573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061316d91906148d2565b9050600660019054906101000a90046001600160a01b03166001600160a01b031681604001516001600160a01b0316146131e85760405162461bcd60e51b815260206004820152601c60248201527b0a0e4deecd2c8cae440eadcc8cae4d8f2d2dcce40dad2e6dac2e8c6d60231b60448201526064016103e0565b6020810151815160405163e713259960e01b81526000926001600160a01b03169163e71325999161321d918891600401614bbd565b602060405180830381865afa15801561323a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061325e9190614926565b9050600082602001516001600160a01b031663b203bb993085600001516040518363ffffffff1660e01b8152600401613298929190614ad2565b602060405180830381865afa1580156132b5573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906132d99190614926565b9050816132ec5760009350505050610de5565b818110156132f8578091505b60208301518351613315916001600160a01b039091169084613df1565b602083015183516040808601519051632d182be560e21b81526001600160a01b039093169263b460af949261334e928792600401614bea565b6020604051808303816000875af115801561336d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906133919190614926565b93507fccf233e875bd2fea082ed46529bf3ac28ccf329204362a29ce37370730ad694686856040516133c4929190614818565b60405180910390a150505092915050565b60008284111561344657601c54929384936133f09084614801565b6133fb90600a614c09565b6134058683614801565b11156134445760405162461bcd60e51b815260206004820152600e60248201526d4d617820646976657267656e636560901b60448201526064016103e0565b505b509192915050565b6001600160a01b0382166134ae5760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103e0565b6001600160a01b038216600090815260016020526040902054818110156135225760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103e0565b6001600160a01b0383166000908152600160205260408120838303905560038054849290613551908490614801565b90915550506040518281526000906001600160a01b03851690600080516020614d9e83398151915290602001612ce0565b505050565b6000612710601b548361359a919061476e565b6135a491906147a3565b90506135c96135b1612588565b60065461010090046001600160a01b03169083613cd9565b613582836135d78385614801565b60065461010090046001600160a01b03169190613cd9565b6000816004015411601f906136175760405162461bcd60e51b81526004016103e09190614aec565b5080600401546015600082825461362e9190614801565b9091555050600060048201819055600590910155565b6001600160a01b03821661369a5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103e0565b80600360008282546136ac919061495c565b90915550506001600160a01b038216600090815260016020526040812080548392906136d990849061495c565b90915550506040518181526001600160a01b03831690600090600080516020614d9e8339815191529060200160405180910390a35b5050565b60005b8181101561370e5761372681613e8e565b8061373081614974565b915050613715565b600080601454613746612b05565b601354613753919061495c565b61375d9190614801565b905060006064600b5483613771919061476e565b61377b91906147a3565b90506137878183614801565b9250505090565b60006017546016546137a09190614c15565b905060008112156137b057600080fd5b60165560006017556007805460ff60a01b19169055565b600754600a54604051632917823b60e21b81526060926000926001600160a01b039091169163a45e08ec916138029160040190815260200190565b602060405180830381865afa15801561381f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906138439190614926565b6001600160401b0381111561385a5761385a614398565b604051908082528060200260200182016040528015613883578160200160208202803683370190505b50905060005b848110156139d257600754600a5460405163d900d1f760e01b81526000926001600160a01b03169163d900d1f7916138c691908690600401614818565b602060405180830381865afa1580156138e3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613907919061493f565b9050801561391557506139c0565b61391e82614093565b600061392a86846130ab565b9050600061393784611aa9565b905060006139458284614c56565b90506000808212613957576000613961565b6139618484614801565b9050600e5482131561398d578187878151811061398057613980614bd4565b6020026020010181815250505b600e548111806139a95750600086815260246020526040902054155b156139ba576139b886826130e6565b505b50505050505b806139ca81614974565b915050613889565b509392505050565b600754600a54604051632917823b60e21b815260048101919091526000916001600160a01b03169063a45e08ec90602401602060405180830381865afa158015613a28573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613a4c9190614926565b905060005b81811015613582576000838281518110613a6d57613a6d614bd4565b602002602001015190508060001415613a865750613a92565b613a908282613b66565b505b80613a9c81614974565b915050613a51565b600080600c546064613ab69190614801565b83613ac18187614801565b613acb919061476e565b613ad5919061476e565b90506000613ae484606461476e565b905083613af182846147a3565b6128cc919061495c565b6040516001600160a01b03808516602483015283166044820152606481018290526117ca9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526140e5565b600754600a54604051632830092960e21b81526000926001600160a01b03169163a0c024a491613b9b91908790600401614818565b606060405180830381865afa158015613bb8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613bdc91906148d2565b905081613be7612b05565b1015613bf857613bf5612b05565b91505b613c1e81602001518383604001516001600160a01b0316613df19092919063ffffffff16565b602081015181516040808401519051630b8b4a6160e21b81526001600160a01b0390931692632e2d298492613c57928792600401614bea565b6020604051808303816000875af1158015613c76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613c9a9190614926565b507fd7a09b41c556f96e88629b7ac2fa259961b7e891ed670fd096a3b935183fc5428383604051613ccc929190614818565b60405180910390a1505050565b6135828363a9059cbb60e01b8484604051602401613b2f929190614c95565b600754600a5460405163d900d1f760e01b81526001600160a01b039092169163d900d1f791613d2b918690600401614818565b602060405180830381865afa158015613d48573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613d6c919061493f565b15613db15760405162461bcd60e51b8152602060048201526015602482015274141c9bdd1bd8dbdb081bdb88189b1858dadb1a5cdd605a1b60448201526064016103e0565b60008281526025602052604081208054839290613dcf908490614c15565b925050819055508060176000828254613de89190614c15565b90915550505050565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b8152600401613e22929190614ad2565b602060405180830381865afa158015613e3f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613e639190614926565b613e6d919061495c565b90506117ca8463095ea7b360e01b8584604051602401613b2f929190614c95565b600d546000613e9c83611176565b600754600a5460405163d900d1f760e01b81529293506001600160a01b039091169163d900d1f791613ed2918790600401614818565b602060405180830381865afa158015613eef573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190613f13919061493f565b15613f4157600091825260266020908152604080842094845293815283832060001990556027905291902055565b600083815260276020526040902054613f6a576000928352602760205260409092209190915550565b600083815260276020526040812054613f839083614c56565b9050600081601054600c54601354613f9b919061476e565b613fa5919061476e565b613faf9190614cae565b90506000601054601654613fc39190614d33565b60008781526027602052604081205491925090613fe09083614cae565b613feb906064614cae565b9050816140115760008681526026602090815260408083208a8452909152812055614036565b61401b8184614d33565b60008781526026602090815260408083208b84529091529020555b600087815260276020908152604091829020879055600d5482518a8152918201529081018690527f138f565772451a35cdb4f6072283e9e51f8db317d59487be4be697f040ec0f739060600160405180910390a150505050505050565b60008181526025602090815260408083205460249092528220546140b79190614c15565b905060008112156140c757600080fd5b60009182526024602090815260408084209290925560259052812055565b600061413a826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166141b79092919063ffffffff16565b8051909150156135825780806020019051810190614158919061493f565b6135825760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016103e0565b6060611b9d8484600085856001600160a01b0385163b6142195760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016103e0565b600080866001600160a01b031685876040516142359190614d61565b60006040518083038185875af1925050503d8060008114614272576040519150601f19603f3d011682016040523d82523d6000602084013e614277565b606091505b5091509150614287828286614292565b979650505050505050565b606083156142a1575081610eab565b8251156142b15782518084602001fd5b8160405162461bcd60e51b81526004016103e091906142f7565b60005b838110156142e65781810151838201526020016142ce565b838111156117ca5750506000910152565b60208152600082518060208401526143168160408501602087016142cb565b601f01601f19169190910160400192915050565b6001600160a01b0381168114610fe057600080fd5b6000806040838503121561435257600080fd5b823561435d8161432a565b946020939093013593505050565b6001600160a01b0391909116815260200190565b60006020828403121561439157600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604051606081016001600160401b03811182821017156143d0576143d0614398565b60405290565b604051601f8201601f191681016001600160401b03811182821017156143fe576143fe614398565b604052919050565b6000602080838503121561441957600080fd5b82356001600160401b038082111561443057600080fd5b818501915085601f83011261444457600080fd5b81358181111561445657614456614398565b8060051b91506144678483016143d6565b818152918301840191848101908884111561448157600080fd5b938501935b8385101561449f57843582529385019390850190614486565b98975050505050505050565b6000806000606084860312156144c057600080fd5b83356144cb8161432a565b925060208401356144db8161432a565b929592945050506040919091013590565b6000602082840312156144fe57600080fd5b8135610eab8161432a565b60008060006060848603121561451e57600080fd5b505081359360208301359350604090920135919050565b60006020828403121561454757600080fd5b813563ffffffff81168114610eab57600080fd5b6000806040838503121561456e57600080fd5b50508035926020909101359150565b8015158114610fe057600080fd5b60006020828403121561459d57600080fd5b8135610eab8161457d565b600080604083850312156145bb57600080fd5b8235915060208301356145cd8161432a565b809150509250929050565b600080604083850312156145eb57600080fd5b82356145f68161432a565b915060208301356145cd8161432a565b60006020828403121561461857600080fd5b813561ffff81168114610eab57600080fd5b600181811c9082168061463e57607f821691505b6020821081141561465f57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b600181815b808511156146b657816000190482111561469c5761469c614665565b808516156146a957918102915b93841c9390800290614680565b509250929050565b6000826146cd57506001610de5565b816146da57506000610de5565b81600181146146f057600281146146fa57614716565b6001915050610de5565b60ff84111561470b5761470b614665565b50506001821b610de5565b5060208310610133831016604e8410600b8410161715614739575081810a610de5565b614743838361467b565b806000190482111561475757614757614665565b029392505050565b6000610eab60ff8416836146be565b600081600019048311821515161561478857614788614665565b500290565b634e487b7160e01b600052601260045260246000fd5b6000826147b2576147b261478d565b500490565b6000602082840312156147c957600080fd5b815160ff81168114610eab57600080fd5b6020808252600d908201526c37b7363c9023bab0b93234b0b760991b604082015260600190565b60008282101561481357614813614665565b500390565b918252602082015260400190565b6020808252600e908201526d37b7363c903c283937bb34b232b960911b604082015260600190565b600060608201858352602063ffffffff86168185015260606040850152818551808452608086019150828701935060005b8181101561489b5784518352938301939183019160010161487f565b509098975050505050505050565b6020808252600f908201526e5661756c743a206f6e6c792044414f60881b604082015260600190565b6000606082840312156148e457600080fd5b6148ec6143ae565b82516148f78161432a565b815260208301516149078161432a565b6020820152604083015161491a8161432a565b60408201529392505050565b60006020828403121561493857600080fd5b5051919050565b60006020828403121561495157600080fd5b8151610eab8161457d565b6000821982111561496f5761496f614665565b500190565b600060001982141561498857614988614665565b5060010190565b6001600160a01b039390931683526020830191909152604082015260600190565b6000602082840312156149c257600080fd5b8151610eab8161432a565b6000606082840312156149df57600080fd5b6149e76143ae565b82516149f28161432a565b81526020830151614a028161432a565b6020820152604083015162ffffff8116811461491a57600080fd5b8351815260208085015181830152604080860151818401526060808701516001600160a01b039081169185019190915260808088015182169085015260a0808801518216908501528551811660c08501529185015190911660e083015283015162ffffff166101008201528115156101208201526101408101611b9d565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b6001600160a01b0392831681529116602082015260400190565b600060208083526000845481600182811c915080831680614b0e57607f831692505b858310811415614b2c57634e487b7160e01b85526022600452602485fd5b878601838152602001818015614b495760018114614b5a57614b85565b60ff19861682528782019650614b85565b60008b81526020902060005b86811015614b7f57815484820152908501908901614b66565b83019750505b50949998505050505050505050565b6020808252600f908201526e135a5b9a5b5d5b4819195c1bdcda5d608a1b604082015260600190565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052603260045260246000fd5b9283526001600160a01b03918216602084015216604082015260600190565b6000610eab83836146be565b600080821280156001600160ff1b0384900385131615614c3757614c37614665565b600160ff1b8390038412811615614c5057614c50614665565b50500190565b60008083128015600160ff1b850184121615614c7457614c74614665565b6001600160ff1b0384018313811615614c8f57614c8f614665565b50500390565b6001600160a01b03929092168252602082015260400190565b60006001600160ff1b0381841382841380821686840486111615614cd457614cd4614665565b600160ff1b6000871282811687830589121615614cf357614cf3614665565b60008712925087820587128484161615614d0f57614d0f614665565b87850587128184161615614d2557614d25614665565b505050929093029392505050565b600082614d4257614d4261478d565b600160ff1b821460001984141615614d5c57614d5c614665565b500590565b60008251614d738184602087016142cb565b919091019291505056fe90890809c654f11d6e72a28fa60149770a0d11ec6c92319d6ceb2bb0a4ea1a15ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3eff279e6a1f5e320cca91135676d9cb6e44ca8a08c0b88342bcdb1144f6511b568a26469706673582212200aeaafcadd87e4bee2bf404981cd052f883cbca5a69809f030875f451a89c66a64736f6c634300080b0033",
  "libraries": {
    "Swap": "0x959E2B4eB3fe2607Ee266012571d9c0638713FAB"
  },
  "devdoc": {
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "balanceUnderlying(uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to an underlying protocol e.g compound_usdc_01"
        },
        "returns": {
          "_0": "Balance in VaultCurrency e.g USDC"
        }
      },
      "blacklistProtocol(uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to an underlying vault e.g compound_usdc_01"
        }
      },
      "calcShares(uint256,uint256)": {
        "params": {
          "_amount": "Amount in underyling token e.g USDC",
          "_protocolNum": "Protocol number linked to an underlying protocol e.g compound_usdc_01"
        },
        "returns": {
          "_0": "number of shares i.e LP tokens"
        }
      },
      "calculateExchangeRate(uint256)": {
        "params": {
          "totalUnderlying": "Total underlying in vaultCurrency"
        },
        "returns": {
          "_0": "price Exchange rate"
        }
      },
      "claimAndSwapTokens(uint256,uint256,uint256)": {
        "details": "Claims governance tokens from the underlying protocol if claimable, and swaps them to the vault's underlying token",
        "params": {
          "_protocolNum": "The protocol ID for which to claim and swap tokens"
        }
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overridden; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "decreaseAllowance(address,uint256)": {
        "details": "Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`."
      },
      "deposit(uint256)": {
        "details": "this can only be done if the funds from the user will be deposited directly into the underlying protocols. Hence, this is very gas intensive",
        "params": {
          "_amount": "Amount to deposit in vaultCurrency"
        },
        "returns": {
          "_0": "shares Amount of shares minted in LPtoken.decimals()"
        }
      },
      "depositRequest(uint256)": {
        "details": "This function allows a user to deposit an amount greater than or equal to the minimum deposit, transfers the deposited amount from the user to the Vault, and records the deposit request. If the training mode is active, the function checks if the user is whitelisted and the deposit doesn't exceed the max training deposit.",
        "params": {
          "_amount": "The amount that the user wants to deposit in vaultCurrency."
        }
      },
      "getDepositRequest()": {
        "returns": {
          "_0": "The deposit request of the user in vaultCurrency."
        }
      },
      "increaseAllowance(address,uint256)": {
        "details": "Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "price(uint256)": {
        "params": {
          "_protocolNum": "Protocol number linked to an underlying protocol e.g compound_usdc_01"
        },
        "returns": {
          "_0": "protocolPrice Price per lp token"
        }
      },
      "rebalance()": {
        "details": "amountToProtocol = totalAmount * currentAllocation / totalAllocatedTokensamountToDeposit = amountToProtocol - currentBalanceProtocolif amountToDeposit < 0 => withdrawExecute all withdrawals before deposits"
      },
      "rebalanceNeeded()": {
        "returns": {
          "_0": "bool True of rebalance is needed, false if not"
        }
      },
      "redeemDeposit()": {
        "details": "This function allows a user to redeem their deposit requests and receive shares. This can only be done if a deposit request has been made and the current rebalancing period is greater than the period in which the deposit request was made. The function will mint new shares in exchange for the deposit and update the user's deposit request status.",
        "returns": {
          "shares": "The number of shares minted in exchange for the deposit."
        }
      },
      "redeemRewardsGame(uint256,address)": {
        "params": {
          "_user": "Address of the user",
          "_value": "Amount to set a request in vaultCurrency"
        }
      },
      "setDao(address)": {
        "params": {
          "_dao": "New address of the governance / DAO"
        }
      },
      "setDaoToken(address)": {
        "params": {
          "_token": "New address of the derby token"
        }
      },
      "setGovernanceFee(uint16)": {
        "params": {
          "_fee": "Fee in basis points"
        }
      },
      "setGuardian(address)": {
        "params": {
          "_guardian": "new address of the guardian"
        }
      },
      "setHomeXProvider(address)": {
        "params": {
          "_xProvider": "new address of xProvider on this chain"
        }
      },
      "setLiquidityPerc(uint256)": {
        "details": "The actual liquidityPerc could be a bit more or a bit less than the liquidityPerc set here.This is because some deposits or withdrawals might not execute because they don't meet the marginScale.",
        "params": {
          "_liquidityPerc": "Value at which to set the liquidityPerc."
        }
      },
      "setMarginScale(int256)": {
        "details": "Take into account the scale of the underlying.",
        "params": {
          "_marginScale": "Value at which to set the marginScale."
        }
      },
      "setMinimumDeposit(uint256)": {
        "details": "Sets the minimum deposit amount allowed.",
        "params": {
          "_newMinimumDeposit": "The new minimum deposit amount to be set."
        }
      },
      "setPerformanceFee(uint256)": {
        "details": "The actual performanceFee could be a bit more or a bit less than the performanceFee set here due to approximations in the game.",
        "params": {
          "_performanceFee": "Value at which to set the performanceFee."
        }
      },
      "setRebalanceInterval(uint256)": {
        "params": {
          "_timestampInternal": "UNIX timestamp"
        }
      },
      "setminScale(uint256)": {
        "params": {
          "_minScale": "New maximum divergence in vaultCurrency"
        }
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transfer(address,uint256)": {
        "details": "See {IERC20-transfer}. Requirements: - `to` cannot be the zero address. - the caller must have a balance of at least `amount`."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. NOTE: Does not update the allowance if the current allowance is the maximum `uint256`. Requirements: - `from` and `to` cannot be the zero address. - `from` must have a balance of at least `amount`. - the caller must have allowance for ``from``'s tokens of at least `amount`."
      },
      "withdraw(uint256)": {
        "details": "this can only be done if the funds from the user will be withdrawed directly from the underlying protocols. Hence, this is very gas intensive",
        "params": {
          "_amount": "Amount to withdraw in vaultCurrency"
        },
        "returns": {
          "_0": "shares Amount of shares the user needs to supply in LPtoken decimals()"
        }
      },
      "withdrawAllowance()": {
        "details": "Will send the user funds and reset the allowance",
        "returns": {
          "value": "Amount received by seller in vaultCurrency, in vaultcurrency.decimals()"
        }
      },
      "withdrawFromBlacklistedProtocol(uint256,uint256,uint256)": {
        "details": "This function should only be called after a protocol has been blacklisted.",
        "params": {
          "_protocolNum": "The protocol number from which to withdraw the funds."
        }
      },
      "withdrawRewards()": {
        "details": "Swaps vaultCurrency to Derby tokens, sends the funds to the user, and resets the allowance",
        "returns": {
          "value": "The amount of reward withdrawn by the user"
        }
      },
      "withdrawalRequest(uint256)": {
        "details": "Will give the user allowance for his funds and pulls the extra funds at the next rebalance",
        "params": {
          "_amount": "Amount to withdraw in vaultCurrency"
        },
        "returns": {
          "shares": "Amount of shares the user needs to supply in LPtoken decimals()"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "addToWhitelist(address)": {
        "notice": "Setter to add an address to the whitelist"
      },
      "balanceUnderlying(uint256)": {
        "notice": "Get balance in VaultCurrency in underlying protocol"
      },
      "blacklistProtocol(uint256)": {
        "notice": "The DAO should be able to blacklist protocols, the funds should be sent to the vault."
      },
      "calcShares(uint256,uint256)": {
        "notice": "Calculates how many shares are equal to the amount in vault currency"
      },
      "calculateExchangeRate(uint256)": {
        "notice": "Function to calculate the exchangeRate (decimals = vaultCurrency decimals)"
      },
      "cancelDepositRequest()": {
        "notice": "Cancel the deposit request for the caller."
      },
      "claimAndSwapTokens(uint256,uint256,uint256)": {
        "notice": "Claims and swaps tokens from the underlying protocol"
      },
      "deposit(uint256)": {
        "notice": "function that enables direct deposits into the vault"
      },
      "depositRequest(uint256)": {
        "notice": "Enables a user to make a deposit into the Vault."
      },
      "getDao()": {
        "notice": "Getter for dao address"
      },
      "getDepositRequest()": {
        "notice": "Get the deposit request for a specific user."
      },
      "getGuardian()": {
        "notice": "Getter for guardian address"
      },
      "getRewardAllowance()": {
        "notice": "Returns the rewards the user is able to withdraw"
      },
      "getWithdrawalAllowance()": {
        "notice": "Returns the amount in vaultCurrency the user is able to withdraw"
      },
      "price(uint256)": {
        "notice": "Get price for underlying protocol"
      },
      "rebalance()": {
        "notice": "Vaults rebalanceRebalances i.e deposit or withdraw from all underlying protocols"
      },
      "rebalanceNeeded()": {
        "notice": "Checks if a rebalance is needed based on the set interval"
      },
      "receiveProtocolAllocations(int256[])": {
        "notice": "See receiveProtocolAllocations below"
      },
      "receiveProtocolAllocationsGuard(int256[])": {
        "notice": "Guardian function"
      },
      "redeemDeposit()": {
        "notice": "Redeems the pending deposit requests for the calling user."
      },
      "redeemRewardsGame(uint256,address)": {
        "notice": "Function for the game to set a withdrawalRequest for the rewards of the game user"
      },
      "sendRewardsToGame()": {
        "notice": "Vaults push rewardsPerLockedToken to game"
      },
      "setController(address)": {
        "notice": "Setter for controller address"
      },
      "setDao(address)": {
        "notice": "Set the governance address"
      },
      "setDaoToken(address)": {
        "notice": "Setter for derby token address"
      },
      "setGovernanceFee(uint16)": {
        "notice": "Setter for governance fee"
      },
      "setGuardian(address)": {
        "notice": "Setter for guardian address"
      },
      "setHomeChain(uint32)": {
        "notice": "Setter for new homeChain Id"
      },
      "setHomeXProvider(address)": {
        "notice": "Setter for xProvider address"
      },
      "setLiquidityPerc(uint256)": {
        "notice": "Set the liquidityPerc, the amount of liquidity which should be held in the vault after rebalancing."
      },
      "setMarginScale(int256)": {
        "notice": "Set the marginScale, the threshold used for deposits and withdrawals.If the threshold is not met the deposit/ withdrawal is not executed."
      },
      "setPerformanceFee(uint256)": {
        "notice": "Set the performanceFee, the percentage of the yield that goes to the game players."
      },
      "setRebalanceInterval(uint256)": {
        "notice": "Set minimum interval for the rebalance function"
      },
      "setTotalUnderlying()": {
        "notice": "Set total balance in VaultCurrency in all underlying protocols"
      },
      "setTraining(bool)": {
        "notice": "Setter to control the training state in de deposit function"
      },
      "setTrainingDeposit(uint256)": {
        "notice": "Setter for maximum amount to be able to deposit in training state"
      },
      "setminScale(uint256)": {
        "notice": "Setter for maximum divergence a user can get during a withdraw"
      },
      "withdraw(uint256)": {
        "notice": "function that enables direct withdrawals from the vault"
      },
      "withdrawAllowance()": {
        "notice": "Withdraw the allowance the user requested on the last rebalancing period"
      },
      "withdrawFromBlacklistedProtocol(uint256,uint256,uint256)": {
        "notice": "Withdraws the funds from a blacklisted protocol and updates the savedTotalUnderlying."
      },
      "withdrawRewards()": {
        "notice": "Withdraw the reward allowance set by the game using the redeemRewardsGame function"
      },
      "withdrawalRequest(uint256)": {
        "notice": "Withdrawal request for when the vault doesnt have enough funds available"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 10,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_status",
        "offset": 0,
        "slot": "0",
        "type": "t_uint256"
      },
      {
        "astId": 55,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_balances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 61,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_allowances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 63,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 65,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_name",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 67,
        "contract": "contracts/Vault.sol:Vault",
        "label": "_symbol",
        "offset": 0,
        "slot": "5",
        "type": "t_string_storage"
      },
      {
        "astId": 4861,
        "contract": "contracts/Vault.sol:Vault",
        "label": "decimals_",
        "offset": 0,
        "slot": "6",
        "type": "t_uint8"
      },
      {
        "astId": 2141,
        "contract": "contracts/Vault.sol:Vault",
        "label": "vaultCurrency",
        "offset": 1,
        "slot": "6",
        "type": "t_contract(IERC20Metadata)728"
      },
      {
        "astId": 2144,
        "contract": "contracts/Vault.sol:Vault",
        "label": "controller",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(IController)1586"
      },
      {
        "astId": 2146,
        "contract": "contracts/Vault.sol:Vault",
        "label": "deltaAllocationsReceived",
        "offset": 20,
        "slot": "7",
        "type": "t_bool"
      },
      {
        "astId": 2150,
        "contract": "contracts/Vault.sol:Vault",
        "label": "dao",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 2152,
        "contract": "contracts/Vault.sol:Vault",
        "label": "guardian",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 2154,
        "contract": "contracts/Vault.sol:Vault",
        "label": "vaultNumber",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2156,
        "contract": "contracts/Vault.sol:Vault",
        "label": "liquidityPerc",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 2158,
        "contract": "contracts/Vault.sol:Vault",
        "label": "performanceFee",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 2160,
        "contract": "contracts/Vault.sol:Vault",
        "label": "rebalancingPeriod",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 2162,
        "contract": "contracts/Vault.sol:Vault",
        "label": "marginScale",
        "offset": 0,
        "slot": "14",
        "type": "t_int256"
      },
      {
        "astId": 2164,
        "contract": "contracts/Vault.sol:Vault",
        "label": "exchangeRate",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 2167,
        "contract": "contracts/Vault.sol:Vault",
        "label": "BASE_SCALE",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 2169,
        "contract": "contracts/Vault.sol:Vault",
        "label": "rebalanceInterval",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 2171,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lastTimeStamp",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 2173,
        "contract": "contracts/Vault.sol:Vault",
        "label": "savedTotalUnderlying",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 2175,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalWithdrawalRequests",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 2177,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalDepositRequests",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 2179,
        "contract": "contracts/Vault.sol:Vault",
        "label": "totalAllocatedTokens",
        "offset": 0,
        "slot": "22",
        "type": "t_uint256"
      },
      {
        "astId": 2181,
        "contract": "contracts/Vault.sol:Vault",
        "label": "deltaAllocatedTokens",
        "offset": 0,
        "slot": "23",
        "type": "t_int256"
      },
      {
        "astId": 2183,
        "contract": "contracts/Vault.sol:Vault",
        "label": "derbyToken",
        "offset": 0,
        "slot": "24",
        "type": "t_address"
      },
      {
        "astId": 2185,
        "contract": "contracts/Vault.sol:Vault",
        "label": "game",
        "offset": 0,
        "slot": "25",
        "type": "t_address"
      },
      {
        "astId": 2187,
        "contract": "contracts/Vault.sol:Vault",
        "label": "xProvider",
        "offset": 0,
        "slot": "26",
        "type": "t_address"
      },
      {
        "astId": 2189,
        "contract": "contracts/Vault.sol:Vault",
        "label": "vaultOff",
        "offset": 20,
        "slot": "26",
        "type": "t_bool"
      },
      {
        "astId": 2191,
        "contract": "contracts/Vault.sol:Vault",
        "label": "homeChain",
        "offset": 21,
        "slot": "26",
        "type": "t_uint32"
      },
      {
        "astId": 2193,
        "contract": "contracts/Vault.sol:Vault",
        "label": "governanceFee",
        "offset": 0,
        "slot": "27",
        "type": "t_uint256"
      },
      {
        "astId": 2195,
        "contract": "contracts/Vault.sol:Vault",
        "label": "minScale",
        "offset": 0,
        "slot": "28",
        "type": "t_uint256"
      },
      {
        "astId": 2197,
        "contract": "contracts/Vault.sol:Vault",
        "label": "minimumDeposit",
        "offset": 0,
        "slot": "29",
        "type": "t_uint256"
      },
      {
        "astId": 2199,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lastRewardPeriod",
        "offset": 0,
        "slot": "30",
        "type": "t_uint256"
      },
      {
        "astId": 2202,
        "contract": "contracts/Vault.sol:Vault",
        "label": "allowanceError",
        "offset": 0,
        "slot": "31",
        "type": "t_string_storage"
      },
      {
        "astId": 2205,
        "contract": "contracts/Vault.sol:Vault",
        "label": "noFundsError",
        "offset": 0,
        "slot": "32",
        "type": "t_string_storage"
      },
      {
        "astId": 2207,
        "contract": "contracts/Vault.sol:Vault",
        "label": "training",
        "offset": 0,
        "slot": "33",
        "type": "t_bool"
      },
      {
        "astId": 2209,
        "contract": "contracts/Vault.sol:Vault",
        "label": "maxTrainingDeposit",
        "offset": 0,
        "slot": "34",
        "type": "t_uint256"
      },
      {
        "astId": 2213,
        "contract": "contracts/Vault.sol:Vault",
        "label": "whitelist",
        "offset": 0,
        "slot": "35",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 2217,
        "contract": "contracts/Vault.sol:Vault",
        "label": "currentAllocations",
        "offset": 0,
        "slot": "36",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2221,
        "contract": "contracts/Vault.sol:Vault",
        "label": "deltaAllocations",
        "offset": 0,
        "slot": "37",
        "type": "t_mapping(t_uint256,t_int256)"
      },
      {
        "astId": 2227,
        "contract": "contracts/Vault.sol:Vault",
        "label": "rewardPerLockedToken",
        "offset": 0,
        "slot": "38",
        "type": "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))"
      },
      {
        "astId": 2231,
        "contract": "contracts/Vault.sol:Vault",
        "label": "lastPrices",
        "offset": 0,
        "slot": "39",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 2236,
        "contract": "contracts/Vault.sol:Vault",
        "label": "userInfo",
        "offset": 0,
        "slot": "40",
        "type": "t_mapping(t_address,t_struct(UserInfo)2138_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IController)1586": {
        "encoding": "inplace",
        "label": "contract IController",
        "numberOfBytes": "20"
      },
      "t_contract(IERC20Metadata)728": {
        "encoding": "inplace",
        "label": "contract IERC20Metadata",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(UserInfo)2138_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct Vault.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2138_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_int256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => int256)",
        "numberOfBytes": "32",
        "value": "t_int256"
      },
      "t_mapping(t_uint256,t_mapping(t_uint256,t_int256))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(uint256 => int256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_int256)"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(UserInfo)2138_storage": {
        "encoding": "inplace",
        "label": "struct Vault.UserInfo",
        "members": [
          {
            "astId": 2127,
            "contract": "contracts/Vault.sol:Vault",
            "label": "withdrawalAllowance",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2129,
            "contract": "contracts/Vault.sol:Vault",
            "label": "withdrawalRequestPeriod",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2131,
            "contract": "contracts/Vault.sol:Vault",
            "label": "rewardAllowance",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2133,
            "contract": "contracts/Vault.sol:Vault",
            "label": "rewardRequestPeriod",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2135,
            "contract": "contracts/Vault.sol:Vault",
            "label": "depositRequest",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2137,
            "contract": "contracts/Vault.sol:Vault",
            "label": "depositRequestPeriod",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "192"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}
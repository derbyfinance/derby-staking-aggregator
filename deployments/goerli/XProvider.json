{
  "address": "0xDB09Ff195FF972d0bd30529B3571Dc7C95467Ae4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_connext",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_homeChain",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_srcChainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "_srcAddress",
          "type": "bytes"
        }
      ],
      "name": "SetTrustedRemote",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "_srcChainId",
          "type": "uint32"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "_srcAddress",
          "type": "address"
        }
      ],
      "name": "SetTrustedRemoteConnext",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "calculateEstimatedAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "connextRouterFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "etherNotUsed",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "game",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gameChain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDao",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "homeChain",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minValue",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minimumConnextFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "pushProtocolAllocationsToVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "int256[]",
          "name": "_rewards",
          "type": "int256[]"
        }
      ],
      "name": "pushRewardsToGame",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        }
      ],
      "name": "pushRewardsToVault",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        },
        {
          "internalType": "int256[]",
          "name": "_deltas",
          "type": "int256[]"
        }
      ],
      "name": "receiveProtocolAllocationsToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "uint32",
          "name": "_chainId",
          "type": "uint32"
        },
        {
          "internalType": "int256[]",
          "name": "_rewards",
          "type": "int256[]"
        }
      ],
      "name": "receiveRewardsToGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_value",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "receiveRewardsToVault",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_connextRouterFee",
          "type": "uint256"
        }
      ],
      "name": "setConnextRouterFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_dao",
          "type": "address"
        }
      ],
      "name": "setDao",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_game",
          "type": "address"
        }
      ],
      "name": "setGame",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_gameChain",
          "type": "uint32"
        }
      ],
      "name": "setGameChainId",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_guardian",
          "type": "address"
        }
      ],
      "name": "setGuardian",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_homeChain",
          "type": "uint32"
        }
      ],
      "name": "setHomeChain",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newMinimumConnextFee",
          "type": "uint256"
        }
      ],
      "name": "setMinimumConnextFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_slippage",
          "type": "uint256"
        }
      ],
      "name": "setSlippage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "_srcChainId",
          "type": "uint32"
        },
        {
          "internalType": "address",
          "name": "_srcAddress",
          "type": "address"
        }
      ],
      "name": "setTrustedRemoteConnext",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_vaultNumber",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "setVaultAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "slippage",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_vault",
          "type": "address"
        }
      ],
      "name": "toggleVaultWhitelist",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "name": "trustedRemoteConnext",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "vaultWhitelist",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "vaults",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_transferId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_asset",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_originSender",
          "type": "address"
        },
        {
          "internalType": "uint32",
          "name": "_origin",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "_callData",
          "type": "bytes"
        }
      ],
      "name": "xReceive",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb8daecb9c43be54d3574dd7a81e75d4a4147227c8a719b71e01ea4aca9735c7f",
  "receipt": {
    "to": null,
    "from": "0x1Ca7b496Ac4E609cf400793Db67916AC91773927",
    "contractAddress": "0xDB09Ff195FF972d0bd30529B3571Dc7C95467Ae4",
    "transactionIndex": 36,
    "gasUsed": "1944309",
    "logsBloom": "0x
    "blockHash": "0xac7b712ffed3026a40f9de848d251160f53d0d425a2b17962d587b2fb4f932e5",
    "transactionHash": "0xb8daecb9c43be54d3574dd7a81e75d4a4147227c8a719b71e01ea4aca9735c7f",
    "logs": [],
    "blockNumber": 10205472,
    "cumulativeGasUsed": "11560125",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xFCa08024A6D4bCc87275b1E4A1E22B71fAD7f649",
    "0x1Ca7b496Ac4E609cf400793Db67916AC91773927",
    "0x1Ca7b496Ac4E609cf400793Db67916AC91773927",
    "0x0000000000000000000000000000000000000000",
    1735353714
  ],
  "numDeployments": 1,
  "solcInputHash": "5c091c5b4c19c0cd55f224bc32a1bda8",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_connext\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_homeChain\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_srcChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"_srcAddress\",\"type\":\"bytes\"}],\"name\":\"SetTrustedRemote\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"_srcChainId\",\"type\":\"uint32\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"}],\"name\":\"SetTrustedRemoteConnext\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"calculateEstimatedAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"connextRouterFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"etherNotUsed\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"game\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gameChain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDao\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"homeChain\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minValue\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minimumConnextFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"pushProtocolAllocationsToVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"int256[]\",\"name\":\"_rewards\",\"type\":\"int256[]\"}],\"name\":\"pushRewardsToGame\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"pushRewardsToVault\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"},{\"internalType\":\"int256[]\",\"name\":\"_deltas\",\"type\":\"int256[]\"}],\"name\":\"receiveProtocolAllocationsToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"uint32\",\"name\":\"_chainId\",\"type\":\"uint32\"},{\"internalType\":\"int256[]\",\"name\":\"_rewards\",\"type\":\"int256[]\"}],\"name\":\"receiveRewardsToGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_value\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"receiveRewardsToVault\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_connextRouterFee\",\"type\":\"uint256\"}],\"name\":\"setConnextRouterFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_dao\",\"type\":\"address\"}],\"name\":\"setDao\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_game\",\"type\":\"address\"}],\"name\":\"setGame\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_gameChain\",\"type\":\"uint32\"}],\"name\":\"setGameChainId\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_guardian\",\"type\":\"address\"}],\"name\":\"setGuardian\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_homeChain\",\"type\":\"uint32\"}],\"name\":\"setHomeChain\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newMinimumConnextFee\",\"type\":\"uint256\"}],\"name\":\"setMinimumConnextFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_slippage\",\"type\":\"uint256\"}],\"name\":\"setSlippage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"_srcChainId\",\"type\":\"uint32\"},{\"internalType\":\"address\",\"name\":\"_srcAddress\",\"type\":\"address\"}],\"name\":\"setTrustedRemoteConnext\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_vaultNumber\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"setVaultAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slippage\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_vault\",\"type\":\"address\"}],\"name\":\"toggleVaultWhitelist\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"name\":\"trustedRemoteConnext\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"vaultWhitelist\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"vaults\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_transferId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_asset\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_originSender\",\"type\":\"address\"},{\"internalType\":\"uint32\",\"name\":\"_origin\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"}],\"name\":\"xReceive\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"calculateEstimatedAmount(uint256)\":{\"details\":\"This function computes the estimated amount by subtracting the percentage fees from the input amount.\",\"params\":{\"_amount\":\"The initial amount to be transferred, in vaultcurrency.decimals().\"},\"returns\":{\"_0\":\"estAmount The estimated amount after accounting for connextRouterFee and slippage.\"}},\"pushProtocolAllocationsToVault(uint32,address,int256[])\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_deltas\":\"Array with delta allocations where the index matches the protocolId\",\"_vault\":\"Address of the vault on given chainId\"}},\"pushRewardsToGame(uint256,uint32,int256[])\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_rewards\":\"Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\",\"_vaultNumber\":\"Number of the vault\"}},\"pushRewardsToVault(uint32,address,address,uint256)\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_user\":\"Address of the user who wants to redeem rewards\",\"_value\":\"Rewards to be redeemed by the user, in\",\"_vault\":\"Address of the vault on given chainId\"}},\"receiveProtocolAllocationsToVault(address,int256[])\":{\"params\":{\"_deltas\":\"Array with delta allocations where the index matches the protocolId\",\"_vault\":\"Address of the vault on given chainId\"}},\"receiveRewardsToGame(uint256,uint32,int256[])\":{\"params\":{\"_chainId\":\"Number of chain used\",\"_rewards\":\"Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\",\"_vaultNumber\":\"Number of the vault\"}},\"receiveRewardsToVault(uint256,address,address)\":{\"params\":{\"_user\":\"Array with delta allocations where the index matches the protocolId\",\"_value\":\"Address of the vault on given chainId\",\"_vault\":\"Address of the vault on given chainId\"}},\"setConnextRouterFee(uint256)\":{\"params\":{\"_connextRouterFee\":\"The new value for the connextRouterFee.\"}},\"setGame(address)\":{\"params\":{\"_game\":\"New address of the game\"}},\"setGameChainId(uint32)\":{\"params\":{\"_gameChain\":\"New chainId for game contract\"}},\"setGuardian(address)\":{\"params\":{\"_guardian\":\"new address of the guardian\"}},\"setHomeChain(uint32)\":{\"params\":{\"_homeChain\":\"New home chainId\"}},\"setMinimumConnextFee(uint256)\":{\"details\":\"Sets the minimum ether value for cross chain messages through Connext.\",\"params\":{\"_newMinimumConnextFee\":\"The new minimum Connext fee in ether to be set.\"}},\"setSlippage(uint256)\":{\"params\":{\"_slippage\":\"The new value for the slippage.\"}},\"setTrustedRemoteConnext(uint32,address)\":{\"params\":{\"_srcAddress\":\"Address of remote xprovider\",\"_srcChainId\":\"Chain is for remote xprovider, some as the remote receiving contract chain id (xReceive)\"}},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"params\":{\"_amount\":\"not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive.\",\"_asset\":\"not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive.\",\"_callData\":\"calldata, contains function signature which has to be called in this contract as well as the values, hashed and encoded.\",\"_origin\":\"sender domain id.\",\"_originSender\":\"sender contract.\",\"_transferId\":\"not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"calculateEstimatedAmount(uint256)\":{\"notice\":\"Calculates the estimated amount after accounting for connextRouterFee and slippage.\"},\"getDao()\":{\"notice\":\"Getter for dao address\"},\"pushProtocolAllocationsToVault(uint32,address,int256[])\":{\"notice\":\"Game pushes deltaAllocations to vaultsPush protocol allocation array from the game to all vaults/chains\"},\"pushRewardsToGame(uint256,uint32,int256[])\":{\"notice\":\"Step 9 push; Vaults push rewardsPerLockedToken to gamePush price and rewards array from vaults to the game\"},\"pushRewardsToVault(uint32,address,address,uint256)\":{\"notice\":\"Game pushes user rewards to vaults\"},\"receiveProtocolAllocationsToVault(address,int256[])\":{\"notice\":\"Game pushes deltaAllocations to vaultsReceives protocol allocation array from the game to all vaults/chains\"},\"receiveRewardsToGame(uint256,uint32,int256[])\":{\"notice\":\"Step 9 receive; Vaults push rewardsPerLockedToken to gameReceives price and rewards array from vaults to the game\"},\"receiveRewardsToVault(uint256,address,address)\":{\"notice\":\"Game pushes rewards of a user to vault for the user to redeem them\"},\"setConnextRouterFee(uint256)\":{\"notice\":\"Sets the connextRouterFee variable.\"},\"setDao(address)\":{\"notice\":\"Setter for dao address\"},\"setGame(address)\":{\"notice\":\"Setter for new game address\"},\"setGameChainId(uint32)\":{\"notice\":\"Setter for gameChain Id\"},\"setGuardian(address)\":{\"notice\":\"Setter for guardian address\"},\"setHomeChain(uint32)\":{\"notice\":\"Setter for homeChain Id\"},\"setSlippage(uint256)\":{\"notice\":\"Sets the slippage variable.\"},\"setTrustedRemoteConnext(uint32,address)\":{\"notice\":\"set trusted provider on remote chains, allow owner to set it multiple times.\"},\"setVaultAddress(uint256,address)\":{\"notice\":\"Setter for vault address to vaultNumber for guardian\"},\"toggleVaultWhitelist(address)\":{\"notice\":\"Whitelists vault address for onlyVault modifier\"},\"xReceive(bytes32,uint256,address,address,uint32,bytes)\":{\"notice\":\"function implemented from IXReceive from connext, standard way to receive messages with connext.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/XProvider.sol\":\"XProvider\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":5},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x032807210d1d7d218963d7355d62e021a84bf1b3339f4f50be2f63b53cccaf29\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd6153ce99bcdcce22b124f755e72553295be6abcd63804cfdffceb188b8bef10\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IConnext.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface IConnext {\\n  function xcall(\\n    uint32 _destination,\\n    address _to,\\n    address _asset,\\n    address _delegate,\\n    uint256 _amount,\\n    uint256 _slippage,\\n    bytes calldata _callData\\n  ) external payable returns (bytes32);\\n}\\n\",\"keccak256\":\"0xbf923d915aee00a132870dd981ba575ab722339cfd7a98c9ee628d3abf81531f\",\"license\":\"MIT\"},\"contracts/Interfaces/ExternalInterfaces/IXReceiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.11;\\n\\ninterface IXReceiver {\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external returns (bytes memory);\\n}\\n\",\"keccak256\":\"0xc552b691c34680f3bdd5c22d7c57e4976971d7400a5ac8f334b7bf282643f340\",\"license\":\"MIT\"},\"contracts/Interfaces/IGame.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IGame {\\n  function settleRewards(uint256 _vaultNumber, uint32 _chainId, int256[] memory rewards) external;\\n}\\n\",\"keccak256\":\"0xb438e1160aabffc9bf8b2faac36fd45010ecc55915a625be0e1378fab26803b1\",\"license\":\"MIT\"},\"contracts/Interfaces/IVault.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\ninterface IVault {\\n  function rebalancingPeriod() external view returns (uint256);\\n\\n  function price(uint256) external view returns (uint256);\\n\\n  function setDeltaAllocations(uint256 _protocolNum, int256 _allocation) external;\\n\\n  function rewardPerLockedToken(\\n    uint256 _rebalancingPeriod,\\n    uint256 _protocolNum\\n  ) external view returns (int256);\\n\\n  function performanceFee() external view returns (uint256);\\n\\n  function receiveProtocolAllocations(int256[] memory _deltas) external;\\n\\n  function decimals() external view returns (uint256);\\n\\n  function redeemRewardsGame(uint256 _amount, address _user) external;\\n}\\n\",\"keccak256\":\"0xf72187423df8354cc616a3721a1c9897d8ecf12a2bd1c6283e700539ceaafa26\",\"license\":\"MIT\"},\"contracts/XProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Derby Finance - 2022\\npragma solidity ^0.8.11;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nimport \\\"./Interfaces/IVault.sol\\\";\\nimport \\\"./Interfaces/IGame.sol\\\";\\nimport \\\"./Interfaces/ExternalInterfaces/IConnext.sol\\\";\\nimport \\\"./Interfaces/ExternalInterfaces/IXReceiver.sol\\\";\\n\\ncontract XProvider is IXReceiver {\\n  using SafeERC20 for IERC20;\\n\\n  address public immutable connext;\\n\\n  address private dao;\\n  address private guardian;\\n  address public game;\\n\\n  uint32 public homeChain;\\n  uint32 public gameChain;\\n\\n  // Slippage tolerance and router fee for cross-chain swap, in BPS (i.e. 30 = 0.3%).\\n  uint256 public connextRouterFee;\\n  uint256 public slippage;\\n\\n  // minimum ether value for cross chain messages through connext\\n  uint256 public minimumConnextFee;\\n\\n  // (domainID => contract address) mapping domainIDs to trusted remote xProvider on that specific domain\\n  mapping(uint32 => address) public trustedRemoteConnext;\\n  // (vaultAddress => bool): used for whitelisting vaults\\n  mapping(address => bool) public vaultWhitelist;\\n  // (vaultNumber => vaultAddress): used for guardian when xCall fails\\n  mapping(uint256 => address) public vaults;\\n\\n  string public etherNotUsed = \\\"Ether sent not used\\\";\\n  string public minValue = \\\"Minimum msg value\\\";\\n\\n  event SetTrustedRemote(uint32 _srcChainId, bytes _srcAddress);\\n  event SetTrustedRemoteConnext(uint32 _srcChainId, address _srcAddress);\\n\\n  modifier onlyDao() {\\n    require(msg.sender == dao, \\\"xProvider: only DAO\\\");\\n    _;\\n  }\\n\\n  modifier onlyGuardian() {\\n    require(msg.sender == guardian, \\\"only Guardian\\\");\\n    _;\\n  }\\n\\n  modifier onlyVaults() {\\n    require(vaultWhitelist[msg.sender], \\\"xProvider: only vault\\\");\\n    _;\\n  }\\n\\n  modifier onlyGame() {\\n    require(msg.sender == game, \\\"xProvider: only Game\\\");\\n    _;\\n  }\\n\\n  /// @notice Solution for the low-level call in xReceive that is seen as an external call\\n  modifier onlySelf() {\\n    require(msg.sender == address(this), \\\"xProvider: only Self\\\");\\n    _;\\n  }\\n\\n  modifier onlySelfOrVault() {\\n    require(\\n      msg.sender == address(this) || vaultWhitelist[msg.sender],\\n      \\\"xProvider: only Self or Vault\\\"\\n    );\\n    _;\\n  }\\n\\n  /** @notice A modifier for authenticated calls.\\n   * This is an important security consideration. If the target contract\\n   * function should be authenticated, it must check three things:\\n   *    1) The originating call comes from the expected origin domain.\\n   *    2) The originating call comes from the expected source contract.\\n   *    3) The call to this contract comes from Connext.\\n   */\\n  modifier onlySource(address _originSender, uint32 _origin) {\\n    require(\\n      trustedRemoteConnext[_origin] != address(0) &&\\n        _originSender == trustedRemoteConnext[_origin] &&\\n        msg.sender == connext,\\n      \\\"Not trusted\\\"\\n    );\\n    _;\\n  }\\n\\n  constructor(address _connext, address _dao, address _guardian, address _game, uint32 _homeChain) {\\n    connext = _connext;\\n    dao = _dao;\\n    guardian = _guardian;\\n    game = _game;\\n    homeChain = _homeChain;\\n    connextRouterFee = 5; // 0.05%\\n    slippage = 50; // 0.5%\\n    minimumConnextFee = 0.03 ether;\\n  }\\n\\n  /// @notice Transfers funds from one chain to another using the Connext contract.\\n  /// @dev The function first checks if the destination domain is trusted, then transfers\\n  ///      and approves the specified token (if any), and finally calls the Connext contract to\\n  ///      perform the cross-chain transfer.\\n  /// @param _destinationDomain The destination domain ID.\\n  /// @param _callData Additional data to be included in the cross-chain transfer.\\n  /// @param _asset Address of the token on this domain (use address(0) for non currency transfers).\\n  /// @param _amount The amount to transfer.\\n  function xSend(\\n    uint32 _destinationDomain,\\n    bytes memory _callData,\\n    address _asset,\\n    uint256 _amount\\n  ) internal {\\n    address target = trustedRemoteConnext[_destinationDomain];\\n    require(target != address(0), \\\"XProvider: destination chain not trusted\\\");\\n\\n    if (_asset != address(0)) transferAndApprove(_asset, _amount);\\n\\n    IConnext(connext).xcall{value: msg.value}(\\n      _destinationDomain, // _destination: Domain ID of the destination chain\\n      target, // _to: address receiving the funds on the destination\\n      _asset, // _asset: address of the token contract\\n      guardian, // _delegate: address that can revert or forceLocal on destination\\n      _amount, // _amount: amount of tokens to transfer\\n      slippage, // _slippage: the maximum amount of slippage the user will accept in BPS (e.g. 30 = 0.3%)\\n      _callData // _callData: empty bytes because we're only sending funds\\n    );\\n  }\\n\\n  /// @notice Transfers the specified amount of tokens from the user to this contract,\\n  ///         and approves the transfer of the same amount to the Connext contract.\\n  /// @dev This function is called within the xSend function.\\n  /// @param _asset The address of the token to transfer and approve.\\n  /// @param _amount The amount of tokens to transfer and approve.\\n  function transferAndApprove(address _asset, uint256 _amount) internal {\\n    require(\\n      IERC20(_asset).allowance(msg.sender, address(this)) >= _amount,\\n      \\\"User must approve amount\\\"\\n    );\\n    // User sends funds to this contract\\n    IERC20(_asset).safeTransferFrom(msg.sender, address(this), _amount);\\n    // This contract approves transfer to Connext\\n    IERC20(_asset).safeIncreaseAllowance(address(connext), _amount);\\n  }\\n\\n  /// @notice function implemented from IXReceive from connext, standard way to receive messages with connext.\\n  /// @param _transferId not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive.\\n  /// @param _amount not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive.\\n  /// @param _asset not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive.\\n  /// @param _originSender sender contract.\\n  /// @param _origin sender domain id.\\n  /// @param _callData calldata, contains function signature which has to be called in this contract as well as the values, hashed and encoded.\\n  function xReceive(\\n    bytes32 _transferId,\\n    uint256 _amount,\\n    address _asset,\\n    address _originSender,\\n    uint32 _origin,\\n    bytes memory _callData\\n  ) external onlySource(_originSender, _origin) returns (bytes memory) {\\n    (bool success, ) = address(this).call(_callData);\\n    require(success, \\\"xReceive: No success\\\");\\n  }\\n\\n  /// @notice Game pushes deltaAllocations to vaults\\n  /// @notice Push protocol allocation array from the game to all vaults/chains\\n  /// @param _chainId Number of chain used\\n  /// @param _vault Address of the vault on given chainId\\n  /// @param _deltas Array with delta allocations where the index matches the protocolId\\n  function pushProtocolAllocationsToVault(\\n    uint32 _chainId,\\n    address _vault,\\n    int256[] memory _deltas\\n  ) external payable onlyGame {\\n    if (_chainId == homeChain) {\\n      require(msg.value == 0, etherNotUsed);\\n      return IVault(_vault).receiveProtocolAllocations(_deltas);\\n    } else {\\n      require(msg.value >= minimumConnextFee, minValue);\\n      bytes4 selector = bytes4(keccak256(\\\"receiveProtocolAllocationsToVault(address,int256[])\\\"));\\n      bytes memory callData = abi.encodeWithSelector(selector, _vault, _deltas);\\n\\n      xSend(_chainId, callData, address(0), 0);\\n    }\\n  }\\n\\n  /// @notice Game pushes deltaAllocations to vaults\\n  /// @notice Receives protocol allocation array from the game to all vaults/chains\\n  /// @param _vault Address of the vault on given chainId\\n  /// @param _deltas Array with delta allocations where the index matches the protocolId\\n  function receiveProtocolAllocationsToVault(\\n    address _vault,\\n    int256[] memory _deltas\\n  ) external onlySelf {\\n    return IVault(_vault).receiveProtocolAllocations(_deltas);\\n  }\\n\\n  /// @notice Game pushes user rewards to vaults\\n  /// @param _chainId Number of chain used\\n  /// @param _vault Address of the vault on given chainId\\n  /// @param _user Address of the user who wants to redeem rewards\\n  /// @param _value Rewards to be redeemed by the user, in\\n  function pushRewardsToVault(\\n    uint32 _chainId,\\n    address _vault,\\n    address _user,\\n    uint256 _value\\n  ) external payable onlyGame {\\n    if (_chainId == homeChain) {\\n      require(msg.value == 0, etherNotUsed);\\n      return IVault(_vault).redeemRewardsGame(_value, _user);\\n    } else {\\n      require(msg.value >= minimumConnextFee, minValue);\\n      bytes4 selector = bytes4(keccak256(\\\"receiveRewardsToVault(uint256,address,address)\\\"));\\n      bytes memory callData = abi.encodeWithSelector(selector, _value, _user, _vault);\\n\\n      xSend(_chainId, callData, address(0), 0);\\n    }\\n  }\\n\\n  /// @notice Game pushes rewards of a user to vault for the user to redeem them\\n  /// @param _value Address of the vault on given chainId\\n  /// @param _user Array with delta allocations where the index matches the protocolId\\n  /// @param _vault Address of the vault on given chainId\\n  function receiveRewardsToVault(uint256 _value, address _user, address _vault) external onlySelf {\\n    return IVault(_vault).redeemRewardsGame(_value, _user);\\n  }\\n\\n  /// @notice Step 9 push; Vaults push rewardsPerLockedToken to game\\n  /// @notice Push price and rewards array from vaults to the game\\n  /// @param _vaultNumber Number of the vault\\n  /// @param _chainId Number of chain used\\n  /// @param _rewards Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\\n  function pushRewardsToGame(\\n    uint256 _vaultNumber,\\n    uint32 _chainId,\\n    int256[] memory _rewards\\n  ) external payable onlyVaults {\\n    if (homeChain == gameChain) {\\n      require(msg.value == 0, etherNotUsed);\\n      return IGame(game).settleRewards(_vaultNumber, _chainId, _rewards);\\n    } else {\\n      require(msg.value >= minimumConnextFee, minValue);\\n      bytes4 selector = bytes4(keccak256(\\\"receiveRewardsToGame(uint256,uint32,int256[])\\\"));\\n      bytes memory callData = abi.encodeWithSelector(selector, _vaultNumber, _chainId, _rewards);\\n\\n      xSend(gameChain, callData, address(0), 0);\\n    }\\n  }\\n\\n  /// @notice Step 9 receive; Vaults push rewardsPerLockedToken to game\\n  /// @notice Receives price and rewards array from vaults to the game\\n  /// @param _vaultNumber Number of the vault\\n  /// @param _chainId Number of chain used\\n  /// @param _rewards Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId\\n  function receiveRewardsToGame(\\n    uint256 _vaultNumber,\\n    uint32 _chainId,\\n    int256[] memory _rewards\\n  ) external onlySelf {\\n    return IGame(game).settleRewards(_vaultNumber, _chainId, _rewards);\\n  }\\n\\n  /// @notice Calculates the estimated amount after accounting for connextRouterFee and slippage.\\n  /// @dev This function computes the estimated amount by subtracting the percentage fees from the input amount.\\n  /// @param _amount The initial amount to be transferred, in vaultcurrency.decimals().\\n  /// @return estAmount The estimated amount after accounting for connextRouterFee and slippage.\\n  function calculateEstimatedAmount(uint256 _amount) public view returns (uint256) {\\n    uint256 estAmount = _amount -\\n      ((_amount * connextRouterFee) / 10_000) -\\n      ((_amount * slippage) / 10_000);\\n    return estAmount;\\n  }\\n\\n  /// @notice Getter for dao address\\n  function getDao() public view returns (address) {\\n    return dao;\\n  }\\n\\n  /*\\n  Only Dao functions\\n  */\\n  /// @notice set trusted provider on remote chains, allow owner to set it multiple times.\\n  /// @param _srcChainId Chain is for remote xprovider, some as the remote receiving contract chain id (xReceive)\\n  /// @param _srcAddress Address of remote xprovider\\n  function setTrustedRemoteConnext(uint32 _srcChainId, address _srcAddress) external onlyDao {\\n    trustedRemoteConnext[_srcChainId] = _srcAddress;\\n    emit SetTrustedRemoteConnext(_srcChainId, _srcAddress);\\n  }\\n\\n  /// @notice Setter for homeChain Id\\n  /// @param _homeChain New home chainId\\n  function setHomeChain(uint32 _homeChain) external onlyDao {\\n    homeChain = _homeChain;\\n  }\\n\\n  /// @notice Setter for gameChain Id\\n  /// @param _gameChain New chainId for game contract\\n  function setGameChainId(uint32 _gameChain) external onlyDao {\\n    gameChain = _gameChain;\\n  }\\n\\n  /// @notice Whitelists vault address for onlyVault modifier\\n  function toggleVaultWhitelist(address _vault) external onlyDao {\\n    vaultWhitelist[_vault] = !vaultWhitelist[_vault];\\n  }\\n\\n  /// @notice Setter for dao address\\n  function setDao(address _dao) external onlyDao {\\n    dao = _dao;\\n  }\\n\\n  /// @notice Setter for guardian address\\n  /// @param _guardian new address of the guardian\\n  function setGuardian(address _guardian) external onlyDao {\\n    guardian = _guardian;\\n  }\\n\\n  /// @notice Setter for new game address\\n  /// @param _game New address of the game\\n  function setGame(address _game) external onlyDao {\\n    game = _game;\\n  }\\n\\n  /// @notice Setter for vault address to vaultNumber for guardian\\n  function setVaultAddress(uint256 _vaultNumber, address _vault) external onlyDao {\\n    vaults[_vaultNumber] = _vault;\\n  }\\n\\n  /*\\n  Only Guardian functions\\n  */\\n\\n  /// @notice Sets the connextRouterFee variable.\\n  /// @param _connextRouterFee The new value for the connextRouterFee.\\n  function setConnextRouterFee(uint256 _connextRouterFee) external onlyGuardian {\\n    connextRouterFee = _connextRouterFee;\\n  }\\n\\n  /// @notice Sets the slippage variable.\\n  /// @param _slippage The new value for the slippage.\\n  function setSlippage(uint256 _slippage) external onlyGuardian {\\n    slippage = _slippage;\\n  }\\n\\n  /// @dev Sets the minimum ether value for cross chain messages through Connext.\\n  /// @param _newMinimumConnextFee The new minimum Connext fee in ether to be set.\\n  function setMinimumConnextFee(uint256 _newMinimumConnextFee) external onlyGuardian {\\n    minimumConnextFee = _newMinimumConnextFee;\\n  }\\n}\\n\",\"keccak256\":\"0xb25ebcc74c5a5c12325f4feba7d00c452b167ab1c3dc8e1173bda140f8fe7b09\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e0604052601360a08190527f45746865722073656e74206e6f7420757365640000000000000000000000000060c090815262000040916009919062000127565b50604080518082019091526011808252704d696e696d756d206d73672076616c756560781b60209092019182526200007b91600a9162000127565b503480156200008957600080fd5b506040516200219c3803806200219c833981016040819052620000ac91620001ea565b6001600160a01b03948516608052600080549486166001600160a01b03199586161790556001805493861693909416929092179092556002805463ffffffff909216600160a01b026001600160c01b03199092169290931691909117179055600560038190556032600455666a94d74f4300009055620002a3565b828054620001359062000266565b90600052602060002090601f016020900481019282620001595760008555620001a4565b82601f106200017457805160ff1916838001178555620001a4565b82800160010185558215620001a4579182015b82811115620001a457825182559160200191906001019062000187565b50620001b2929150620001b6565b5090565b5b80821115620001b25760008155600101620001b7565b80516001600160a01b0381168114620001e557600080fd5b919050565b600080600080600060a086880312156200020357600080fd5b6200020e86620001cd565b94506200021e60208701620001cd565b93506200022e60408701620001cd565b92506200023e60608701620001cd565b9150608086015163ffffffff811681146200025857600080fd5b809150509295509295909350565b600181811c908216806200027b57607f821691505b602082108114156200029d57634e487b7160e01b600052602260045260246000fd5b50919050565b608051611ec8620002d46000396000818161053601528181611017015281816111d8015261133c0152611ec86000f3fe6080604052600436106101735760003560e01c80630f9c394a146101785780631dbb91511461018d5780632aa3ac85146101ad57806339daa1b2146101cd5780633e032a3b1461021257806344835d76146102365780634f514f06146102565780635afbf5ba1461027657806360a15a6c146102965780636637b882146102b65780637468a52b146102d657806375183d571461030f578063785b030a14610331578063819912a2146103515780638a0dac4a146103715780638c64ea4a14610391578063963e63c7146103df5780639973ea87146103f45780639f0188a71461042a578063a9060c3c1461044a578063ab2dcc5d1461045d578063ab976ebe14610470578063b70811bc14610486578063b976db2a146104a4578063c3fe3e28146104c4578063d1212eef146104e4578063d33465cd14610504578063de4b054814610524578063df3fa90414610558578063f0fa55a91461056e578063fd614f411461058e578063ff4763e5146105ae575b600080fd5b61018b6101863660046117b8565b6105d2565b005b34801561019957600080fd5b5061018b6101a8366004611815565b61074f565b3480156101b957600080fd5b5061018b6101c8366004611841565b6107a7565b3480156101d957600080fd5b506101fd6101e836600461186b565b60076020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5061022860045481565b604051908152602001610209565b34801561024257600080fd5b5061018b610251366004611886565b61083e565b34801561026257600080fd5b5061018b61027136600461186b565b610891565b34801561028257600080fd5b5061018b6102913660046118ab565b6108e4565b3480156102a257600080fd5b5061018b6102b13660046118c6565b610934565b3480156102c257600080fd5b5061018b6102d136600461186b565b6109b6565b3480156102e257600080fd5b506002546102fa90600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610209565b34801561031b57600080fd5b50610324610a02565b604051610209919061196b565b34801561033d57600080fd5b5061018b61034c36600461197e565b610a90565b34801561035d57600080fd5b5061018b61036c36600461186b565b610abf565b34801561037d57600080fd5b5061018b61038c36600461186b565b610b0b565b34801561039d57600080fd5b506103c76103ac36600461197e565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610209565b3480156103eb57600080fd5b50610324610b57565b34801561040057600080fd5b506103c761040f3660046118ab565b6006602052600090815260409020546001600160a01b031681565b34801561043657600080fd5b5061018b6104453660046118ab565b610b64565b61018b610458366004611886565b610bb4565b61018b61046b366004611997565b610d39565b34801561047c57600080fd5b5061022860035481565b34801561049257600080fd5b506000546001600160a01b03166103c7565b3480156104b057600080fd5b5061018b6104bf36600461197e565b610eb2565b3480156104d057600080fd5b506002546103c7906001600160a01b031681565b3480156104f057600080fd5b5061018b6104ff3660046119e2565b610ee1565b34801561051057600080fd5b5061022861051f36600461197e565b610f2e565b34801561053057600080fd5b506103c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561056457600080fd5b5061022860055481565b34801561057a57600080fd5b5061018b61058936600461197e565b610f82565b34801561059a57600080fd5b506103246105a9366004611a1e565b610fb1565b3480156105ba57600080fd5b506002546102fa90600160c01b900463ffffffff1681565b6002546001600160a01b031633146106055760405162461bcd60e51b81526004016105fc90611af6565b60405180910390fd5b60025463ffffffff848116600160a01b9092041614156106a457600934156106405760405162461bcd60e51b81526004016105fc9190611b5f565b50604051632189651f60e01b81526001600160a01b03831690632189651f9061066d908490600401611c42565b600060405180830381600087803b15801561068757600080fd5b505af115801561069b573d6000803e3d6000fd5b50505050505050565b600554341015600a906106ca5760405162461bcd60e51b81526004016105fc9190611b5f565b5060007f60a15a6ceeddd71d7d400d721256643867757bd9c349090ff2f5d4ac2855b05490506000818484604051602401610706929190611c55565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506107478582600080611124565b50505b505050565b6000546001600160a01b031633146107795760405162461bcd60e51b81526004016105fc90611c79565b60009182526008602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b031633146107d15760405162461bcd60e51b81526004016105fc90611c79565b63ffffffff821660008181526006602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251938452908301527ff29e81641e01d30e59b0af239e1f4c0f1d9b119a02364d0ebb6c46518a5a5edf910160405180910390a15050565b33301461085d5760405162461bcd60e51b81526004016105fc90611ca6565b6002546040516364bfacaf60e01b81526001600160a01b03909116906364bfacaf9061066d90869086908690600401611cd4565b6000546001600160a01b031633146108bb5760405162461bcd60e51b81526004016105fc90611c79565b6001600160a01b03166000908152600760205260409020805460ff19811660ff90911615179055565b6000546001600160a01b0316331461090e5760405162461bcd60e51b81526004016105fc90611c79565b6002805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b3330146109535760405162461bcd60e51b81526004016105fc90611ca6565b604051632189651f60e01b81526001600160a01b03831690632189651f9061097f908490600401611c42565b600060405180830381600087803b15801561099957600080fd5b505af11580156109ad573d6000803e3d6000fd5b505050505b5050565b6000546001600160a01b031633146109e05760405162461bcd60e51b81526004016105fc90611c79565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60098054610a0f90611b24565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3b90611b24565b8015610a885780601f10610a5d57610100808354040283529160200191610a88565b820191906000526020600020905b815481529060010190602001808311610a6b57829003601f168201915b505050505081565b6001546001600160a01b03163314610aba5760405162461bcd60e51b81526004016105fc90611d02565b600555565b6000546001600160a01b03163314610ae95760405162461bcd60e51b81526004016105fc90611c79565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b355760405162461bcd60e51b81526004016105fc90611c79565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600a8054610a0f90611b24565b6000546001600160a01b03163314610b8e5760405162461bcd60e51b81526004016105fc90611c79565b6002805463ffffffff909216600160c01b0263ffffffff60c01b19909216919091179055565b3360009081526007602052604090205460ff16610c0b5760405162461bcd60e51b81526020600482015260156024820152741e141c9bdd9a59195c8e881bdb9b1e481d985d5b1d605a1b60448201526064016105fc565b600254600160a01b810463ffffffff908116600160c01b909204161415610c825760093415610c4d5760405162461bcd60e51b81526004016105fc9190611b5f565b506002546040516364bfacaf60e01b81526001600160a01b03909116906364bfacaf9061066d90869086908690600401611cd4565b600554341015600a90610ca85760405162461bcd60e51b81526004016105fc9190611b5f565b5060007f44835d768fda698d8aaca563c82c423c79e3d7392f148c1bd2c375688f7639539050600081858585604051602401610ce693929190611cd4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526002549091506107479063ffffffff600160c01b9091041682600080611124565b6002546001600160a01b03163314610d635760405162461bcd60e51b81526004016105fc90611af6565b60025463ffffffff858116600160a01b909204161415610e045760093415610d9e5760405162461bcd60e51b81526004016105fc9190611b5f565b5060405163365eed6560e21b81526001600160a01b0384169063d97bb59490610dcd9084908690600401611d29565b600060405180830381600087803b158015610de757600080fd5b505af1158015610dfb573d6000803e3d6000fd5b50505050610eac565b600554341015600a90610e2a5760405162461bcd60e51b81526004016105fc9190611b5f565b5060408051602481018390526001600160a01b03848116604483015285166064808301919091528251808303909101815260849091019091526020810180516001600160e01b031663d1212eef60e01b1790527fd1212eefa4bc02cb0bd68f637e0de7d4889a50f86b182d5e5ff498dceb5ad295906109ad8682600080611124565b50505050565b6001546001600160a01b03163314610edc5760405162461bcd60e51b81526004016105fc90611d02565b600355565b333014610f005760405162461bcd60e51b81526004016105fc90611ca6565b60405163365eed6560e21b81526001600160a01b0382169063d97bb5949061066d9086908690600401611d29565b60008061271060045484610f429190611d56565b610f4c9190611d75565b61271060035485610f5d9190611d56565b610f679190611d75565b610f719085611d97565b610f7b9190611d97565b9392505050565b6001546001600160a01b03163314610fac5760405162461bcd60e51b81526004016105fc90611d02565b600455565b63ffffffff8216600090815260066020526040902054606090849084906001600160a01b031615801590611005575063ffffffff81166000908152600660205260409020546001600160a01b038381169116145b80156110395750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6110735760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1c9d5cdd195960aa1b60448201526064016105fc565b6000306001600160a01b03168560405161108d9190611dae565b6000604051808303816000865af19150503d80600081146110ca576040519150601f19603f3d011682016040523d82523d6000602084013e6110cf565b606091505b50509050806111175760405162461bcd60e51b815260206004820152601460248201527378526563656976653a204e6f207375636365737360601b60448201526064016105fc565b5050509695505050505050565b63ffffffff84166000908152600660205260409020546001600160a01b0316806111a15760405162461bcd60e51b815260206004820152602860248201527f5850726f76696465723a2064657374696e6174696f6e20636861696e206e6f74604482015267081d1c9d5cdd195960c21b60648201526084016105fc565b6001600160a01b038316156111ba576111ba838361125e565b600154600480546040516345560b5d60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811694638aac16ba94349461121b948d948a948d949116928c9290918f9101611dca565b60206040518083038185885af1158015611239573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109ad9190611e25565b604051636eb1769f60e11b815281906001600160a01b0384169063dd62ed3e9061128e9033903090600401611e3e565b602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190611e25565b10156113185760405162461bcd60e51b8152602060048201526018602482015277155cd95c881b5d5cdd08185c1c1c9bdd9948185b5bdd5b9d60421b60448201526064016105fc565b61132d6001600160a01b038316333084611361565b6109b26001600160a01b0383167f0000000000000000000000000000000000000000000000000000000000000000836113cc565b6040516001600160a01b0380851660248301528316604482015260648101829052610eac9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261147b565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016113fd929190611e3e565b602060405180830381865afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190611e25565b6114489190611e58565b6040516001600160a01b038516602482015260448101829052909150610eac90859063095ea7b360e01b90606401611395565b60006114d0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661154d9092919063ffffffff16565b80519091501561074a57808060200190518101906114ee9190611e70565b61074a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105fc565b606061155c8484600085611564565b949350505050565b6060824710156115c55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105fc565b6001600160a01b0385163b61161c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105fc565b600080866001600160a01b031685876040516116389190611dae565b60006040518083038185875af1925050503d8060008114611675576040519150601f19603f3d011682016040523d82523d6000602084013e61167a565b606091505b509150915061168a828286611695565b979650505050505050565b606083156116a4575081610f7b565b8251156116b45782518084602001fd5b8160405162461bcd60e51b81526004016105fc919061196b565b803563ffffffff811681146116e257600080fd5b919050565b80356001600160a01b03811681146116e257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561173c5761173c6116fe565b604052919050565b600082601f83011261175557600080fd5b813560206001600160401b03821115611770576117706116fe565b8160051b61177f828201611714565b928352848101820192828101908785111561179957600080fd5b83870192505b8483101561168a5782358252918301919083019061179f565b6000806000606084860312156117cd57600080fd5b6117d6846116ce565b92506117e4602085016116e7565b915060408401356001600160401b038111156117ff57600080fd5b61180b86828701611744565b9150509250925092565b6000806040838503121561182857600080fd5b82359150611838602084016116e7565b90509250929050565b6000806040838503121561185457600080fd5b61185d836116ce565b9150611838602084016116e7565b60006020828403121561187d57600080fd5b610f7b826116e7565b60008060006060848603121561189b57600080fd5b833592506117e4602085016116ce565b6000602082840312156118bd57600080fd5b610f7b826116ce565b600080604083850312156118d957600080fd5b6118e2836116e7565b915060208301356001600160401b038111156118fd57600080fd5b61190985828601611744565b9150509250929050565b60005b8381101561192e578181015183820152602001611916565b83811115610eac5750506000910152565b60008151808452611957816020860160208601611913565b601f01601f19169290920160200192915050565b602081526000610f7b602083018461193f565b60006020828403121561199057600080fd5b5035919050565b600080600080608085870312156119ad57600080fd5b6119b6856116ce565b93506119c4602086016116e7565b92506119d2604086016116e7565b9396929550929360600135925050565b6000806000606084860312156119f757600080fd5b83359250611a07602085016116e7565b9150611a15604085016116e7565b90509250925092565b60008060008060008060c08789031215611a3757600080fd5b863595506020808801359550611a4f604089016116e7565b9450611a5d606089016116e7565b9350611a6b608089016116ce565b925060a08801356001600160401b0380821115611a8757600080fd5b818a0191508a601f830112611a9b57600080fd5b813581811115611aad57611aad6116fe565b611abf601f8201601f19168501611714565b91508082528b84828501011115611ad557600080fd5b80848401858401376000848284010152508093505050509295509295509295565b6020808252601490820152737850726f76696465723a206f6e6c792047616d6560601b604082015260600190565b600181811c90821680611b3857607f821691505b60208210811415611b5957634e487b7160e01b600052602260045260246000fd5b50919050565b600060208083526000845481600182811c915080831680611b8157607f831692505b858310811415611b9f57634e487b7160e01b85526022600452602485fd5b878601838152602001818015611bbc5760018114611bcd57611bf8565b60ff19861682528782019650611bf8565b60008b81526020902060005b86811015611bf257815484820152908501908901611bd9565b83019750505b50949998505050505050505050565b600081518084526020808501945080840160005b83811015611c3757815187529582019590820190600101611c1b565b509495945050505050565b602081526000610f7b6020830184611c07565b6001600160a01b038316815260406020820181905260009061155c90830184611c07565b6020808252601390820152727850726f76696465723a206f6e6c792044414f60681b604082015260600190565b6020808252601490820152733c283937bb34b232b91d1037b7363c9029b2b63360611b604082015260600190565b83815263ffffffff83166020820152606060408201526000611cf96060830184611c07565b95945050505050565b6020808252600d908201526c37b7363c9023bab0b93234b0b760991b604082015260600190565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611d7057611d70611d40565b500290565b600082611d9257634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611da957611da9611d40565b500390565b60008251611dc0818460208701611913565b9190910192915050565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c08201819052600090611e189083018461193f565b9998505050505050505050565b600060208284031215611e3757600080fd5b5051919050565b6001600160a01b0392831681529116602082015260400190565b60008219821115611e6b57611e6b611d40565b500190565b600060208284031215611e8257600080fd5b81518015158114610f7b57600080fdfea2646970667358221220af4a4ca3525d4a8514d818f62ca5ea0aa9180be4487af8d5eef9b965db881fbb64736f6c634300080b0033",
  "deployedBytecode": "0x6080604052600436106101735760003560e01c80630f9c394a146101785780631dbb91511461018d5780632aa3ac85146101ad57806339daa1b2146101cd5780633e032a3b1461021257806344835d76146102365780634f514f06146102565780635afbf5ba1461027657806360a15a6c146102965780636637b882146102b65780637468a52b146102d657806375183d571461030f578063785b030a14610331578063819912a2146103515780638a0dac4a146103715780638c64ea4a14610391578063963e63c7146103df5780639973ea87146103f45780639f0188a71461042a578063a9060c3c1461044a578063ab2dcc5d1461045d578063ab976ebe14610470578063b70811bc14610486578063b976db2a146104a4578063c3fe3e28146104c4578063d1212eef146104e4578063d33465cd14610504578063de4b054814610524578063df3fa90414610558578063f0fa55a91461056e578063fd614f411461058e578063ff4763e5146105ae575b600080fd5b61018b6101863660046117b8565b6105d2565b005b34801561019957600080fd5b5061018b6101a8366004611815565b61074f565b3480156101b957600080fd5b5061018b6101c8366004611841565b6107a7565b3480156101d957600080fd5b506101fd6101e836600461186b565b60076020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561021e57600080fd5b5061022860045481565b604051908152602001610209565b34801561024257600080fd5b5061018b610251366004611886565b61083e565b34801561026257600080fd5b5061018b61027136600461186b565b610891565b34801561028257600080fd5b5061018b6102913660046118ab565b6108e4565b3480156102a257600080fd5b5061018b6102b13660046118c6565b610934565b3480156102c257600080fd5b5061018b6102d136600461186b565b6109b6565b3480156102e257600080fd5b506002546102fa90600160a01b900463ffffffff1681565b60405163ffffffff9091168152602001610209565b34801561031b57600080fd5b50610324610a02565b604051610209919061196b565b34801561033d57600080fd5b5061018b61034c36600461197e565b610a90565b34801561035d57600080fd5b5061018b61036c36600461186b565b610abf565b34801561037d57600080fd5b5061018b61038c36600461186b565b610b0b565b34801561039d57600080fd5b506103c76103ac36600461197e565b6008602052600090815260409020546001600160a01b031681565b6040516001600160a01b039091168152602001610209565b3480156103eb57600080fd5b50610324610b57565b34801561040057600080fd5b506103c761040f3660046118ab565b6006602052600090815260409020546001600160a01b031681565b34801561043657600080fd5b5061018b6104453660046118ab565b610b64565b61018b610458366004611886565b610bb4565b61018b61046b366004611997565b610d39565b34801561047c57600080fd5b5061022860035481565b34801561049257600080fd5b506000546001600160a01b03166103c7565b3480156104b057600080fd5b5061018b6104bf36600461197e565b610eb2565b3480156104d057600080fd5b506002546103c7906001600160a01b031681565b3480156104f057600080fd5b5061018b6104ff3660046119e2565b610ee1565b34801561051057600080fd5b5061022861051f36600461197e565b610f2e565b34801561053057600080fd5b506103c77f000000000000000000000000000000000000000000000000000000000000000081565b34801561056457600080fd5b5061022860055481565b34801561057a57600080fd5b5061018b61058936600461197e565b610f82565b34801561059a57600080fd5b506103246105a9366004611a1e565b610fb1565b3480156105ba57600080fd5b506002546102fa90600160c01b900463ffffffff1681565b6002546001600160a01b031633146106055760405162461bcd60e51b81526004016105fc90611af6565b60405180910390fd5b60025463ffffffff848116600160a01b9092041614156106a457600934156106405760405162461bcd60e51b81526004016105fc9190611b5f565b50604051632189651f60e01b81526001600160a01b03831690632189651f9061066d908490600401611c42565b600060405180830381600087803b15801561068757600080fd5b505af115801561069b573d6000803e3d6000fd5b50505050505050565b600554341015600a906106ca5760405162461bcd60e51b81526004016105fc9190611b5f565b5060007f60a15a6ceeddd71d7d400d721256643867757bd9c349090ff2f5d4ac2855b05490506000818484604051602401610706929190611c55565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915290506107478582600080611124565b50505b505050565b6000546001600160a01b031633146107795760405162461bcd60e51b81526004016105fc90611c79565b60009182526008602052604090912080546001600160a01b0319166001600160a01b03909216919091179055565b6000546001600160a01b031633146107d15760405162461bcd60e51b81526004016105fc90611c79565b63ffffffff821660008181526006602090815260409182902080546001600160a01b0319166001600160a01b0386169081179091558251938452908301527ff29e81641e01d30e59b0af239e1f4c0f1d9b119a02364d0ebb6c46518a5a5edf910160405180910390a15050565b33301461085d5760405162461bcd60e51b81526004016105fc90611ca6565b6002546040516364bfacaf60e01b81526001600160a01b03909116906364bfacaf9061066d90869086908690600401611cd4565b6000546001600160a01b031633146108bb5760405162461bcd60e51b81526004016105fc90611c79565b6001600160a01b03166000908152600760205260409020805460ff19811660ff90911615179055565b6000546001600160a01b0316331461090e5760405162461bcd60e51b81526004016105fc90611c79565b6002805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b3330146109535760405162461bcd60e51b81526004016105fc90611ca6565b604051632189651f60e01b81526001600160a01b03831690632189651f9061097f908490600401611c42565b600060405180830381600087803b15801561099957600080fd5b505af11580156109ad573d6000803e3d6000fd5b505050505b5050565b6000546001600160a01b031633146109e05760405162461bcd60e51b81526004016105fc90611c79565b600080546001600160a01b0319166001600160a01b0392909216919091179055565b60098054610a0f90611b24565b80601f0160208091040260200160405190810160405280929190818152602001828054610a3b90611b24565b8015610a885780601f10610a5d57610100808354040283529160200191610a88565b820191906000526020600020905b815481529060010190602001808311610a6b57829003601f168201915b505050505081565b6001546001600160a01b03163314610aba5760405162461bcd60e51b81526004016105fc90611d02565b600555565b6000546001600160a01b03163314610ae95760405162461bcd60e51b81526004016105fc90611c79565b600280546001600160a01b0319166001600160a01b0392909216919091179055565b6000546001600160a01b03163314610b355760405162461bcd60e51b81526004016105fc90611c79565b600180546001600160a01b0319166001600160a01b0392909216919091179055565b600a8054610a0f90611b24565b6000546001600160a01b03163314610b8e5760405162461bcd60e51b81526004016105fc90611c79565b6002805463ffffffff909216600160c01b0263ffffffff60c01b19909216919091179055565b3360009081526007602052604090205460ff16610c0b5760405162461bcd60e51b81526020600482015260156024820152741e141c9bdd9a59195c8e881bdb9b1e481d985d5b1d605a1b60448201526064016105fc565b600254600160a01b810463ffffffff908116600160c01b909204161415610c825760093415610c4d5760405162461bcd60e51b81526004016105fc9190611b5f565b506002546040516364bfacaf60e01b81526001600160a01b03909116906364bfacaf9061066d90869086908690600401611cd4565b600554341015600a90610ca85760405162461bcd60e51b81526004016105fc9190611b5f565b5060007f44835d768fda698d8aaca563c82c423c79e3d7392f148c1bd2c375688f7639539050600081858585604051602401610ce693929190611cd4565b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b0319909316929092179091526002549091506107479063ffffffff600160c01b9091041682600080611124565b6002546001600160a01b03163314610d635760405162461bcd60e51b81526004016105fc90611af6565b60025463ffffffff858116600160a01b909204161415610e045760093415610d9e5760405162461bcd60e51b81526004016105fc9190611b5f565b5060405163365eed6560e21b81526001600160a01b0384169063d97bb59490610dcd9084908690600401611d29565b600060405180830381600087803b158015610de757600080fd5b505af1158015610dfb573d6000803e3d6000fd5b50505050610eac565b600554341015600a90610e2a5760405162461bcd60e51b81526004016105fc9190611b5f565b5060408051602481018390526001600160a01b03848116604483015285166064808301919091528251808303909101815260849091019091526020810180516001600160e01b031663d1212eef60e01b1790527fd1212eefa4bc02cb0bd68f637e0de7d4889a50f86b182d5e5ff498dceb5ad295906109ad8682600080611124565b50505050565b6001546001600160a01b03163314610edc5760405162461bcd60e51b81526004016105fc90611d02565b600355565b333014610f005760405162461bcd60e51b81526004016105fc90611ca6565b60405163365eed6560e21b81526001600160a01b0382169063d97bb5949061066d9086908690600401611d29565b60008061271060045484610f429190611d56565b610f4c9190611d75565b61271060035485610f5d9190611d56565b610f679190611d75565b610f719085611d97565b610f7b9190611d97565b9392505050565b6001546001600160a01b03163314610fac5760405162461bcd60e51b81526004016105fc90611d02565b600455565b63ffffffff8216600090815260066020526040902054606090849084906001600160a01b031615801590611005575063ffffffff81166000908152600660205260409020546001600160a01b038381169116145b80156110395750336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016145b6110735760405162461bcd60e51b815260206004820152600b60248201526a139bdd081d1c9d5cdd195960aa1b60448201526064016105fc565b6000306001600160a01b03168560405161108d9190611dae565b6000604051808303816000865af19150503d80600081146110ca576040519150601f19603f3d011682016040523d82523d6000602084013e6110cf565b606091505b50509050806111175760405162461bcd60e51b815260206004820152601460248201527378526563656976653a204e6f207375636365737360601b60448201526064016105fc565b5050509695505050505050565b63ffffffff84166000908152600660205260409020546001600160a01b0316806111a15760405162461bcd60e51b815260206004820152602860248201527f5850726f76696465723a2064657374696e6174696f6e20636861696e206e6f74604482015267081d1c9d5cdd195960c21b60648201526084016105fc565b6001600160a01b038316156111ba576111ba838361125e565b600154600480546040516345560b5d60e11b81526001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000811694638aac16ba94349461121b948d948a948d949116928c9290918f9101611dca565b60206040518083038185885af1158015611239573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906109ad9190611e25565b604051636eb1769f60e11b815281906001600160a01b0384169063dd62ed3e9061128e9033903090600401611e3e565b602060405180830381865afa1580156112ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112cf9190611e25565b10156113185760405162461bcd60e51b8152602060048201526018602482015277155cd95c881b5d5cdd08185c1c1c9bdd9948185b5bdd5b9d60421b60448201526064016105fc565b61132d6001600160a01b038316333084611361565b6109b26001600160a01b0383167f0000000000000000000000000000000000000000000000000000000000000000836113cc565b6040516001600160a01b0380851660248301528316604482015260648101829052610eac9085906323b872dd60e01b906084015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b03199093169290921790915261147b565b600081846001600160a01b031663dd62ed3e30866040518363ffffffff1660e01b81526004016113fd929190611e3e565b602060405180830381865afa15801561141a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061143e9190611e25565b6114489190611e58565b6040516001600160a01b038516602482015260448101829052909150610eac90859063095ea7b360e01b90606401611395565b60006114d0826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b031661154d9092919063ffffffff16565b80519091501561074a57808060200190518101906114ee9190611e70565b61074a5760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105fc565b606061155c8484600085611564565b949350505050565b6060824710156115c55760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105fc565b6001600160a01b0385163b61161c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105fc565b600080866001600160a01b031685876040516116389190611dae565b60006040518083038185875af1925050503d8060008114611675576040519150601f19603f3d011682016040523d82523d6000602084013e61167a565b606091505b509150915061168a828286611695565b979650505050505050565b606083156116a4575081610f7b565b8251156116b45782518084602001fd5b8160405162461bcd60e51b81526004016105fc919061196b565b803563ffffffff811681146116e257600080fd5b919050565b80356001600160a01b03811681146116e257600080fd5b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f191681016001600160401b038111828210171561173c5761173c6116fe565b604052919050565b600082601f83011261175557600080fd5b813560206001600160401b03821115611770576117706116fe565b8160051b61177f828201611714565b928352848101820192828101908785111561179957600080fd5b83870192505b8483101561168a5782358252918301919083019061179f565b6000806000606084860312156117cd57600080fd5b6117d6846116ce565b92506117e4602085016116e7565b915060408401356001600160401b038111156117ff57600080fd5b61180b86828701611744565b9150509250925092565b6000806040838503121561182857600080fd5b82359150611838602084016116e7565b90509250929050565b6000806040838503121561185457600080fd5b61185d836116ce565b9150611838602084016116e7565b60006020828403121561187d57600080fd5b610f7b826116e7565b60008060006060848603121561189b57600080fd5b833592506117e4602085016116ce565b6000602082840312156118bd57600080fd5b610f7b826116ce565b600080604083850312156118d957600080fd5b6118e2836116e7565b915060208301356001600160401b038111156118fd57600080fd5b61190985828601611744565b9150509250929050565b60005b8381101561192e578181015183820152602001611916565b83811115610eac5750506000910152565b60008151808452611957816020860160208601611913565b601f01601f19169290920160200192915050565b602081526000610f7b602083018461193f565b60006020828403121561199057600080fd5b5035919050565b600080600080608085870312156119ad57600080fd5b6119b6856116ce565b93506119c4602086016116e7565b92506119d2604086016116e7565b9396929550929360600135925050565b6000806000606084860312156119f757600080fd5b83359250611a07602085016116e7565b9150611a15604085016116e7565b90509250925092565b60008060008060008060c08789031215611a3757600080fd5b863595506020808801359550611a4f604089016116e7565b9450611a5d606089016116e7565b9350611a6b608089016116ce565b925060a08801356001600160401b0380821115611a8757600080fd5b818a0191508a601f830112611a9b57600080fd5b813581811115611aad57611aad6116fe565b611abf601f8201601f19168501611714565b91508082528b84828501011115611ad557600080fd5b80848401858401376000848284010152508093505050509295509295509295565b6020808252601490820152737850726f76696465723a206f6e6c792047616d6560601b604082015260600190565b600181811c90821680611b3857607f821691505b60208210811415611b5957634e487b7160e01b600052602260045260246000fd5b50919050565b600060208083526000845481600182811c915080831680611b8157607f831692505b858310811415611b9f57634e487b7160e01b85526022600452602485fd5b878601838152602001818015611bbc5760018114611bcd57611bf8565b60ff19861682528782019650611bf8565b60008b81526020902060005b86811015611bf257815484820152908501908901611bd9565b83019750505b50949998505050505050505050565b600081518084526020808501945080840160005b83811015611c3757815187529582019590820190600101611c1b565b509495945050505050565b602081526000610f7b6020830184611c07565b6001600160a01b038316815260406020820181905260009061155c90830184611c07565b6020808252601390820152727850726f76696465723a206f6e6c792044414f60681b604082015260600190565b6020808252601490820152733c283937bb34b232b91d1037b7363c9029b2b63360611b604082015260600190565b83815263ffffffff83166020820152606060408201526000611cf96060830184611c07565b95945050505050565b6020808252600d908201526c37b7363c9023bab0b93234b0b760991b604082015260600190565b9182526001600160a01b0316602082015260400190565b634e487b7160e01b600052601160045260246000fd5b6000816000190483118215151615611d7057611d70611d40565b500290565b600082611d9257634e487b7160e01b600052601260045260246000fd5b500490565b600082821015611da957611da9611d40565b500390565b60008251611dc0818460208701611913565b9190910192915050565b63ffffffff881681526001600160a01b0387811660208301528681166040830152851660608201526080810184905260a0810183905260e060c08201819052600090611e189083018461193f565b9998505050505050505050565b600060208284031215611e3757600080fd5b5051919050565b6001600160a01b0392831681529116602082015260400190565b60008219821115611e6b57611e6b611d40565b500190565b600060208284031215611e8257600080fd5b81518015158114610f7b57600080fdfea2646970667358221220af4a4ca3525d4a8514d818f62ca5ea0aa9180be4487af8d5eef9b965db881fbb64736f6c634300080b0033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "calculateEstimatedAmount(uint256)": {
        "details": "This function computes the estimated amount by subtracting the percentage fees from the input amount.",
        "params": {
          "_amount": "The initial amount to be transferred, in vaultcurrency.decimals()."
        },
        "returns": {
          "_0": "estAmount The estimated amount after accounting for connextRouterFee and slippage."
        }
      },
      "pushProtocolAllocationsToVault(uint32,address,int256[])": {
        "params": {
          "_chainId": "Number of chain used",
          "_deltas": "Array with delta allocations where the index matches the protocolId",
          "_vault": "Address of the vault on given chainId"
        }
      },
      "pushRewardsToGame(uint256,uint32,int256[])": {
        "params": {
          "_chainId": "Number of chain used",
          "_rewards": "Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId",
          "_vaultNumber": "Number of the vault"
        }
      },
      "pushRewardsToVault(uint32,address,address,uint256)": {
        "params": {
          "_chainId": "Number of chain used",
          "_user": "Address of the user who wants to redeem rewards",
          "_value": "Rewards to be redeemed by the user, in",
          "_vault": "Address of the vault on given chainId"
        }
      },
      "receiveProtocolAllocationsToVault(address,int256[])": {
        "params": {
          "_deltas": "Array with delta allocations where the index matches the protocolId",
          "_vault": "Address of the vault on given chainId"
        }
      },
      "receiveRewardsToGame(uint256,uint32,int256[])": {
        "params": {
          "_chainId": "Number of chain used",
          "_rewards": "Array with rewardsPerLockedToken of all protocols in vault => index matches protocolId",
          "_vaultNumber": "Number of the vault"
        }
      },
      "receiveRewardsToVault(uint256,address,address)": {
        "params": {
          "_user": "Array with delta allocations where the index matches the protocolId",
          "_value": "Address of the vault on given chainId",
          "_vault": "Address of the vault on given chainId"
        }
      },
      "setConnextRouterFee(uint256)": {
        "params": {
          "_connextRouterFee": "The new value for the connextRouterFee."
        }
      },
      "setGame(address)": {
        "params": {
          "_game": "New address of the game"
        }
      },
      "setGameChainId(uint32)": {
        "params": {
          "_gameChain": "New chainId for game contract"
        }
      },
      "setGuardian(address)": {
        "params": {
          "_guardian": "new address of the guardian"
        }
      },
      "setHomeChain(uint32)": {
        "params": {
          "_homeChain": "New home chainId"
        }
      },
      "setMinimumConnextFee(uint256)": {
        "details": "Sets the minimum ether value for cross chain messages through Connext.",
        "params": {
          "_newMinimumConnextFee": "The new minimum Connext fee in ether to be set."
        }
      },
      "setSlippage(uint256)": {
        "params": {
          "_slippage": "The new value for the slippage."
        }
      },
      "setTrustedRemoteConnext(uint32,address)": {
        "params": {
          "_srcAddress": "Address of remote xprovider",
          "_srcChainId": "Chain is for remote xprovider, some as the remote receiving contract chain id (xReceive)"
        }
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "params": {
          "_amount": "not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive.",
          "_asset": "not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive.",
          "_callData": "calldata, contains function signature which has to be called in this contract as well as the values, hashed and encoded.",
          "_origin": "sender domain id.",
          "_originSender": "sender contract.",
          "_transferId": "not used here because only relevant in case of a value transfer. Still in the signature to comply with IXReceive."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "calculateEstimatedAmount(uint256)": {
        "notice": "Calculates the estimated amount after accounting for connextRouterFee and slippage."
      },
      "getDao()": {
        "notice": "Getter for dao address"
      },
      "pushProtocolAllocationsToVault(uint32,address,int256[])": {
        "notice": "Game pushes deltaAllocations to vaultsPush protocol allocation array from the game to all vaults/chains"
      },
      "pushRewardsToGame(uint256,uint32,int256[])": {
        "notice": "Step 9 push; Vaults push rewardsPerLockedToken to gamePush price and rewards array from vaults to the game"
      },
      "pushRewardsToVault(uint32,address,address,uint256)": {
        "notice": "Game pushes user rewards to vaults"
      },
      "receiveProtocolAllocationsToVault(address,int256[])": {
        "notice": "Game pushes deltaAllocations to vaultsReceives protocol allocation array from the game to all vaults/chains"
      },
      "receiveRewardsToGame(uint256,uint32,int256[])": {
        "notice": "Step 9 receive; Vaults push rewardsPerLockedToken to gameReceives price and rewards array from vaults to the game"
      },
      "receiveRewardsToVault(uint256,address,address)": {
        "notice": "Game pushes rewards of a user to vault for the user to redeem them"
      },
      "setConnextRouterFee(uint256)": {
        "notice": "Sets the connextRouterFee variable."
      },
      "setDao(address)": {
        "notice": "Setter for dao address"
      },
      "setGame(address)": {
        "notice": "Setter for new game address"
      },
      "setGameChainId(uint32)": {
        "notice": "Setter for gameChain Id"
      },
      "setGuardian(address)": {
        "notice": "Setter for guardian address"
      },
      "setHomeChain(uint32)": {
        "notice": "Setter for homeChain Id"
      },
      "setSlippage(uint256)": {
        "notice": "Sets the slippage variable."
      },
      "setTrustedRemoteConnext(uint32,address)": {
        "notice": "set trusted provider on remote chains, allow owner to set it multiple times."
      },
      "setVaultAddress(uint256,address)": {
        "notice": "Setter for vault address to vaultNumber for guardian"
      },
      "toggleVaultWhitelist(address)": {
        "notice": "Whitelists vault address for onlyVault modifier"
      },
      "xReceive(bytes32,uint256,address,address,uint32,bytes)": {
        "notice": "function implemented from IXReceive from connext, standard way to receive messages with connext."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 816,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "dao",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 818,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "guardian",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 820,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "game",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 822,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "homeChain",
        "offset": 20,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 824,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "gameChain",
        "offset": 24,
        "slot": "2",
        "type": "t_uint32"
      },
      {
        "astId": 826,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "connextRouterFee",
        "offset": 0,
        "slot": "3",
        "type": "t_uint256"
      },
      {
        "astId": 828,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "slippage",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 830,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "minimumConnextFee",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 834,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "trustedRemoteConnext",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint32,t_address)"
      },
      {
        "astId": 838,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "vaultWhitelist",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 842,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "vaults",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 845,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "etherNotUsed",
        "offset": 0,
        "slot": "9",
        "type": "t_string_storage"
      },
      {
        "astId": 848,
        "contract": "contracts/XProvider.sol:XProvider",
        "label": "minValue",
        "offset": 0,
        "slot": "10",
        "type": "t_string_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint32,t_address)": {
        "encoding": "mapping",
        "key": "t_uint32",
        "label": "mapping(uint32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}